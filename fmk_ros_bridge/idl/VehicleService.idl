#ifndef MOBILITY_IDL
#define MOBILITY_IDL

typedef sequence<short> SeqShort;
typedef sequence<long> SeqLong;
typedef sequence<float> SeqFloat;
typedef sequence<double> SeqDouble;

enum AlarmType
{
	unknown
	,fault
	,warning
};

struct Point
{
 double x;
 double y;
};

struct Position
{
 double x;
 double y;
 double theta;
};


struct Alarm
{
  unsigned long code;
  AlarmType     type;
  string        source;
};

typedef sequence<Alarm> SeqAlarm;

struct Velocity {
	double translation;
	double rotation;
};

typedef Velocity Acc;
interface VehicleService
{

	const string ifVersion = "RTC VehicleService interface: ver.2.0.0";

	boolean clearAlarm();
	boolean getAccelerationLimit( out double accLimitT, out double accLimitR );
	boolean getActiveAlarm( in short numOfAlarm, out short numOfActiveAlarm, out SeqAlarm activeAlarms );
	boolean getBatteryVoltage( out double voltage );
	boolean getDefaultAcceleration( out Acc defaultAccel );
	boolean getDefaultVelocity( out Velocity defaultVel );
	boolean getIFVersion(out string version);
	boolean getInput(in unsigned long ioid, out unsigned long input);
	boolean getPosition(out Position pos);
	boolean getServoStatus(in unsigned long axisid, out boolean status);
	boolean getState( out short state, out string Msg );
	boolean getVelocityLimit( out double velLimitT, out double velLimitR );
	boolean getVersion( out string ver );
	boolean moveCircularRel(in Point centerPoint, in double theta);
	boolean moveContinuousRel(in Position pos);
	boolean moveCruiseAbs(in Point cruisePoint);
	boolean moveForward( in double x_ );
	boolean moveJog(in double xVel, in double yVel, in double thetaVel);
	boolean moveLinearAbs(in Position pos);
	boolean moveLinearRel(in Position pos);
	boolean moveTurn( in double theta_ );
	boolean pause();
	boolean resume();
	boolean setAcceleration(in Velocity accel);
	boolean setDigitalSensorLock ( in boolean OnOff);
	boolean setJogTimeout( in short timeout );
	boolean setJoystick( in boolean OnOff );
	boolean setOutput(in unsigned long ioid, in unsigned long output, in unsigned long mask);
	boolean setPosition( in Position pos );
	boolean setPower( in boolean OnOff);
	boolean setServo( in boolean OnOff);
	boolean setVelocity( in Velocity vel );
	boolean stop();
	boolean unlock();

};

#endif
