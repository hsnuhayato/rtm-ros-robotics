#summary ソフトウェアのテスト・ドキュメント・リリースの練習

目的はプロジェクトの全過程を通ってリリース出来る形まで行うことです。

= 課題 =

 * （１点）画像から円の位置を復元出来るROSノードの作成
 * （４点）楕円抽出の単体テスト、ROSノードの総合テスト
 * （３点）ドキュメントの作成
 * （２点）Debianパッケージの作成

合計点数：１０

= プロジェクトの仕様 =

世界に緑色の円が決まった大きさで存在している。その円がイメージに投影されると楕円として表示されます。楕円の情報を画像から検出し、もとの３次元の円の位置を復元し、その情報をROSに送信のがプロジェクトの目的です。３次元の結果をrvizで表示する

== ROSノード ==

=== パラメーター ===

ellipse_radius - 円の物理的な大きさ

[http://www.ros.org/wiki/roscpp/Overview/Parameter%20Server パラメーター仕様のチュートリアル]

=== 入力メッセージ ===

image - [http://www.ros.org/doc/api/sensor_msgs/html/msg/Image.html sensor_msgs/Image]

=== 出力メッセージ ===

二つのメッセージを作る必要があります。[http://www.ros.org/wiki/ROS/Tutorials/CreatingMsgAndSrv メッセージ作成チュートリアル]

画像からの全楕円の位置と回転。定義：
メッセージ名前：Poses2D
{{{
geometry_msgs/Pose2D poses[]
}}}


緑色の楕円の３次元中心点：
メッセージ名前：Points3D
{{{
geometry_msgs/Point3D points[]
}}}


=== サービス ===

画像を入力し、３次元点を返すサービス：

{{{
sensor_msgs/Image image
===
Points circles
}}}

[http://www.ros.org/wiki/ROS/Tutorials/CreatingMsgAndSrv サービス作成チュートリアル]

== テスト ==

== ドキュメント ==

== Debianパッケージ ==

= 準備・設定 =

[ROS_Install]でagentsystem_ros_tutorialsのチェックアウトし、以下のように更新する。

{{{
roscd agentsystem_ros_tutorials
svn up
}}}

OpenCVの[https://code.ros.org/trac/opencv/browser/trunk/opencv/samples/cpp/fitellipse.cpp fitellipseのサンプル]は画像から楕円を抽出しているのでそれをROS化するのが一番速いです。

== Jenkinsの設定 ==

Jenkinsをローカルホースとにインストールすることです。
[https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+Ubuntu Jenkinsインストール]


= 提出項目 =

C++かPythonを使ってもOKです。両方で完璧に出来ている人は５点で成績を増やすので挑戦してみてください。