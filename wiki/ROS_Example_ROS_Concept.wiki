#summary ROSの基本概念

<wiki:toc max_depth="2" />

= 概要 =
すでに[ROS_Install ROSのインストール]は終わっていることを前提とさせていただきます。
ここでは、まだ、ROSに触れたことがないひとが、いろいろと新しいであろうROSの概念をかなり簡略化して説明できたらと思っております。概念というとかなり大げさですが、軽い用語説明みたいなものになります。

基本的に[http://www.ros.org/wiki/ROS/Tutorials ROSのTutorialsページ]を見に行っていただければ問題ないですが、軽く見ていただけると少し理解がはやまるかもしれません。

= 解説=
== 準備 ==
== nodeについて==
 rosではさまざまなプログラムが立ち上がり、お互いに違う言語同士でも情報を渡しあえるような工夫がされています。
[http://rtm-ros-robotics.googlecode.com/svn/wiki/talkerListenerChart.png]

===node===
上の図をごらんください。
上では大まかに以下のプログラムが動いています。
||/talker||"Hello"というメッセージを出し続けるプログラム||
||/listener||"Hello"というメッセージを受け続けるプログラム||
||/rosout||さまざまなからプログラムからのログを処理するプログラム||
のようになっています。

このそれぞれが、nodeと呼ばれひとつのプログラムを動かす形になっています。
名前が違えば、同じプログラムでも複数起動することが可能です。
===topic===
そして次に注目をしていただきたいものが、node同士を結んでいる矢印です。それぞれの矢印には、名前が書いてありますが、ここには２種類あります。
||/chatter||talkerからの情報が流れてきていて書き込まれているところ||
||/rosout||プログラムからのログが流れてきて書き込まれているところ||
のような役割をしています。

これらは、node同士がやりとりするためのメッセージを用いた手段のひとつです。例えていうならば、掲示板のようなもので、これらに情報が書き込まれるたびに受け取り手に情報が来たことが伝わり、プログラムで定義されるコールバック関数がよばれます。また、受け取り手が複数いてもよく、以下のような状況にすることも可能です。
[http://rtm-ros-robotics.googlecode.com/svn/wiki/talkerListenerChart2.png]

== msgについて==
msg（メッセージ）はtopicを用いてnode間で情報を届けるときに渡される情報のことです。それぞれのtopicを準備するときに、そのtopicの書き込むmsg(メッセージ)の形(type)を決めなくてはなりません。

たとえば、上の例の場合topicには以下のような情報がどんどん書きこまれています。
{{{
//例です。
data: hello world 180374
---
data: hello world 180375
---
data: hello world 180376
---
data: hello world 180377
---
data: hello world 180378
---
data: hello world 180379
・・・
}}}
と書いてあります。


一方、メッセージの方の定義するファイルの中では
{{{
string data
}}}
となっており、上のtopicに書かれているデータと対応していることがわかりますでしょうか。この場合data = "hello world 180379"の文字列のようにしてdataと言う変数に値が入るような形になってます。

topicの情報を受け取る側も、受け取る準備をするときに、何の形式（type）のメッセージを受け取るか指定する必要があります。

ここで、メッセージをtopicに送り出すことをpublish(パブリッシュ)かadvertise、メッセージをtopicから受け取ることをsubscribe(サブスクライブ)と言うので押さえておいてください。

= srvについて=