#summary One-sentence summary of this page.
open_rtm_ros_bridge for hiro

[http://ros.org/doc/api/openrtm_ros_bridge/html/]
this converts idl file to ros srv file and generate Python ros component that
provides ROS service interfacing to OpenRTM service. This means that
if you have existing OpenRTM service (in your case, hiro ik service), the
system automatically generate ROS service node that you can call service
from your ros python code.


=Installation and testing=

{{{
$ rosmake openrtm_ros_bridge
}}}

===Testing ===

1:
{{{
$ roslaunch openrtm_ros_bridge myservice_example.launch
Then
$ roslaunch openrtm_ros_bridge myservice_rosbridge.launch
should be ok. you can see three openrtm components as
http://ros.org/doc/api/openrtm_ros_bridge/html/_images/service-rosbridge.png
}}}

after that, you can call openrtm service from ros command
{{{
$ rosservice  list
$ rosservice call /bridge/echo "hello , this is echo sample"
}}}
2:
then 

{{{
$ roscd hrpsys
}}}
open CMakeList.txt. You will find the function
{{{
 rtmbuild_genbridge()
}}}
It converts all idl files to msg/srv with make
command and generate ROSBridge source code under src_gen directory.

*hrpsys/sample/hrp4c-rosbridge.launch* is the example.
first you select ServiceBridgeComponent for corresponding OpenRTM
service under src_gen directory
{{{
  <node name="SequencePlayerServiceROSBridgeComp" pkg="hrpsys"
type="SequencePlayerServiceROSBridgeComp"
        args='$(arg openrtm_args)'>
    <param name="service_port" value="service0"/>
  </node>
}}}
and then you modify rtactivate and rtconnect tag for your Bridge Component