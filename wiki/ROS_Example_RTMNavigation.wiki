#summary ROS RTM Navigation Integration

<wiki:toc max_depth="3" />

= RTM-ROS Beego 実験環境セットアップ =

まず車両点検を行う．

* 電源ケーブルの確認

電源ケーブルが正しく接続されていることを確認すること．

http://rtm-ros-robotics.googlecode.com/svn/wiki/beego_setup_powercable.jpg


* コンソールパネルの確認

パネル左側のスタートキーがOFFになっていることを確認すること．

中央のボタン4つが全てOFFになっていることを確認すること．

右側のシリアルコネクタにケーブルがささっていることを確認すること．

http://rtm-ros-robotics.googlecode.com/svn/wiki/beego_setup_switch.jpg

* 制御PCの準備

LANケーブル，CANcaseXLのUSBケーブル（位置は搭載するPCの機種により異なる）を確認すること．

デバイスマネージャ（スタート→ファイル名を指定して実行→devmgmt.msc）から
VectorHardware → CANcaseXL が存在することを確認すること．

http://rtm-ros-robotics.googlecode.com/svn/wiki/beego_setup_winpc.jpg


* 外部PCの準備

台車に搭載されたWindowsノートPC(以降Windows機と呼ぶ)，LinuxノートPC(以降Linux機と呼ぶ)の他に，外部からコマンド指令やセンサ監視するためのPC(以降外部PCと呼ぶ)を準備すること．外部PCはBeegoのアクセスポイント（F142DCG）に接続すること．

= RTM-ROS Beego ソフトウェアセットアップ =

 * Beego, Windows機の導入
芝浦工業大学の山口様が作成された「RTC-CANopenリファレンスマニュアル」を参考にセットアップする

 * Beeogo, Linux機と外部PCの導入　(Ubuntu 10.04 をインストールしたPCを例に)
rtmros_commonのインストール：　
[http://www.ros.org/wiki/electric/Installation/Ubuntu]をみて最低限のROSの環境を作った後，OpenRTM,ROS統合のためのインストール作業を行う．
[ROS_Install]にインストールのためのドキュメントがあるが，
{{{
rosinstall ~/prog/rtm-ros-robotics /opt/ros/electric http://rtm-ros-robotics.googlecode.com/svn/tags/latest/agentsystem_ros_tutorials/rtm-ros-robotics.rosinstall
rosmake mrobot_ros_bridge
}}}
これだけで必要なROSとRTMが全て入るようになっている．

なおLinux機の.bashrcに
Windows, Linux機と外部PC間のROS,RTMの通信ができるように以下の行を加える
{{{
export RTCTREE_NAMESERVERS=192.168.0.9
export ROS_MASTER_URI=http://192.168.0.10:11311
}}}

外部PCの.bashrcにも以下の行を加える
{{{
export RTCTREE_NAMESERVERS=192.168.0.9
export ROS_MASTER_URI=http://192.168.0.10:11311 
export ROS_IP=192.168.0.* (このPCに割り当てられたIPアドレス)
}}}
       
= Beegoの基本動作ソフトウェアの実行 =
==  Windows側でのRTC-CANopen環境の立ち上げ ==
 # Right Motor ,Left Motor 計４つのすべてのスイッチがOFFになっていることを確認してBeegoの鍵をON．
 # windows機でデスクトップの !0.AutoRun.bat を実行．
 #  9個のコマンドプロンプトを上がるが，注目するのはstatusmanager.bat．windowに
{{{
   ################ RTC ################
   Instance Name            Status
   ProxyEPOSLeft0           DEAD
   ProxyEPOSRight0          DEAD
   Odometry0           　   INACTIVE
   BeegoController0         INACTIVE
}}}
という表示があるはずである．statusがうえからDEAD,DEAD,INACTIVE,INACTIVEとなっていることを確認．
 # Right Motor ,Left Motor のそれぞれ赤いボタンをONにする．
このときstatusmanager.bat.は
{{{
   ################ RTC ################
   Instance Name            Status
   ProxyEPOSLeft0           ACTIVE
   ProxyEPOSRight0          ACTIVE
   Odometry0             　 ACTIVE
   BeegoController0         ACTIVE
}}}
となっている．もし４つともACTIVEでなければ
windows機でデスクトップの !KillAll.bat を実行し 1.に戻る．
もし４つともACTIVEならば，残りの緑のボタンもONにして次に進む．

http://rtm-ros-robotics.googlecode.com/svn/wiki/beego_4switch.jpg

http://rtm-ros-robotics.googlecode.com/svn/wiki/beego_autorun_icon.jpg

== Linux側でPS３コントローラの接続，RTM-ROS Beegoソフトウェアの立ち上げ ==

Linux機で terminalを開いて
{{{
$ roslaunch mrobot_ros_bridge mrobot_ros_bridge.launch 
}}}
とうつ．　ここでPS3コントローラの真ん中のボタン（Play Station ボタン）を長押しし
て，linux機とペアリングをする．ペアリングされているかの確認は
{{{
$ rostopic echo /joy
}}}
 として実際にcontrollerを押してみるとよい
PS3コントローラを最初に使うときは[http://www.ros.org/wiki/ps3joy/Tutorials/PairingJoystickAndBluetoothDongle]を参照すること．

== PS3コントローラを用いたBeegoの操縦 ==

ここまでで，PS3コントローラをROSを介してBeegoを動かすことができる．
 * PS3コントローラの操縦方法:
 ** L1を押しながら，左スティックで前身・後進
 ** L1を押しながら，右スティックで回転

== Kinect画面をWebブラウザで確認する ==

外部PCを無線LANにつないで，Beego上のLinux機(192.168.0.10)にSSHする．
SSH先で
{{{
roslaunch beego_navigation setup_kinect.launch　
}}}
さらに同じSSH先で
{{{
roslaunch beego_navigation setup_camera.launch
}}}
とうつ．外部PCのWEBブラウザのアドレス欄に
{{{
http://192.168.0.10:8081/stream?topic=/camera/rgb/image_rect_color
}}}
をいれるとKinectの画像が見れる．この状態で，
{{{
roslaunch mrobot_ros_bridge mrobot_ros_bridge.launch 
}}}
とすれば，Beegoの視野画像を見ながら，PS３コントローラで操縦できる．
無線アクセスポイントが飛ぶ範囲までは操縦可能．


= Beegoの地図作成，ナビゲーションデモの実行 =

== 2次元地図を作成する ==

まず，PS3コントローラが使える状態にしておく．(Kinectは後に自動的に起動される)
{{{
$ roslaunch mrobot_ros_bridge mrobot_ros_bridge.launch 
}}}

その後Linux機でterminalを開いて
{{{
roslaunch beego_navigation start_make_map.launch 
}}}
とうつ．別のterminalで
{{{
rosrun rviz rviz
}}}
とうって出てきたウィンドウを見る．
この状態でコントローラを用いてBeegoを動かし，地図が更新されていくのを確認．

{{{
rosrun map_server map_saver 
}}}
とうつと繰り返しmap.pgmを保存してくれる．
（Ctrl + C してとめる）

== 移動アプリを利用する ==

まず，PS3コントローラが使える状態にしておく．(Kinectは後に自動的に起動される)
{{{
$ roslaunch mrobot_ros_bridge mrobot_ros_bridge.launch 
}}}

その後別のターミナルで
{{{
roslaunch beego_navigation start_nav_beego.launch
}}}
とうつ． 別のterminalで
{{{
rosrun rviz rviz
}}}
とうって出てきたウィンドウを見る．
使い方は
左上の2D Pose Estimateをおして，地図上で左クリックしてBeegoの現在地を指定し，そのままドラッグして離すことで向きを指定する．
左上の2D Nav Goalをおして，地図上で左クリックしてBeegoの目的地を指定し，そのままドラッグして離すことで向きを指定する．



= RTM-ROSブリッジソフトウェア構成の説明 =

以下にに全体のシステム図を紹介する．
　上部がRTM, 下部がROSの世界に別れており，MobileRobotROSBridgeCompを介してメッセージをやりとりしている．

[http://rtm-ros-robotics.googlecode.com/svn/wiki/beego_system_configuration.ppt http://rtm-ros-robotics.googlecode.com/svn/wiki/beego_system_configuration.png]

下図にはWindows機のプログラムを立ち上げた際のEclipseの画面を載せた．上部はRTMのみ，下部はRTM+ROSブリッジ時であり，ブリッジ時にMobileRobotROSBridgeCompが立ち上がり，右図（Rviz, ROSのノードのvisualizeしたもの）のようにROSのネットワーク内にRTMのメッセージを流すノードが作られる．

[http://rtm-ros-robotics.googlecode.com/svn/wiki/beego_component_configuration.ppt http://rtm-ros-robotics.googlecode.com/svn/wiki/beego_component_configuration.png]

= Beegoハードウェアの変更点 =

　配布されたBeegoはRTC-CANopenが適用されたリファレンスロボットである．
今回の目的はRT-Middlewareで動くRTC-CANopenとROSをつなげて，ナビゲーションを可能にすることである．そのためLinux上のみで動くROSのために新たにLinux機と無線アクセスポイントを用意した．
　　
「Beegoの構成-ハードウェア」の通り，無線アクセスポイントを介して，Windows機とLinux機を有線LANでつなぐ．なお，アクセスポイントの設定により，Windows機には192.168.0.9, Linux機には192.168.0.10を割り振っている．

実験の際には, 他のPC（`192.168.0.*`が割り振られる）からLinux機にSSHして，操作することを期待している．また，Beegoのバッテリの上部にナビゲーション用のセンサとしてKinectをつけ，Linux機に繋いだ．無線アクセスポイントとKinectの電源は，どちらもBeegoについていた12V電源から供給している．

注意　2011/09/17現在，Windows機を閉じたまま動かすとBeegoが指令通りに動かないバグが確認されているので，とりあえずWindows機はディスプレイを開けておくほうがよい．無線アクセスポインタはWindows機に両面テープで固定してある．

[http://rtm-ros-robotics.googlecode.com/svn/wiki/beego_hardware_configuration.ppt http://rtm-ros-robotics.googlecode.com/svn/wiki/beego_hardware_configuration.png]


= 新RTM-ROS Beego 実験環境セットアップ =
Windows機のドライバのLinuxバージョンが使えるようになったので、Linux機のみでのセットアップの紹介

== beego最新版覚え書き ==
* もうwindows機はいらないです

** 32bit rt-linuxを起動,Beegoの起動 (Linux版の場合Beegoの４つのスイッチ
は初めから赤いスイッチはつけておいてよい)
** 白いコネクタで1)のノートPCとBeegoをつなぐ

ここからノートPCでの作業 (コネクタを外す度にやる）
{{{
$ echo "i 0x0014 e" > /dev/pcan32
$ sudo ifconfig can0 down
$ sudo ifconfig can0 up
$ rosrun openrtm rtm-naming-restart
$ roscd rtmros_common
$ cd rtc_canopen/work
$ ./0.AutoRun.sh
}}}

ここで大量のwindowが立ち上がる。
その中のstatas manegerで4つの項目がすべてactiveであるかどうか確認。
dead、inactiveなどがでた場合。

{{{
$ ./10.KillAll.sh
$ echo "i 0x0014 e" > /dev/pcan32
$ sudo ifconfig can0 down
$ sudo ifconfig can0 up
$ rosrun openrtm rtm-naming-restart
}}}
を行う。

Beegoの2つの緑色スイッチをつける

{{{
$ roslaunch mrobot_ros_bridge mrobot_ros_bridge.launch
}}}

ここまででps3コントローラで動かせるはず

{{{
$ roslaunch beego_navigation start_make_map.launch
}}}

これで動かないときは
緑のスイッチをoff/onするといい、