#summary PCLのチュートリアルで使うCMakeLists.txt

<wiki:toc max_depth="2" />

= 概要 =
PCLのチュートリアルで共通に使われるCMakeLists.txtの意味と使い方を簡単に説明します。ここでは、主に、[http://pointclouds.org/documentation/tutorials/using_pcl_pcl_config.php 本家PCLのチュートリアル]を参考にしてます。詳しくはそちらをご覧ください。

= CMakeLists.txtの内容 =
cmakeは簡単に言うとMakefileやそのほかの設定を生成するためのものです。全体の流れとしては、

 # CMakeLists.txtを記述する。
 # 全体のディレクトリを作る。(buildフォルダを作るなど。慣例)
 # cmake ..　を行いMakefileなどを生成
 # makeを打って、プログラムを生成
 # プログラムが実行できる

のようになっています。この章では、1の部分を説明します。２以降は、 CMakelists.txtの使い方 になります。
以下のようなCMakeLists.txtを例にものすごく簡単に説明します。
{{{
cmake_minimum_required(VERSION 2.6 FATAL_ERROR)
project(MY_GRAND_PROJECT)
find_package(PCL 1.3 REQUIRED COMPONENTS common io)
include_directories(${PCL_INCLUDE_DIRS})
link_directories(${PCL_LIBRARY_DIRS})
add_definitions(${PCL_DEFINITIONS})
add_executable(pcd_write_test pcd_write.cpp)
target_link_libraries(pcd_write_test ${PCL_COMMON_LIBRARIES} ${PCL_IO_LIBRARIES})
}}}

まず、一行目
{{{
cmake_minimum_required(VERSION 2.6 FATAL_ERROR)
}}}
この行は、cmakeファイルを使うのに必須な行で、今回とっても基本的なプロジェクトを作るので、cmake2.8より高いバージョンを利用する必要がないため、2.6が最低限必要として、それ以下のときにエラーとなるように設定しています。

{{{
project(MY_GRAND_PROJECT)
}}}
ここでは、プロジェクトの名前を決め、ソースディレクトリを参照するMY_GRAND_PROJECT_SOURCE_DIRや、cmakeを実行しているディレクトリMY_GRAND_PROJECT_BINARY_DIRなどのcmakeの便利ないくらかの変数をセットしてくれます。

{{{
find_package(PCL 1.3 REQUIRED COMPONENTS common io)
}}}

PCLのパッケージが最低でも1.3を満たしているように探しています。上のREQUIREDを設定することで、1.3以上のPCLがなければ、失敗するようになっています。PCLは以下のことを要求することができます。

 * ひとつのコンポーネントのみ：find_package(PCL 1.3 REQUIRED COMPONENTS io)
 * 複数のコンポーネント：find_package(PCL 1.3 REQUIRED COMPONENTS io common)
 * 存在するものすべて:find_package(PCL 1.3 REQUIRED)

{{{
include_directories(${PCL_INCLUDE_DIRS})
link_directories(${PCL_LIBRARY_DIRS})
add_definitions(${PCL_DEFINITIONS})
}}}

また、PCLが見つかるといくらかの関連した値がセットされます。

 * PCL_FOUND: pclが見つかったら１がセットされ他の場合は何もセットされません。
 * PCL_INCLUDE_DIRS: PCLのインストールヘッダーや依存のヘッダへのパスがセットされます。
 * PCL_LIBRARIES: ビルとされインストールされたPCLのライブラリのファイル名がセットされます。
 * PCL_LIBRARY_DIRS: PCLのライブラリと3rdpartyへのパスがセットされます。
 * PCL_VERSION: 見つかったPCLのバージョンです。
 * PCL_COMPONENTS: すべての利用できるコンポーネントのリストです。
 * PCL_DEFINITIONS: 必要なプリプロセッサ定義とコンパイラフラッグのリストです。

{{{
add_executable(pcd_write_test pcd_write.cpp)
}}}

ここで、cmakeにpcl_write_testという名前の実行ファイルを単一のpcd_write.cppファイルから作ることを伝えます。CMakeは環境によって拡張子とアクセス権限を補ってくれます。(windowsなら.exe Linuxなら空白)

{{{
target_link_libraries(pcd_write_test ${PCL_COMMON_LIBRARIES} ${PCL_IO_LIBRARIES})
}}}

ビルドしている実行ファイルは、PCLの関数郡の呼び出しを作成します。ここまでで、cmakeに対してPCLのヘッダーのみをインクルードして、コンパイラに呼び出している関数について教えていました。さらにリンクをしようとしているライブラリへのリンカーも知らせなくてはなりません。先ほども述べたようにPCLの見つかったライブラリは、PCL_LIBRARIESの変数を使うことで参照できるので、やらなくてはならないのは、target_link_librariesのマクロを呼び出してリンクをさせることだけです。PCLConfig.cmakeは、あたかも自分でビルドしたかのように他のプロジェクトのターゲットを使えるようにするEXPORTというCMakeの特別な値を使います。そのようなターゲットを使うときは、それらは、インポーテッドターゲット(imported target)と呼ばれ、他のターゲットと同じように働きます。

----------

= CMakeLists.txtの使い方 =
試しに、pcd_write.cppをCMakeLists.txtを通して、準備してみましょう。まず、以下のようにして、ディレクトリなどを準備しましょう。(pcl_cmake_testなどはどんな名前でも構いません。)
{{{
$ mkdir pcl_cmake_test
$ cd pcl_cmake_test
$ mkdir build
}}}

次に、ソースコードであるpcd_write.cppをpcl_cmake_test直下に準備します。

{{{
#include <iostream>
#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>

int
  main (int argc, char** argv)
{
  pcl::PointCloud<pcl::PointXYZ> cloud;

  // Fill in the cloud data
  cloud.width    = 5;
  cloud.height   = 1;
  cloud.is_dense = false;
  cloud.points.resize (cloud.width * cloud.height);

  for (size_t i = 0; i < cloud.points.size (); ++i)
  {
    cloud.points[i].x = 1024 * rand () / (RAND_MAX + 1.0f);
    cloud.points[i].y = 1024 * rand () / (RAND_MAX + 1.0f);
    cloud.points[i].z = 1024 * rand () / (RAND_MAX + 1.0f);
  }

  pcl::io::savePCDFileASCII ("test_pcd.pcd", cloud);
  std::cerr << "Saved " << cloud.points.size () << " data points to test_pcd.pcd." << std::endl;

  for (size_t i = 0; i < cloud.points.size (); ++i)
    std::cerr << "    " << cloud.points[i].x << " " << cloud.points[i].y << " " << cloud.points[i].z << std::endl;

  return (0);
}
}}}
そしたら、
pcl_cmake_test以下に、以下をCMakeLists.txtとして保存します。
{{{
cmake_minimum_required(VERSION 2.8 FATAL_ERROR)

project(pcd_write)

find_package(PCL 1.2 REQUIRED)

include_directories(${PCL_INCLUDE_DIRS})
link_directories(${PCL_LIBRARY_DIRS})
add_definitions(${PCL_DEFINITIONS})

add_executable (pcd_write pcd_write.cpp)
target_link_libraries (pcd_write ${PCL_LIBRARIES})
}}}

ここまでで、全体の準備すべきものは終わったと思います。
手順通り行なっていれば以下のようなディレクトリで見れるはずです。
[http://rtm-ros-robotics.googlecode.com/svn/wiki/pcl_cmake_directory_structure.png]

そしたら、いよいよcmakeを行います。cmakeを行うことで、いろいろな設定ファイルやMakefileを自動生成してくれます。

※CMakeFiles.txtとはいるディレクトリが異なるので注意してください※

{{{
$ cd build
$ cmake ..
}}}

おそらく以下のようなものが見れるはずです。
{{{
-- The C compiler identification is GNU
-- The CXX compiler identification is GNU

・・・・・・・

(Required is at least version "1.2")
-- Configuring done
-- Generating done
-- Build files have been written to: ・・・・/pcl_cmake_test/build
}}}

これらを実行すると、build以下に以下のようなものが出てくると思います。

{{{
CMakeCache.txt  CMakeFiles  Makefile  cmake_install.cmake
}}}

確認ができたら、buildの中で
{{{
$ make
}}}

を行い、プログラムが生成されるのを確認します。
build内に恐らく、pcd_writeが生成されるので、
{{{
$ ./pcdwrite
}}}
と行って実行してみます。

{{{
Saved 5 data points to test_pcd.pcd.
    0.352222 -0.151883 -0.106395
    -0.397406 -0.473106 0.292602
    -0.731898 0.667105 0.441304
    -0.734766 0.854581 -0.0361733
    -0.4607 -0.277468 -0.916762
}}}

となって、うまく実行できたことを確認できます。