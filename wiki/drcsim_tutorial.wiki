#summary One-sentence summary of this page.

= Introduction =

drcsimの使い方です．


= Details =
                                          
* rosのインストール *

https://code.google.com/p/rtm-ros-robotics/wiki/ROS_Install

* drcsimのインストール *

http://gazebosim.org/wiki/DRC/Install をみて
{{{
sudo sh -c 'echo "deb http://packages.osrfoundation.org/drc/ubuntu precise main" > /etc/apt/sources.list.d/drc-latest.list'
wget http://packages.osrfoundation.org/drc.key -O - | sudo apt-key add -
sudo apt-get update
sudo apt-get install gazebo drcsim
}}}
としてインストールする．

~/.bashrcに以下を追記
{{{
ROS_PACKAGE_PATH_ORG=$ROS_PACKAGE_PATH
source /usr/share/drcsim/setup.sh
export ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH_ORG:$ROS_PACKAGE_PATH
export ROS_PACKAGE_PATH=`echo $(echo $ROS_PACKAGE_PATH | sed -e "s/:/\n/g" | awk '!($0 in A) && A[$0] = 1' | grep -v "opt/ros"; echo $ROS_PACKAGE_PATH | sed -e "s/:/\n/g" | awk '!($0 in A) && A[$0] = 1' | grep "opt/ros") | sed -e "s/ /:/g"`
}}}
ここまでで，セットアップ終わり.


* 確認

{{{
roscd atlas_utils
# /usr/share/drcsim-2.5/ros/以下にあることを確認(2.5からアップデートされることもある）
rosmake atlas_utils
}}}

{{{
roscd hrpsys_gazeboで
# ~/ros/fuerte/rtm-ros-robotics/rtmros_common/以下にあることを確認
REAME.install に記述してある以下をしてください（必須でないがこれをしないと、rosmakeが通らない）

### installing footstep planner
## roscd; rm -rf alufr-ros-pkg ## remove source install
sudo apt-get install ros-fuerte-humanoid-navigation
rosrun roseus generate-all-msg-srv.sh $(rospack depends footstep_planner)

### installing laser
roscd ## move to ~/ros/fuerte
rosws set laser_assembler --git https://github.com/ros-perception/laser_assembler.git -v groovy-devel
rosws set laser_filters --git https://github.com/YoheiKakiuchi/laser_filters.git -v groovy-devel
rosws update laser_assembler laser_filters
source ~/.bashrc
rosmake laser_filters laser_assembler
}}}

{{{
roscd hrpsys_gazeboで
# ~/ros/fuerte/rtm-ros-robotics/rtmros_common/以下にあることを確認
rosdep install hrpsys_gazebo
rosmake hrpsys_gazebo
}}}

* 実行

{{{
ターミナル１で
$ rosrun openrtm rtm-naming
ターミナル２で
$ roslaunch atlas_utils <launch_name>(_cpu_lidar).launch
<launch_name>
atlas_sandia_hand # atlasだけの世界
vrc_task_1 # robotics challenge タスク１
vrc_tack_2 # robotics challenge タスク２
vrc_tack_3 # robotics challenge タスク３
NVIDIAのグラフィックスカードでないPCでは、
_cpu_lidar をつける。（例、vrc_task_1_cpu_lidar.launch)

# これでgazeboのウィンドウが出る
ターミナル３で
$ roslaunch hrpsys_gazebo atlas_hrpsys.launch USE_LASER:=true
# USE_LASER:=falseにするとlaserの取り込みができない（動作が少し早くなる）

# 別ターミナルで
roscd hrpsys_gazebo
roseus euslisp/atlas-interface.l
(atlas-init) 
# *ri*と*atlas*ができる
(objects (list *atlas*))
(send *atlas* :larm :shoulder-y :joint-angle 100)
(send *ri* :angle-vector (send *atlas* :angle-vector) 1000)
# これで倒れる
}}}

* ロボットの動かし方

{{{
(atlas) ;;　これで *atlas* というロボットモデルオブジェクトが生成される．
(send *atlas* :torso :torso-waist-y)
(send *atlas* :torso :torso-waist-p)
(send *atlas* :torso :torso-waist-r)

(send *atlas* :larm :elbow-p)
(send *atlas* :larm :elbow-y)
(send *atlas* :larm :wrist-p)
(send *atlas* :larm :shoulder-r)
(send *atlas* :larm :shoulder-y)
(send *atlas* :larm :wrist-y)

(send *atlas* :larm :knee-p)
(send *atlas* :larm :ankle-r)
(send *atlas* :larm :crotch-p)
(send *atlas* :larm :crotch-r)
(send *atlas* :larm :ankle-p)
(send *atlas* :larm :crotch-y)

(send *atlas* :head :neck-p)
}}}

として現在の各関節角度を取得できる．間接の姿勢を変更するためには
{{{
(send *atlas* :larm :elbow-p :joint-angle 90)
}}}
などとする．間接角度の単位はdegree.

これで作った姿勢を，シミュレータ内のロボットに送るには
{{{
  (send *ri* :angle-vector (send *atlas* :angle-vector) 2000)
}}}
最後の数値は，遷移時間．単位はミリ秒．

ハンドを動かすには
{{{
  (send *ri* :start-grasp) ;; 両手を閉じる
  (send *ri* :stop-grasp) ;; 両手を開く
  (send *ri* :start-grasp :larm) ;; 左手だけ閉じる
}}}
のようにする．

歩行
{{{
send *ri* :bdi-go-pos 2.0 1.0 30.0 ;; x[m] y[m] theta[degree]
}}}