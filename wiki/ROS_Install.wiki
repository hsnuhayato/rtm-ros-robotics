#summary ROSインストール法

<wiki:toc max_depth="2" />

= ROS本体のインストール =

<wiki:comment>
http://www.ros.org/wiki/diamondback/Installation/Ubuntu
</wiki:comment>
http://www.ros.org/wiki/electric/Installation/Ubuntu
 より抜粋


ROS本体、Robot向け汎用パッケージ、PR2向けパッケージなど公開されているパッケージをソースでインストールする

これらの手続きは，以下のコマンドを入力することで実行される．(ROS Electric)
{{{
wget https://jsk-ros-pkg.svn.sourceforge.net/svnroot/jsk-ros-pkg/trunk/jsk.rosbuild -O /tmp/jsk.rosbuild
yes | bash /tmp/jsk.rosbuild
cd ros/electric
source setup.bash
rosws merge http://rtm-ros-robotics.googlecode.com/svn/tags/latest/agentsystem_ros_tutorials/rtm-ros-robotics.rosinstall
rosws update
}}}

これらの手続きは，以下のコマンドを入力することで実行される．(ROS Fuerte)
{{{
wget https://jsk-ros-pkg.svn.sourceforge.net/svnroot/jsk-ros-pkg/trunk/jsk.rosbuild -O /tmp/jsk.rosbuild
yes | bash /tmp/jsk.rosbuild fuerte
cd ros/fuerte
source setup.bash
rosws merge http://rtm-ros-robotics.googlecode.com/svn/tags/latest/agentsystem_ros_tutorials/rtm-ros-robotics.rosinstall
rosws update
}}}
このコマンドを実行すると
(1)aptのリポジトリ登録
(2)aptによるROS本体のインストール
(3)ROS外部パッケージのインストール
が行われる.


また11.04ユーザは，
{{{
sudo apt-get install xfonts-100dpi xfonts-75dpi msttcorefonts
}}}
をしてリブートしておく必要がある．


= ROS外部パッケージの更新 =

また,
{{{
cd ~/ros/electric
rosws update
}}}
とすると,ROS外部パッケージのソースツリー更新が行われる.
(roswsについては hhttp://www.ros.org/doc/api/rosinstall/html/rosws_tutorial.html を参照)

ROS関連のプログラムを使うためには以下の様にして環境変数をセットする必要がある．
{{{
source ~/ros/electric/setup.bash
}}}
この一行を ~/.bashrc に追加するとよいでしょう．

= ROS関連コマンド =

最低限 [http://www.ros.org/wiki/roscd roscd], [http://www.ros.org/wiki/rosdep rosdep], [http://www.ros.org/wiki/rosmake rosmake], [http://www.ros.org/wiki/rosrun rosrun] を知っていればよい．例えば，
{{{
rosdep install euslisp
rosmake euslisp
}}}
とすると，[http://jskeus.sourceforge.net/ euslisp]パッケージに必要なパッケージをダウンロード＆インストールし，さらにコンパイルする．

また，euslispパッケージにあるディレクトリに移動したければ
{{{
roscd euslisp
}}}
とすればよい．
[http://www.ros.org/wiki/ROS/Tutorials/NavigatingTheFilesystem ROSwikiのroscd]をより詳しく参照できます。
また，euslispパッケージ以下のirteusglという実行ファイルを実行したければ
{{{
rosrun euslisp irteusgl
}}}
とする．引数も渡せるので，
{{{
rosrun euslisp irteusgl irteus/demo/demo.l "(crank-motion)"
rosrun euslisp irteusgl models/irt-all-robots.l "(make-all-robots)"
rosrun euslisp irteusgl models/irt-all-objects.l "(make-all-objects)"
}}}
等としてサンプルを試すことが出来る．crank-motionはリターンキーを打つと止まり、irteusgl$のプロンプトが出る．プロンプトに対して、exitを入れると
euslispが終了する。

より詳しい情報はhttp://www.ros.org/wiki/ROS/Tutorials へ，また，

いざとなったら[http://www.ros.org/wiki/Documentation?action=AttachFile&do=get&target=ROScheatsheet.pdf ROS CheetSheet]を参考にすると助けになる．

ほとんどのunixコマンドは先頭にrosをつけたツールが存在する(rosls, roscp等）．いろいろと調べるとよいが，もしかしたらその先は[http://0xcc.net/misc/bad-knowhow.html 奥深い]ので要注意．

インストールができたら，[ROS_Example サンプルプログラム]を試してみよう



==実行に際して（困ったときに）==
上の実行に付け足す形で実行の際の補足をかけたらと思います。
実行は主に以下の用な形でできます。
 * rosrunを使う。
 * roslaunchを使う。
 * 対象の実行ファイルがあるフォルダでファイル名を指定する。
どの場合もrosを使うのであれば、masterであるroscoreは基本的に
起動しておく必要がある。

===rosrunを使う場合===

===roslaunchを使う場合===
xml形式で書かれた.launchファイルを実行する。
複数のnodeを一気に呼び出し、それぞれに名前をつけることができるものがlaunchの特徴である。使い方は[http://www.ros.org/wiki/ROS/Tutorials/UsingRxconsoleRoslaunch ROSwikiのroslaunch]の前後から参照するとわかりやすい。上のrosrunを複数回分を一つにまとめて行いそれぞれのnodeのつながりを書くことができる。
{{{
roslaunch pr2eus pr2-send-joints.launch
}}}
のようにすることで実行することができる。

===ファイル名を指定===
いつも通りターミナルで実行ファイルを指定するのと同様に、カレントディレクトリに対象の実行ファイルがある場合、
{{{
./talker
}}}
とすれば、実行をすることが可能である。

また、上にあるように、shebangが記されていて、実行権限があれば、
{{{
pr2-send-joints.l
}}}
で実行される。
