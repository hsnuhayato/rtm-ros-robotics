#summary ROSインストール法

<wiki:toc max_depth="2" />

= ROS本体のインストール =

<wiki:comment>
http://www.ros.org/wiki/diamondback/Installation/Ubuntu
</wiki:comment>
http://www.ros.org/wiki/electric/Installation/Ubuntu
 より抜粋


ROS本体、Robot向け汎用パッケージ、PR2向けパッケージなど公開されているパッケージをソースでインストールする

これらの手続きは，以下のコマンドを入力することで実行される．(ROS Electric)
{{{
wget https://jsk-ros-pkg.svn.sourceforge.net/svnroot/jsk-ros-pkg/trunk/jsk.rosbuild -O /tmp/jsk.rosbuild
yes | bash /tmp/jsk.rosbuild
cd ros/electric
source setup.bash
rosws merge http://rtm-ros-robotics.googlecode.com/svn/tags/latest/agentsystem_ros_tutorials/rtm-ros-robotics.rosinstall
rosws update
}}}

これらの手続きは，以下のコマンドを入力することで実行される．(ROS Fuerte)
{{{
wget https://jsk-ros-pkg.svn.sourceforge.net/svnroot/jsk-ros-pkg/trunk/jsk.rosbuild -O /tmp/jsk.rosbuild
yes | bash /tmp/jsk.rosbuild fuerte
cd ros/fuerte
source setup.bash
rosws merge http://rtm-ros-robotics.googlecode.com/svn/tags/latest/agentsystem_ros_tutorials/rtm-ros-robotics.rosinstall
rosws update
}}}
このコマンドを実行すると
(1)aptのリポジトリ登録
(2)aptによるROS本体のインストール
(3)ROS外部パッケージのインストール
が行われる.


また11.04ユーザは，
{{{
sudo apt-get install xfonts-100dpi xfonts-75dpi msttcorefonts
}}}
をしてリブートしておく必要がある．
=rosemacsのインストール=
Emacsを使いたい人には、かなり便利なものです。ここではインストール方法と簡単な使い方をご説明します。詳しくは、[http://www.ros.org/wiki/rosemacs ROSのrosemacs]を参考にしてください。

利点は以下です。
*パスの指定をパッケージ名から行える。

===インストール===
インストールするには、とりあえず以下を実行してください。
{{{
sudo apt-get install rosemacs-el
}}}

インストールが終わったら、ホームディレクトリに移動して、.emacsを更新します。
{{{
$cd ~   //ホームディレクトリに移動
}}}
.emacsを開いてください。ファイルの最後に以下を加えてください。
{{{
;; Load the library and start it up
(require 'rosemacs)
(invoke-rosemacs)

;; Optional but highly recommended: add a prefix for quick access
;; to the rosemacs commands
(global-set-key "\C-x\C-r" ros-keymap)
}}}
保存したら、試しに使ってみます。
===使い方===
emacsを開きまず、C-x C-r C-f(Ctrl+x Ctrl+r Ctrl+f)を行うと、下の方に、Enter ros pathが出てきていると思うので、
{{
Enter ros path:roseus_tutorials/manifest.xml
}}
と入力すれば、roseus_tutorialsの中のmanifest.xmlが開けると思います。

= ROS外部パッケージの更新 =

また,
{{{
cd ~/ros/fuerte
rosws update
}}}
とすると,ROS外部パッケージのソースツリー更新が行われる.
(roswsについては hhttp://www.ros.org/doc/api/rosinstall/html/rosws_tutorial.html を参照)

ROS関連のプログラムを使うためには以下の様にして環境変数をセットする必要がある．
{{{
source ~/ros/fuerte/setup.bash
}}}
この一行を ~/.bashrc に追加するとよいでしょう．

= ROS関連コマンド =

最低限 [http://www.ros.org/wiki/roscd roscd], [http://www.ros.org/wiki/rosdep rosdep], [http://www.ros.org/wiki/rosmake rosmake], [http://www.ros.org/wiki/rosrun rosrun] を知っていればよい．例えば，
{{{
rosdep install euslisp
rosmake euslisp
}}}
とすると，[http://jskeus.sourceforge.net/ euslisp]パッケージに必要なパッケージをダウンロード＆インストールし，さらにコンパイルする．

また，euslispパッケージにあるディレクトリに移動したければ
{{{
roscd euslisp
}}}
とすればよい．
[http://www.ros.org/wiki/ROS/Tutorials/NavigatingTheFilesystem ROSwikiのroscd]をより詳しく参照できます。
また，euslispパッケージ以下のirteusglという実行ファイルを実行したければ
{{{
rosrun euslisp irteusgl
}}}
とする．引数も渡せるので，
{{{
rosrun euslisp irteusgl irteus/demo/demo.l "(crank-motion)"
rosrun euslisp irteusgl models/irt-all-robots.l "(make-all-robots)"
rosrun euslisp irteusgl models/irt-all-objects.l "(make-all-objects)"
}}}
等としてサンプルを試すことが出来る．crank-motionはリターンキーを打つと止まり、irteusgl$のプロンプトが出る．プロンプトに対して、exitを入れると
euslispが終了する。

より詳しい情報はhttp://www.ros.org/wiki/ROS/Tutorials へ，また，

いざとなったら[http://www.ros.org/wiki/Documentation?action=AttachFile&do=get&target=ROScheatsheet.pdf ROS CheetSheet]を参考にすると助けになる．

ほとんどのunixコマンドは先頭にrosをつけたツールが存在する(rosls, roscp等）．いろいろと調べるとよいが，もしかしたらその先は[http://0xcc.net/misc/bad-knowhow.html 奥深い]ので要注意．

インストールができたら，[ROS_Example サンプルプログラム]を試してみよう



==実行に際して（困ったときに）==
上の実行に付け足す形で実行の際の補足をかけたらと思います。
実行は主に以下の用な形でできます。
 * rosrunを使う。
 * roslaunchを使う。
 * 対象の実行ファイルがあるフォルダでファイル名を指定する。
どの場合もrosを使うのであれば、masterであるroscoreは基本的に
起動しておく必要がある。
また、rosrun や roslaunchはroscdと同様に、パスが通ってなくてはならない。つまり、ROS_PACKAGE_PATHに該当するパッケージの親フォルダを指定する必要がある。

===rosrunを使う場合===
cppをコンパイルした実行ファイルに対しては、
{{{
rosrun roscpp_tutorials talker
}}}
のようにすると、いかなるディレクトリにいても、talkerを実行することができる。

lispの場合は以下二通りのやり方がある。
{{{
rosrun roseus roseus pr2-send-joints.l
}}}
この場合は、pr2-send-joints.lのあるディレクとにいなくてはなりません。
一つ目のroseusがパッケージ名,二つ目のroseusが実行ファイル名、pr2-send-joints.lが今回は実行ファイルの引数として渡されて実行されてます。
{{{
rosrun pr2eus pr2-send-joints.l
}}}
この場合は、pr2eusはパッケージ名であり、pr2-send-joints.lが対象のスクリプトです。
スクリプトのファイルしか指定されていないのに、なぜ、実行されるかと言いますと、shebangを利用していて、pr2-send-joints.lの1行目に
{{{
#!/usr/bin/env roseus
}}}
と書かれているからです。上記の記述がない、または、実行権限がない場合は実行はできません。
もし、以下のようなエラーが出る場合は、
{{{
roseus : command not found
}}}
roseusのパスが通ってないので、PATHにroseusのパスを通す必要があります。[http://code.google.com/p/rtm-ros-robotics/wiki/ROS_Example_TroubleShooting#%E5%AE%9F%E8%A1%8C%E7%B7%A8 困ったときは]を参照して、.bashrcを再度読み込んでください。
また、もちろん
{{{
roseus pr2-send-joints.l
}}}
でもできますが、同じく、カレントディレクトリにpr2-send-joints.lがないと実行できません。
はじめてshebangを聞いた人は[http://ja.wikipedia.org/wiki/%E3%82%B7%E3%83%90%E3%83%B3_%28Unix%29 wikipediaのシバン]を参照。
===roslaunchを使う場合===
xml形式で書かれた.launchファイルを実行する。
複数のnodeを一気に呼び出し、それぞれに名前をつけることができるものがlaunchの特徴である。使い方は[http://www.ros.org/wiki/ROS/Tutorials/UsingRxconsoleRoslaunch ROSwikiのroslaunch]の前後から参照するとわかりやすい。上のrosrunを複数回分を一つにまとめて行いそれぞれのnodeのつながりを書くことができる。
{{{
roslaunch pr2eus pr2-send-joints.launch
}}}
のようにすることで実行することができる。

===ファイル名を指定===
いつも通りターミナルで実行ファイルを指定するのと同様に、カレントディレクトリに対象の実行ファイルがある場合、
{{{
./talker
}}}
とすれば、実行をすることが可能である。

また、lispのファイルの場合、上にあるように、shebangが記されていて、実行権限があれば、
{{{
pr2-send-joints.l
}}}
でも実行される。