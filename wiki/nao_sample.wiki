#summary One-sentence summary of this page.

= Naoの動かし方 =

== 初期化 ==
{{{
rosrun roseus roseus "nao-interface.l"
$ (setq *nao* (nao))
$ (setq *ni* (instance nao-interface :init)
$ (objects (list *nao*))
}}}

== 関節を動かす方法 ==
{{{
(send *nao* :reset-pose)   # reset-pose(初期姿勢）になる
(send *nao* :angle-vector) # anglve-vector(関節角度列）を返す

(send *nao* limb joint :joint-angle [ angle ]) # 1つの関節を動かす angleの単位系は degree または mm
;; limb joint
:rarm :shoulder-p
      :shoulder-r
      :elbow-p
      :elbow-r
      :wrist-y
:larm ;; :rarmと同じ
:rleg :crotch-y
      :crotch-r
      :crotch-p
      :knee-p
      :ankle-p
      :ankle-r
:lleg ;; :rlegと同じ
:head :neck-y
      :neck-p
      
(send *nao* :head :neck-p :joint-angle 30) # :head(頭) :neck-p（前後方向）に 30deg 傾く

(send *nao* :angle-vector 
#f(110.0 10.0 -90.0 -40.0 0.0 110.0 -10.0 90.0 40.0 0.0 0.0 0.0 -30.0 60.0 -30.0 0.0 0.0 0.0 -30.0 60.0 -30.0 0.0 0.0 0.0))

#すべての関節のパラメータを１度に制御する
#angle-vectorのパラメータの順序は(pprint (send-all (send *nao* :joint-list) :name))で確認できる
}}}


== 足を地面につける ==
{{{
(send *nao* :fix-leg-to-coords (make-coords) '(:rleg :lleg)) # :rlegと:llegのend-coords座標系の中心が(make-coords)(<=原点座標)にあうようにする
}}}

== ビューワにロボットを表示する ==
{{{
(objects (list *nao*))
}}}

== 重心位置の変更 ==
{{{
(send *nao* :fix-leg-to-coords (make-coords) '(:rleg :lleg))

(send *nao* :move-centroid-on-foot :both '(:rleg :lleg)
      :target-centroid-pos (send *nao* :lleg :end-coords :worldpos)) #重心位置を左足に移す
(send *ni* :angle-vector (send *nao* :angle-vector) 2000)
(send *ni* :wait-interpolation)

(send *nao* :rleg :move-end-pos #f(0 0 50)) #右足を50mm上に動かす
(send *ni* :angle-vector (send *nao* :angle-vector) 2000)
(send *ni* :wait-interpolation)

}}}


== Inverse Kinematics ==
{{{
(send *nao* :rarm :inverse-kinematics 
      (send  (send (send *nao* :rarm :end-coords) :copy-worldcoords) :translate (float-vector 100 0 100) :world)
      :revert-if-fail nil
      :look-at-target t
      :rotation-axis nil
      :debug-view nil
      )
(send *ni* :angle-vector (send *nao* :angle-vector) 2000)
(send *ni* :wait-interpolation)
}}}

== Fullbody-IK ==
{{{
(send *nao* :fix-leg-to-coords (make-coords) '(:rleg :lleg))
(let* ((tc (list nil
		 (send (send *nao* :lleg :end-coords :copy-worldcoords) :translate #f(0 0 25) :world)
		 nil
		 nil)))
  (with-move-target-link-list
   (mt ll *nao* '(:rleg :lleg :rarm :larm))
   (send *nao* :fullbody-inverse-kinematics
	 (mapcar #'(lambda (c m) (if c c (send m :copy-worldcoords))) tc mt)
	 :link-list ll :move-target mt
	 :collision-avoidance-link-pair nil
	 :revert-if-fail nil    :stop 1000
	 :translation-axis '(t t nil nil)
	 :rotation-axis '(t :z t t)
	 :thre '(5 5 10 10)
	 :rthre (list (deg2rad 2) (deg2rad 2) (deg2rad 2) (deg2rad 2))
	 :target-centroid-pos (send (send *nao* :rleg :end-coords :copy-worldcoords) :worldpos)
	 :centroid-thre 20)))

}}}

= Nao Ros =
ROSwiki
http://wiki.ros.org/nao_driver

== nao_driver ==
{{{
roslaunch nao_driver nao_driver.launch nao_ip:=NaoのIP
}}}

== rviz に表示 ==
{{{
roslaunch nao_remote nao_remote.launch
# 別ターミナルで
rosrun rviz rviz
}}}