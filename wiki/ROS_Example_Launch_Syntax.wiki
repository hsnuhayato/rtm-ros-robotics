#summary launchファイルの文法

<wiki:toc max_depth="2" />

= 概要 =
launchファイルの文法は、英語のページではあるものの、[http://code.google.com/p/rtm-ros-robotics/wiki/ROS_Example_ROS_TUTORIALS roslaunch文法]から見にいけてわかりやすいと思いますが、念のため日本語でも文法について書いてみたいと思います。.launchファイルは、rosで出てくるかなり大事なものだと思うので。

= launchファイルの役割 =
さまざまなプログラムを組み合わせて複数のnodeを立ち上げたい場合に、一つのlaunchファイルに書いて
{{{
roslaunch パッケージ名　launchファイル名
}}}
とすると、動かしたいものや立ち上げなくてはならないものをすべて一回のコマンドで立ち上げることができます。また、それぞれのプログラムに対してあらかじめパラメータをrosでは決めることができるのですが、それもこのlaunchファイルに書いておくことで、一々調整をする必要がなくなります。そのほかにも利点はいろいろあります。


= launchファイルの頻出タグ概要一覧=
||<launch>||launchファイルであることを示すタグ・一番外側を覆っている||
||<node>||nodeを立ち上げるためのタグ||
||<include>||ほかのlaunchファイルも呼び出し実行するためのタグ||
||<remap>||topicの名前をつけなおすためのタグ||
||<param>||nodeのパラメータに値を設定するためのタグ||
||<rosparam>||パラメータをまとめてあるyamlファイルを操作するためのタグ（主にparamがひとつずつ設定するのに対し複数のパラメータを一度に読み出して設定する。）||
||<arg>||launchファイル間で値をやりとりしたりするlaunch内で変数のようなものを作るためのタグ||
||<group>||複数のnodeをひとまとめにして扱うタグ。その中ではlaunchタグ内と同じ文法がかける||

= launchファイル解説=
ここでは、template_grasp.launchを参考に、簡単に解説を行っていきたいと思います。
かなり、長いですが、使うのは一部分です。
{{{
<launch>
  <arg name="kinect_camera_name" default="openni" />
  <arg name="launch_object_manipulation" default="false" />
  <include file="$(find pr2_machine)/$(env ROBOT).machine" />

  <rosparam command="load" file="$(find household_objects_database)/config/wgs36.yaml"/>
  <node pkg="household_objects_database" name="objects_database_node"
        type="objects_database_node" respawn="true" output="screen"/>

  <include file="$(find pr2_arm_navigation_config)/launch/pr2_planning_environment.launch" />

  <group if="$(arg launch_object_manipulation)" >
  <node pkg="robot_self_filter_color"
        type="self_filter_color"
        name="object_modeling_kinect_self_filter"
        respawn="true" output="screen">
    <remap from="cloud_in" to="/$(arg kinect_camera_name)/depth_registered/points" />
    <remap from="cloud_out" to="/$(arg kinect_camera_name)/rgb/object_modeling_points_filtered" />
    <param name="sensor_frame" type="string" value="openni_rgb_optical_frame" />
    <param name="subsample_value" type="double" value=".005"/>
    <rosparam command="load" file="$(find jsk_pr2_startup)/jsk_pr2_sensors/tilt_self_filter.yaml" />
  </node>

  <include file="$(find pr2_arm_navigation_planning)/launch/ompl_planning.launch"/>

  <include file="$(find pr2_arm_navigation_actions)/launch/move_right_arm_warehouse.launch">
    <arg name="log_to_warehouse" value="false" />
  </include>
  <include file="$(find pr2_arm_navigation_actions)/launch/move_left_arm_warehouse.launch">
    <arg name="log_to_warehouse" value="false" />
  </include>
  <node pkg="move_arm_head_monitor" type="move_arm_head_monitor" name="head_monitor"
        output="screen" machine="c2">
     <remap from="cloud_in" to="/$(arg kinect_camera_name)/depth_registered/points" />
     <param name="do_preplan_scan" value="false"/>
     <param name="do_monitoring" value="false"/>
  </node>

  <node pkg="planning_environment" type="environment_server" name="environment_server"
        output="screen" machine="c2">
    <param name="use_monitor" type="bool" value="true"/>
    <param name="use_collision_map" type="bool" value="true"/>
  </node>

  <node pkg="planning_environment"
        type="planning_scene_validity_server"
        name="planning_scene_validity_server"
        output="screen" machine="c2"/>

  <include file="$(find pr2_arm_navigation_filtering)/launch/both_arms_filters.launch"/>
  <param name="trajectory_filter/object_padd" value="0.04"/>

  <node name="projector_off" pkg="dynamic_reconfigure" type="dynparam" args="set camera_synchronizer_node projector_mode 1"/>

  <node name="interpolated_ik_node_right" pkg="interpolated_ik_motion_planner"
        type="interpolated_ik_motion_planner.py" args="r" respawn="false" machine="c2"/>
  <node name="interpolated_ik_node_left" pkg="interpolated_ik_motion_planner"
        type="interpolated_ik_motion_planner.py" args="l" respawn="false" machine="c2"/>

  <include file="$(find trajectory_filter_server)/launch/trajectory_unnormalize.launch"/>

  <include file="$(find pr2_object_manipulation_launch)/launch/pr2_manipulation.launch"/>

  </group>

  <node unless="$(arg launch_object_manipulation)"
        name="cluster_bounding_box_finder"
        pkg="object_manipulator" cwd="node"
        type="cluster_bounding_box_finder_server.py"
        output="screen" respawn="false" >
    <param name="z_up_frame" value="/base_link" />
  </node>

  <node pkg="tabletop_collision_map_processing"
        type="tabletop_collision_map_processing_node"
        name="tabletop_collision_map_processing"
        respawn="true" output="screen"/>
  <param name="tabletop_collision_map_processing/get_model_mesh_srv"
         value="/objects_database_node/get_model_mesh" />
  <param name="tabletop_collision_map_processing/static_map_cloud_name"
         value="full_cloud_filtered"/>

  <include file="$(find tabletop_object_detector)/launch/tabletop_complete.launch">
    <arg name="tabletop_segmentation_points_input"
         value="/$(arg kinect_camera_name)/depth_registered/points"/>
  </include>

  <include file="$(find pr2_template_based_grasping)/launch/template_grasp_planning_server.launch"/>

</launch>

}}}