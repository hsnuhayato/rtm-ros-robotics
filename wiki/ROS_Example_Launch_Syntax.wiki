#summary launchファイルの文法

<wiki:toc max_depth="2" />

= 概要 =
launchファイルの文法は、英語のページではあるものの、[http://code.google.com/p/rtm-ros-robotics/wiki/ROS_Example_ROS_TUTORIALS roslaunch文法]から見にいけてわかりやすいと思いますが、念のため日本語でも文法について書いてみたいと思います。.launchファイルは、rosで出てくるかなり大事なものだと思うので。

= launchファイルの役割 =
さまざまなプログラムを組み合わせて複数のnodeを立ち上げたい場合に、一つのlaunchファイルに書いて
{{{
roslaunch パッケージ名　launchファイル名
}}}
とすると、動かしたいものや立ち上げなくてはならないものをすべて一回のコマンドで立ち上げることができます。また、それぞれのプログラムに対してあらかじめパラメータをrosでは決めることができるのですが、それもこのlaunchファイルに書いておくことで、一々調整をする必要がなくなります。そのほかにも利点はいろいろあります。


= launchファイルの頻出タグ概要一覧=
||<launch>||launchファイルであることを示すタグ・一番外側を覆っている||
||<node>||nodeを立ち上げるためのタグ||
||<include>||ほかのlaunchファイルも呼び出し実行するためのタグ||
||<remap>||topicの名前をつけなおすためのタグ||
||<param>||nodeのパラメータに値を設定するためのタグ||
||<rosparam>||パラメータをまとめてあるyamlファイルを操作するためのタグ（主にparamがひとつずつ設定するのに対し複数のパラメータを一度に読み出して設定する。）||
||<arg>||launchファイル間で値をやりとりしたりするlaunch内で変数のようなものを作るためのタグ||
||<group>||複数のnodeをひとまとめにして扱うタグ。その中ではlaunchタグ内と同じ文法がかける||

= launchファイル解説=
基本的にサンプルとともに、タグを紹介してます。どのタグでもなんのサンプルかは明記してあると思うので、実際に見たいときは、たとえば「AパッケージのBファイル」であれば以下のように打ちます。
{{{
roscd Aパッケージ名
}}}
とすると、そのパッケージの中に移れます。そしたら、
{{{
cd ./launch
}}}
でlaunchフォルダに移ってください。
基本的に、launchファイルはそのパッケージのlaunchフォルダにあると思うので
{{{
roscd Aパッケージ名/launch
}}}
とすると、一発でできます。どちらにせよ、その後に、Bファイルを見つけられると思います。
もしディレクトリを移動せずにファイルを見たい場合は以下でもできます。
{{{
rosed Aパッケージ名　Bファイル名
}}}
デフォルトではviです。

==コメントアウト==
一度でも、この形式のものを書いたことがあれば、大丈夫だと思いますが、ファイルの中で以下の形式で囲ってある部分はコメント文です。
{{{
<!--  この中は表示されません   -->
}}}
上のようにしてある部分はコメントアウトされて、実行の際は無視されます。
==launchタグ==
本家のページは[http://www.ros.org/wiki/roslaunch/XML/launch こちら]です。
launchファイルであることを示すためだけのタグです。かならず、ファイルの全体をくくってます。
{{{
<launch>
     <node name="image_view2" pkg="image_view2" type="image_view2" output="screen" >
       <remap from="image" to="image_rect_color" />
       <param name="autosize" value="true" />
       <param name="blurry" value="false" />
       <param name="window_name" value="image_view2" />
    </node>
</launch>
}}}
これは、roseus_tutorialsのimage_view.launchファイルの中身ですが、余計な部分は除くと主に上のようになっています。全体を＜launch＞と＜/launch＞がくくっています。
==nodeタグ==
本家のページは[http://www.ros.org/wiki/roslaunch/XML/node こちら]です。
nodeタグでは、ひとつのあるパッケージのrosrunを行っているのと同様なもので、このタグで指定したパッケージの指定したプログラムが起動します。以下はroseus_tutorialsのusb-camera.launchファイルです。
{{{
<launch>
  <node name="uvc_camera" pkg="uvc_camera" type="camera_node" output="screen" >
    <param name="device" value="/dev/video0" />
    <param name="camera_info_url" type="string" value="file://$(find roseus_tutorials)/launch/usb-camera.yaml"/>
    <param name="width" value="640" />
    <param name="height" value="480" />
    <param name="fps" value="30"/>
    <param name="frame_id" value="camera" />
  </node>
  <node name="image_proc" pkg="image_proc" type="image_proc" output="screen" />
</launch>
}}}
この中で後半の
{{{
  <node name="image_proc" pkg="image_proc" type="image_proc" output="screen" />
}}}
に注目してください。これは、outputの部分を除けば、nodeを立ち上げる最小のコードの書き方になります。(outputはオプションです。)まず、
{{{
name="image_proc"
}}}
ですが、これは、nodeの名前を決めるものです。rosでは全く同じプログラムを複数起動することができますが、起動する際のnodeの名前を変えなくてはなりません。万が一node名が同一のものが２つになろうとすると、
{{{
[ WARN] [1354478592.636962934]: Shutdown request received.
[ WARN] [1354478592.637284343]: Reason given for shutdown: [new node registered with same name]
}}}
のように表示され、片方が勝手に閉じてしまいます。launchファイル内でも簡単に名前がつけられるように、name=""でnode名が設定できるようになります。ここではこのnode名はimage_procになります。
-------
つぎにpkgです。
{{{
pkg="image_proc"
}}}
これは、わかると思いますが、パッケージ名を指定しています。ここでは、image_procというパッケージを指定しています。このパッケージ名ももちろんROS_PACKAGE_PATHにパスが通ってなくてはなりません。
{{{
roscd 指定したいパッケージ名
}}}
で問題なく動くのならパスは通ってます。
------
次にtypeです。
{{{
type="image_proc"
}}}
これは具体的に実行するファイル名を指定します。ここではimage_procが実行されます。今回これは、c++の実行ファイルとなってますが、pythonや、lispだったときの書き方は以下です。
{{{
//pythonのとき
<node name="node名" pkg="パッケージ名" type="ファイル名.py" />
//euslispのとき
<node name="node名" pkg="パッケージ名" type="ファイル名.l" />
}}}
それぞれ、実行するファイルの先頭に以下の記述が必要です。

pythonのとき
{{{
#!/usr/bin/env python
}}}
euslispのとき
{{{
#!/usr/bin/env roseus
}}}
------
次によく出てくるオプションの一つoutputです。
{{{
output="screen"
}}}
ログをはく場所を指定します。"screen"に設定すると標準出力が出力先になります。もう一つの"log"に指定すると、環境変数のROS_HOMEが指定されていなければ、.ros/log以下に出力され、設定されていればそのなかに出力される。
------
ほかのオプションも本家に乗っていますが、軽く一部のみ紹介だけしておきます。
||args||nodeに渡す引数||
||machine||指定したmachineでnodeを起動する||
||respawn||trueが指定されたらnodeが何らかの形で死んでしまっても必ず復帰させる。||
||ns||nodeがはじまるnamespaceを指定することができる。||

==includeタグ==
本家のページは[http://www.ros.org/wiki/roslaunch/XML/include こちら]です。
このincludeはlaunchの再利用性をあげるためのもので、これを利用すると、他のlaunchファイルのもroslaunchして実行してくれます。以下のコードは、roseus_tutorialsのcamshift.launchのファイルの中です。
{{{
<launch>
//kinectの情報をとってきてくれるnodeをいっぱい作るopenni.launch
 <include file="$(find openni_launch)/launch/openni.launch">
    <!--arg name="camera" value="openni"/-->
    <arg name="respawn" value="true"/>
    <arg name="publish_tf" value="true"/>
  </include>

//camshiftを得られたkinectのカメラが像から処理を行うcamshiftdemoのnode
  <node name="camshiftdemo" pkg="jsk_perception"
        type="camshiftdemo" output="screen">
    <remap from="image" to="/camera/rgb/image_rect_color" />
    <remap from="screenrectangle" to="image_rect_color/screenrectangle" />
  </node>
</launch>
}}}

コードの前半で、後半のnodeで使用するものを用意してもらうため、あらかじめ用意されているopenni.launchを外部からインクルードしてきて、実行します。includeタグを一番短くには
{{{
<include file="$(find openni_launch)/launch/openni.launch"/>
}}}
の形で構いません。今回のサンプルではそのファイルに大して設定を施しているため少々形が変わっています。また、
{{{
file="$(find openni_launch)/launch/openni.launch"
}}}
についてですが、fileの指定をしています。そのとき、$(find openni_launch)はopenni_launchパッケージのパスを返す関数となっています。ですので、$(find openni_launch)/launch/openni.launch全体で、openni.launchのファイルのパスを表しています。他にもlaunchファイルでも出てくるであろう$()は関数を実行していると思っていただいてかまいません。
==remapタグ==
本家のページは[http://www.ros.org/wiki/roslaunch/XML/remap こちら]です。
今度もlaunchファイルでも例に使ったroseus_tutorialsのimage_view.launchファイルの中身です。このプログラムは、指定された画像情報をウィンドウに表示するだけのプログラムです。
{{{
<launch>
     <node name="image_view2" pkg="image_view2" type="image_view2" output="screen" >
       <remap from="image" to="image_rect_color" />
       <param name="autosize" value="true" />
       <param name="blurry" value="false" />
       <param name="window_name" value="image_view2" />
    </node>
</launch>
}}}
となっていて、一番外側のlaunchタグは、このファイルがlaunchであることを示すタグの様な役割でした。その中のnodeタグでは、image_view2(pkg)パッケージのimage_view2(type)という実行ファイルを実行して、ログは標準出力(screen)に設定されたimage_view2(name)というnode名のnodeを作ります。今回この中のremapタグについて解説します。

remapタグはrosに備わっている機能のひとつであるリマップという機能をタグの形で表現したものです。リマップはソースコードの中で指定しているサブスクライブ（情報をとってくる）するtopic名をソースコードの中に書いてあるものを設定する値で上書きする機能のことです。

おそらくよくわからないと思うので、具体的に見ていきたいと思います。上のimage-view.launchの中の
{{{
       <remap from="image" to="image_rect_color" />
}}}
の部分をご覧ください。このimage-view.launchは先ほども書いたように、画像を表示するプログラムです。ここでは、入力元となる画像の情報をどこかしらのtopicからとってこなくてはなりません。その時に、デフォルトでは、topic名がimageになっているところから取得しようとするようになっています。上の中のfrom="image"というのは、もともとソースコードに書いてあるデフォルトのtopic名です。また、to="image_rect_color"というのが、実行するときだけ新たに上書きしたいtopic名になります。色々な環境で実行する時は、例えばusb-cameraなら、camera/image_rect_colorですし、家でkinectを使うときは、camera/rgb/image_rect_color、実機ならopenni/rgb/image_rect_colorという様にtopicの名前はコロコロ変わってしまいます。その時に、launchファイルにremapタグを書くことによって、一々c++ソースファイルのコンパイルをしなおして実行するという過程を簡単に省略でき、変えたいときは、remapのto以下のみを差し替えれば簡単に変えることができます。

image-view2.cppのmainが以下のようになっています。
{{{
・・・
int main(int argc, char **argv)
{
  //ros::init(argc, argv, "image_view2", ros::init_options::AnonymousName);
  ros::init(argc, argv, "image_view2");
  ros::NodeHandle n;

  if ( n.resolveName("image") == "/image") {
    ROS_WARN("image_view: image has not been remapped! Typical command-line usage:\n"
             "\t$ ./image_view image:=<image topic> [transport]");
  }
・・・
}}}
コードの中のn.resolveName("image")が、topic

==paramタグ==
本家のページは[http://www.ros.org/wiki/roslaunch/XML/param こちら]です。
==rosparamタグ==
本家のページは[http://www.ros.org/wiki/roslaunch/XML/rosparam こちら]です。
==argタグ==
本家のページは[http://www.ros.org/wiki/roslaunch/XML/arg こちら]です。
==groupタグ==
本家のページは[http://www.ros.org/wiki/roslaunch/XML/group こちら]です。