#summary マルチキャプチャ環境を想定したカメラIFでの通信サンプル

== 概要 ==

画像処理プログラム間の通信に用いる新たな共通IFとしてマルチキャプチャ環境を想定したカメラIFが国のプロジェクトの中で検討されている．そのIFの構成と，それを用いたRTコンポーネントプログラムの例について紹介する．

== 準備 ==

agentsystem_rtm_tutorials/Imgidl_sample

がなければ，

agentsystem_rtm_tutorials以下でsvn upする．
Imgidl_sample以下には3つのフォルダがあり，それぞれが独立なサンプルに
なっている．下記で利用するImg.idlも各々のフォルダに入っている．

== Img.idl の概要 ==

現在，次世代知能化プロジェクトの中での画像処理コンポーネント用のデータ通信型として，マルチカメラシステムを初めから視野にいれたデータ構造が検討されている．下図のように，カメラキャプチャモジュールはカメラ設定やキャリブレーションデータを外部ファイルなどとして読込み，サービスポートからの指示で画像データをデータポートを通じて転送する．転送する画像データには，カメラ設定やキャリブレーションデータも一緒に付加する．キャプチャの指示は，実際に画像処理を行うコンポーネントから行うことを想定している．

[http://rtm-ros-robotics.googlecode.com/svn/wiki/Imgidl_image.png]

== データ通信型 ==

データの通信型として，単眼カメラ用のTimedCameraImageと複数カメラ用のTimedMultiCameraImageの2種類がImg.idlに定義されている．Img.idlから関係する場所を
抜き出して解説する．

まず，単眼カメラ用のTimedCameraImageについては，

{{{
struct TimedCameraImage
{
  RTC::Time tm;
  CameraImage data;
  long error_code;
};
}}}

と定義されており，上からタイムスタンプ，キャリブレーションデータを含む画像データ構造体，エラーコードを意味する．

ここで，重要なのは，CameraImageで，これの定義は，
{{{
struct CameraImage
{
  RTC::Time captured_time;
  ImageData image;
  CameraIntrinsicParameter intrinsic;
  Mat44 extrinsic;
};
}}}

となっている．上から順にキャプチャ時のタイムスタンプ，画像生データ，カメラ内部パラメータ構造体，カメラ外部パラメータを意味している．

画像生データを表すImageData型は以下のような定義になっている．

{{{
enum ColorFormat
{
  CF_UNKNOWN, CF_GRAY, CF_RGB
};

struct ImageData
{
  long width;
  long height;

  ColorFormat format;
  sequence<octet> raw_data;
};
}}}

まずは，long型で画像の幅と高さが，そして，色フォーマットが定義されている．色フォーマットは，enum型でその上に示してあるものから選択する．現状では，グレーかRGBかを選ぶことになる．


{{{
typedef double Mat44[4][4];

struct CameraIntrinsicParameter
{
  double matrix_element[5];
  sequence<double> distortion_coefficient;
};

}}}

== サービスポートのインタフェース ==

== サンプル ==

[http://rtm-ros-robotics.googlecode.com/svn/wiki/Imgidl_sample_image.png]