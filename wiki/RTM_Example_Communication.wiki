#summary RTMでの拡張型・独自型による通信サンプル

== 概要 ==

通信サンプルに拡張型や独自型を用いたRTコンポーネントプログラムの書き方について紹介する．


== 準備 ==

サンプルのチェックアウト

{{{
 $ svn checkout http://rtm-ros-robotics.googlecode.com/svn/trunk/agentssytem_rtm_tutorials
}}}

== 拡張型での通信 ==

OpenRTM-aistでは，データポート間のデータの型として，TimedShort, TimedLong, TimedFloat, TimedDoubleなどの単一の値を表す型とTimedShortSeq, TimedLongSeq, TimedFloatSeq, TimedDoubleSeqなど，それらのシーケンス型が基本型として定義されている．

これらは，/usr/include/rtm/idl/BasicDataType.idl（或いは，/usr/local/include/rtm/idl/BasicDataType.idl）に定義されており，コンポーネントの中で自由に利用出来る．

この基本型に加えて，拡張型と呼ばれるものが存在する．それらは，
/usr/include/rtm/idl/ExtendedDataTypes.idlおよび/usr/include/rtm/idl/InterfaceDataTypes.idlとして定義されており，自由に使うことができる．

=== C++での利用法 ===

ヘッダファイルに
{{{
#include <rtm/idl/InterfaceDataTypesSkel.h>
}}}

を記述すれば，後は他の基本型と同様に利用出来る．
拡張型には，例えば，下記のようなものが定義されており，

{{{
    struct Velocity2D
    {
        /// Velocity along the x axis in metres per second.                                                                                                                      
        double vx;
        /// Velocity along the y axis in metres per second.                                                                                                                      
        double vy;
        /// Yaw velocity in radians per second.                                                                                                                                  
        double va;
    };

   struct TimedVelocity2D
    {
        Time tm;
        Velocity2D data;
    };
}}}

これを用いたインポート/アウトポートの定義は，
{{{
  TimedVelocity2D m_out;
  OutPort<TimedVelocity2D> m_outOut;
}}}

のように他の型と同様に行うことができる．

=== Pythonでの利用法 ===

Pythonの場合，更に簡便であり，基本型と同様に'import RTC'さえしてあれば，利用できる．

=== サンプル ===

agentsystem_rtm_tutorials/ExtendedIdl_sample/以下のTestVelocity2DSendがcppのサンプル，TestVelocity2DRecvPyがPython側のサンプルになっている．ターミナルで，それぞれ起動する．

すなわち，片側で，
{{{
$ cd TestVelocity2DSend
$ make
$ ./TestVelocity2DSendComp
}}}
とし，もう片側で，
{{{
$ python ./TestVelocity2DRecv.py
}}}
とする．

あとは，RTSystemEditorで接続し，アクティベートすると，Recv側で値が表示されることが確認できる．

== 独自型での通信 ==

一方，ユーザが自由に定義した型で通信を行うことも可能である．