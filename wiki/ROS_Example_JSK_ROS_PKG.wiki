#summary JSK_ROS_PKGについて

<wiki:toc max_depth="2" />


= 概要 =

いろいろとわかりにくいjsk-ros-pkgの中身について書いていこうと思います。


= 構造 =
jsk-ros-pkgは、パッケージという名前がpkgとしてついていますが、このディレクトリの中にさまざまなパッケージが入っており、実際にパッケージを指して使うときは、jsk-ros-pkgではなく、中身のroseus_tutorialsや、pr2eus_tutorialsを用います。

jsk-ros-pkgは最近のrosの方針としてはpackagesの上位のディレクトリとしてのstacksの立場にあたるはずですが、jsk-ros-pkgがrosの初期のころからあるため、stacksとして必要なことを施されていません。ですので、tutorialsを読んで[http://www.ros.org/wiki/ROS/Tutorials/NavigatingTheFilesystem ROSのファイルシステム]に書いてある構造と違うと思うかもしれませんが、これはもともとです。

= 内容=
2012年11月時点でのjsk-ros-pkgの中身は以下の様になっております。
{{{
3rdparty                euscollada             jsk_common               jsk_perception       jsk_semantic_maps  openrave_planning     pr2eus_openrave   roseus_tutorials
cr_calibration          euslisp                jsk_coordination_system  jsk_pr2_accessories  jsk_smart_apps     opt_camera            pr2eus_tutorials  stereo_synchronizer
cr_capture              jsk.rosbuild           jsk_maps                 jsk_pr2_desktop      jsk_visioncommon   pddl                             task_compiler
demos                   jsk.rosinstall         jsk_openni_kinect        jsk_pr2_startup      pr2eus                roseus
elevator_move_base_pr2  jsk_android_apps_api9  jsk_pcl_ros              jsk_ros_patch        openni_tracker     pr2eus_armnavigation  roseus_smach
}}}

以上が、中身になりますが、多くてどのパッケージを見ればいいかわからないと思います。

一部ですが、それぞれのパッケージの中になにがあるかを簡単によく使うであろう順番に紹介したいと思います。簡単に概要を書きますが、一概にもそのパッケージの中身を表せているとは限りません。

---------
---------
==roseus_tutorials==
画像認識や、kinectやkinectの情報から３次元状に戻すpclを用いたサンプルが多い。ほぼすべてeuslispで書かれている。

簡単なサンプルは以下。
 * kinect.launch
 * usb-camera.launch
 * kinect-model-viewer.l
===代表的なソース===
====launchファイル====
 * kinect.launch
  * kienctを使い深度マップをimage_viewに表示するサンプル。
 * kinect_color_filter.launch
  * kinectとpclを用いて、3D形状にマッピングした画像のうち指定の色の部分のみ表示するサンプル。
 * camshiftdemo.launch
  * kinectとopenCVを用いてマウスでしたいした短形をヒストグラムを利用して追い続けるサンプル。
 * tabletop-object-detector.launch
  * kinectとpclを用いてテーブルの上のものを認識してその座標を取ることができるサンプル。
 * usb-camera.launch
  * usbカメラを用いて取ってきた画像をimage_viewに表示するサンプル。（リマップすればkinectも可）
====.lファイル====
 * kinect-model-viewer.l
  * kinectを用い、openni-trackerで得られた対象の体位の情報から棒人間を3Dで表示するサンプル。
 * openni-swipe.l
  * kinectを用い、手の動きを検出するサンプル。
---------
---------
==pr2eus==

pr2の簡単な動作のシュミレーションするサンプルが入っている。
見るべきファイルは、以下のみ

 * pr2-send-joints.l
です。
pr2-send-joints.launchは.launchになっているだけなので結局pr2-send-joints.lを見ていただければいいです。
===代表的なソース===
====.lファイル====
 * pr2-send-joints.l
  * pr2のシュミレーションを行うもので、ここに書かれているコードで実機のロボットも同様に動かすことができる。
---------
---------
==jsk_openni_kinect==
===代表的なソース===
====launchファイル====
---------
---------
==jsk_perception==
===代表的なソース===
====launchファイル====
---------
---------
==roseus==
===代表的なソース===
====launchファイル====
---------
---------
==pr2eus_tutorials==
===代表的なソース===
====launchファイル====
---------
---------
==jsk_pcl_ros==
pclを利用したサンプルが入っています。
===代表的なソース===
====launchファイル====
---------
---------
==jsk_smart_apps==
この中にはAndroidアプリに使用するサンプルが入っています。
===代表的なソース===
====launchファイル====