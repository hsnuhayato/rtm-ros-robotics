#summary One-sentence summary of this page.
#labels Phase-Support

This page is English translation of [https://code.google.com/p/rtm-ros-robotics/wiki/hironx_ros_bridge this page in Japanese]. In case this page (the one you're on) looks outdated, please consult the original page or ask in the mailing list; these 2 pages are NOT guaranteed to be synchronized.

<wiki:toc />

= Motivation =
hironx_ros_robotics is now [http://www.ros.org/wiki/catkin/migrating_from_rosbuild#Overview catkinized] but still compatible with ROS' old building style called rosbuild (or its command line interface `rosmake`). Let's call it `hybrid` package. This page discusses installation of hybrid version both using rosbuild and catkin. 

Because installation from source may not go as smooth as it should be, please use binary version that's built by catkin if you're on Ubuntu unless you use ROS fuerte (where catkin may not be fully functional) or have reasons to build from source.

Pitfalls are put together as a section at the bottom of this page. If you see any issue, please consider take a look at it.

= Install =
First, download ROS by following its wiki. http://ros.org/wiki/groovy/Installation/Ubuntu

== Install via debian binary ==
{{{
$ apt-get install ros-groovy-openrtm_aist_core
$ apt-get install ros-groovy-hrpsys
$ apt-get install ros-groovy-rtshell_core
$ apt-get install ros-groovy-rtmros_common
$ apt-get install ros-groovy-rtmros_hironx
}}}

/!\ As of 9/5/13, binary of `rtmros_common` and `rtmros_hironx` are not yet installable via deb binary.

== Insall from source ==
Obtain source.

{{{
$ mkdir -p catkin_ws/src; cd catkin_ws/src
$ wstool init
$ wstool merge http://rtm-ros-robotics.googlecode.com/svn/trunk/agentsystem_ros_tutorials/rtm-ros-robotics.rosinstall  
$ wstool update
}}}

You may notice that we are naming a source folder as `catkin`. Besides that this is just a naming build tool does not care, `catkin` as a convention prefers its work folder as to be called something like "catkin", "workspace". If you're building with `rosbuild` in the following subsection, this folder name is still valid (but if you feel confusing feel free to change it).

# [http://www.ros.org/wiki/wstool wstools] takes over rosws for catkin workspace. Since we're not building in catkin workspace in this rosbuild section, you can keep using `rosws` if you feel like. The result shouldn't be different.

=== Source build by rosbuild ===
If you're on ROS `Groovy` or later where its new build system `catkin` is ready and stable, [https://code.google.com/p/rtm-ros-robotics/w/edit.do#Install_by_Catkin install by catkin] is recommended. However, `rosbuild` still sticks around without any problem.

At this point you should already have downloaded necessary codes. 
Also if you haven't added the source folder into an environment variable `$ROS_PACKAGE_PATH` then please do:
{{{
(Suppose you're still at src folder)
$ export ROS_PACKAGE_PATH=$ABSOLUTEPATH_OF_SRC_FOLDER$:$ROS_PACKAGE_PATH
$ rospack profile
}}}

Now you're ready to build by:
{{{
$ rosmake hironx_ros_bridge
}}}

Here, if you see rosmake stops with error at a particular package, 
{{{
$ cd %PKG_THAT_CAUSED_ERR%
$ make
}}}

If this passed then do the same `rosmake` again. 
Packages that are reported to cause error: hrpsys_ros_bridge, hironx_moveit_config

hironx_moveit_config requires collada_to_urdf, which can be obtained by:
{{{
$ rosmake collada_tools
}}}

To vefify that it runs, go on to next section to run simulator.

=== Source build by Catkin ===
In `src` folder,
{{{
$ catkin_init_workspace
}}}

The above commands downloads necessary codes and now you're ready to build:
{{{
$ cd ..     (moving back to catkin_ws)
$ catkin_make
$ source devel/setup.bash   (or any shell script you would prefer under `/devel`)
}}}

NOTE-1; building by `catkin` might fail sometimes and workaround often works is just re-run `catkin`.

NOTE-2; If you updated source (by either downloading from devel repository or modifying by yourself), you should clean your source directories in your workspace by:

{{{
(Suppose you're still at src folder)
$ catkin_make clean
$ rm -fR build devel  (as normal catkin workspace)
}}}

Cleaning your source folder is unusual usage in `catkin` workspace in general, but it's necessary for `rtm-ros-robotics` that enables "hybrid" build of both `rosbuild` and `catkin` and thus uses source folders for build work.


= Usage =
== Common for simulation and for real robot ==
Create an alias to run a script more easily:
{{{
$ alias rtmlaunch='`rospack find hrpsys_ros_bridge`/scripts/rtmlaunch'
}}}

Then, launch a simulator.
{{{
$ rtmlaunch hironx_ros_bridge hironx_ros_bridge_simulation.launch 
}}}

    This launch file does mainly two things; load a virtual robot on the simulator by:
    {{{
    $ rtmlaunch hrionx_ros_bridge hironx_startup.launch
    }}}
    
    And start processes that work as a bridge between ROS and hrpsys.
    {{{
    $ roslaunch hrionx_ros_bridge hironx_ros_bridge.launch
    }}}

If you see some messages like these on command prompt, you're good.
{{{
[ INFO] [1375160303.399785831, 483.554999999]: [HrpsysSeqStateROSBridge0] @onExecutece 0 is working at 201[Hz]
[ INFO] [1375160304.408500642, 484.544999999]: [HrpsysSeqStateROSBridge0] @onExecutece 0 is working at 198[Hz]
}}}

Then setup magic spell for `OpenRTM`, and a setting for `CORBA`.
{{{
$ rosrun openrtm_tools rtshell-setup.sh
$ export ORBInitRef="NameService=corbaloc:iiop:localhost:15005/NameService"
}}}

== Working in a simulator environment ==
You can check robot model on RViz visualizer:
{{{
$ rosrun rviz rviz -d `rospack find hironx_ros_bridge`/models/kawada-hironx.rviz
}}}

== Working with a real robot ==
Since hrpsys should be already running if the real robot is on, you only have to launch hrpsys_ros_bridge on your computer. Replace `%HOSTNAME%` with an appropriate value in your environment; eg. `hiro001`;
{{{
$ roslaunch hironx_ros_bridge hironx_ros_bridge.launch nameserver:=%HOSTNAME%
}}}

Then do something like this (adjust to your environment especially the location of wrl file, port number, robot's hostname):
{{{
$ rosrun hironx_ros_bridge hironx.py RobotHardware0  /opt/jsk/etc/HIRONX/model/main_15dof.wrl -- -ORBInitRef NameService=corbaloc:iiop:hiro014:15005/NameService
}}}

== Programming example ==
{{{
$ roscd hironx_ros_bridge/scripts
$ ./hironx.py
>> hiro.servoOn()
>> hiro.goInitial()
>> hiro.setJointAngles("larm", [0.6,0,-100,-15.2,9.4,-3.2])
}}}

== Using moveIt ==
{{{
$ roslaunch hironx_moveit_config moveit_planning_execution.launch
}}}

= Troubleshoot =
== With wstool ==
=== ERROR in config: Error processing ===
Upon `wstool update` the error might happen. Try removing the folder you're getting error with.

At the moment, a lot of tweaks are needed [http://code.google.com/p/rtm-ros-robotics/issues/detail?id=175 as reported in this thread].

== hrpsys_ros_bridge fails to build ==
-------------------------------------------------------------------------------}
[ rosmake ] Output from build of package hrpsys_ros_bridge written to:
[ rosmake ]    /home/leus/.ros/rosmake/rosmake_output-20130823-115337/hrpsys_ros_bridge/build_output.log
[rosmake-0] Finished <<< hrpsys_ros_bridge [FAIL] [ 143.86 seconds ]                                                           
[ rosmake ] Halting due to failure in package hrpsys_ros_bridge. 
[ rosmake ] Waiting for other threads to complete.           
[ rosmake ] Results:                                                                                                           
[ rosmake ] Built 75 packages with 1 failure

(roscd hrpsys_ros_bridge; make)

== AttributeError: 'module' object has no attribute 'get_sysinfo' ==

{{{
$ simulation.launch 
:
Traceback (most recent call last):
  File "/home/leus/ros/groovy/rtm-ros-robotics/rtmros_common/hrpsys_ros_bridge/scripts/rtmlaunch", line 3, in <module>
    import os,psutil,subprocess,socket,sys
  File "/opt/ros/groovy/lib/python2.7/dist-packages/psutil/__init__.py", line 65, in <module>
    import psutil._pslinux as _psplatform
  File "/opt/ros/groovy/lib/python2.7/dist-packages/psutil/_pslinux.py", line 90, in <module>
    TOTAL_PHYMEM = _psutil_linux.get_sysinfo()[0]
AttributeError: 'module' object has no attribute 'get_sysinfo'
}}}

If you see this error,
{{{
$ sudo apt-get remove ros-groovy-rqt-top
}}}

== No moveit! found? ==
{{{
$ roslaunch hironx_moveit_config moveit_planning_execution.launch
}}}

If you see error with this, then:

{{{
$ sudo apt-get install ros-groovy-moveit-full-pr2
}}}

== [rospack] Error: stack/package collada_tools not found ==
{{{
[rospack] Error: stack/package collada_tools not found
make[2]: *** [/home/leus/catkin_ws/src/rtmros_hironx/hironx_moveit_config/models/HiroNX.urdf] Error 2
make[1]: *** [rtmros_hironx/hironx_moveit_config/CMakeFiles/hironx_moveit_config_HiroNX_urdf.dir/all] Error 2
}}}
Then do:
{{{
$ mv src/rtmros_hironx .
}}}

== [rospack] Error: package/stack 'collada_tools' depends on non-existent package ==
{{{
[rospack] Error: package/stack 'collada_tools' depends on non-existent package 'colladadom' and rosdep claims that it is not a system dependency. Check the ROS_PACKAGE_PATH or try calling 'rosdep update'
}}}
Then comment out in `collada_tools/manifest.xml`:
{{{
<!-- <depend package="colladadom"/> -->
}}}

== rtm/idl/SDOPackageSkel.h:35:33: Fatal: rtm/idl/SDOPackage.hh: ==
{{{
$ rosmake hironx_ros_bridge
../../../../src/lib/rtm/idl/SDOPackageSkel.h:35:33: Fatal: rtm/idl/SDOPackage.hh: not found
}}}
Then,
{{{
$ rosdep install hironx_ros_bridge
}}}

Then before rosmake-ing,
{{{
$ roscd openrtm_aist
$ make clean
}}}

== Halt at [hrpsys.py]  waiting ModelLoader ==
When you run and see:
{{{
$ roscd hironx_ros_bridge/scripts
$ ./hironx.py
[hrpsys.py]  waiting ModelLoader
}}}

Then write in your shell script (eg. ~/.bashrc):
{{{
export RTCTREE_NAMESERVERS=localhost:5005
export ORBInitRef="NameService=corbaloc:iiop:localhost:15005/NameService"
}}}

== run_id on parameter server does not match declared run_id: ==
If you see a message like this while trying to run with MoveIt!, check if your computer is able to communicate with your real robot.
{{{
run_id on parameter server does not match declared run_id: e6ff428e-0ec8-11e3-a8cf-88532e0fe6e6 vs e8491bd8-0ec8-11e3-9deb-88532e0fe6e6
}}}