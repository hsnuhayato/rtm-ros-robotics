#summary pclのtrunkに含まれるtrackingのサンプルを実行する。
<wiki:toc max_depth="2" />

= はじめに =

2013年3月19日現在、まだ、安定版になっていないので、trackingはtrunkに含まれています。そのため、基本的にソースコードのコンパイルから行うことになります。
また今後、trunkにのみ入っているサンプルを実行したいというときのために、一連の導入の流れを念の為書いておきますが、一部、環境による部分も含まれていますので、ご注意ください。

また、最新の情報は、[http://pointclouds.org/downloads/ pclのダウンロードサイト]で確認するようにしてください。

-------------
[http://rtm-ros-robotics.googlecode.com/svn/wiki/pcl_downloadPage.png]
-------------
-------------

= 準備 =

[http://pointclouds.org/downloads/source.html pclのcompiling from source]のページに書いてあるように必要なtrunkをcloneします。
（３月１４日ころからsvnからgitになったようです。）

--------------------------
--------------------------
[http://rtm-ros-robotics.googlecode.com/svn/wiki/pcl_compilepage_1.png]
--------------------------
--------------------------

pcl-trunkのフォルダを置きたいフォルダに移動して、以下を打ちます。
{{{
git clone https://github.com/PointCloudLibrary/pcl pcl-trunk
}}}

cloneが完了したら、
{{{
cd pcl-trunk && mkdir build && cd build
}}}
を行うことで、pcl-trunkの中に移動して、buildフォルダを作り、buildに移動します。
その後、
{{{
cmake -DCMAKE_BUILD_TYPE=Release .. 
}}}
を行い、
{{{
-- The C compiler identification is GNU
-- The CXX compiler identification is GNU
・・・
-- Found SSE4.2 extensions, using flags:  -march=native -msse4.2 -mfpmath=sse
-- Try OpenMP C flag = [-fopenmp]
・・
-- Found OpenMP: -fopenmp 
-- Found OpenMP
-- Boost version: 1.46.1
-- Found the following Boost libraries:
--   system
--   filesystem
--   thread
--   date_time
--   iostreams
-- checking for module 'eigen3'
--   found eigen3, version 3.0.5
-- Found Eigen: /usr/include/eigen3 
-- Eigen found (include: /usr/include/eigen3)
-- checking for module 'flann>=1.7.0'
--   found flann, version 1.7.1
-- Found FLANN: /opt/ros/fuerte/lib/libflann_cpp.so (Required is at least version "1.7.0")
-- FLANN found (include: /opt/ros/fuerte/include, lib: optimized;/opt/ros/fuerte/lib/libflann_cpp.so;debug;/opt/ros/fuerte/lib/libflann_cpp-gd.so)
-- Found LIBUSB_1: /usr/lib/x86_64-linux-gnu/libusb-1.0.so 
}}}
などの表記が見られると思うので、少なくとも、[http://pointclouds.org/downloads/source.html pclのcompiling from sourceのページ下部にあるMandatory]に表記されているソフトウェアのバージョン以上を守っているかインストールされているかを確認してください。(2013/3/19時点で、boost:1.46以上、Eigen:3.0以上、FLANN:1.7.1以上、vtk:5.6以上)。バージョンが大きすぎてもダメな場合もありました。

これらがしっかりとできれていれば、少なくともtrackingに関して言えば、
{{{
-- The following subsystems will be built:
--   common
--   octree
--   io
--   kdtree
--   search
--   sample_consensus
--   filters
--   2d
--   features
--   geometry
--   visualization
--   ml
--   segmentation
--   people
--   surface
--   registration
--   keypoints
--   tracking
--   recognition
--   stereo
--   apps
--   outofcore
--   global_tests
--   examples
--   tools

}}}
のように含まれているはずです。（上図は人それぞれ変わるかもしれません。）

この時点で、*pcl-trunk*/appsの中のsrcにソースコードのopenni_tracking.cppが入っているはずです。
念の為、buildディレクトリにいるなら、
{{{
cd ../apps/src
}}}
でapps/srcに移動し、openni_tracking.cppがあるか確認しましょう。（trackingのサンプルを実行したい場合）しっかりあれば、問題ありません。



確認ができましたら、buildディレクトリの中で、(忘れずに cd ../../build でbuildディレクトリにお戻りください)
{{{
ccmake ..
}}}
を実行します。以下のようなウィンドウが開くと思うので、
[http://rtm-ros-robotics.googlecode.com/svn/wiki/ccmake.png]
BUILD_appsをONにします。BUILD_appsにまでフォーカスが合うようにカーソルを移動して、Enterを押しOFFからONに変更し、終わったら、gを押すと、実行して、終了してくれます。

いよいよ
{{{
make
}}}
を実行して、エラーが出ないかを確認します。ここで、"instantiated from"やwarningはひとまずおいておいて問題ありません。

*ただ、trunkは開発過程にあるものなので、makeが通らないことが多々あります。その時は、いくらかのリビジョンを戻して再度cmakeからやりなおしましょう。*
2013/03/18日の時点で、少なくとも、_*svn*_の最新のリビジョンではmakeが通らなかったため、３月3日ごろの8754では動くことができました。


うまくmakeが通ったなら、おそらくサンプルはbuild/bin以下に入っているので、
{{{
ls bin/pcl_openni_tracking
}}}
で該当するものがあるかを確認しましょう。

= 実行 =
それでは、実行に入ります。kinectをつないでください。電源が別途必要な場合は忘れないで指してください。
まず、pcl-trunk/build/binに移動します。
{{{
 cd bin
}}}
その後、
{{{
./pcl_openni_viewer -l
}}}
を行うと
{{{
Device: 1, vendor: PrimeSense, product: PrimeSense Device, connected:  @ , serial number: ''
Virtual Devices available: ONI player
}}}
などのようなものが表示されます。このコマンドは、pclに接続されているデバイスのID付きのリストを表示するものです。pclでは<device id>を指定するときは、この上記のDeviceにある値を用います。もう少し詳しい使い方は
{{{
./pcl_openni_viewer --help
}}}
と実行すると見れると思います。
今回は、PrimeSenseのものしか指していませんが、確認をするため、映像を取得できるか試してみます。（今回はdevice id が1です。）
{{{
./pcl_openni_viewer "#1"
}}}
と実行され、正しく以下のように表示されることを確認してください。
[http://rtm-ros-robotics.googlecode.com/svn/wiki/pcl_openni_viewer.png]
うまく表示されたのであれば、pcl_openni_trackingを実行してみます。
床に、trackingしたい対象を設置して、ほどよく離れてKinectを準備します。準備ができたら、
{{{
./pcl_openni_tracking "#1"
}}}
を実行して、しばらく待ちます。
うまく行けば、パーティクルが、働いているのが見えると思います。図の赤と青の部分です。
[http://rtm-ros-robotics.googlecode.com/svn/wiki/pcl_openni_sample.png]

= pcl_openni_trackingの使い方 =
とりあえず、どんなキー操作ができるかはhを押すことで、コマンドライン上に以下のように表示されます。
また、コマンドラインの引数は
{{{
./pcl_openni_tracking
}}}
とのみ打ってみてください。おそらく以下のような表示が見れると思います。
{{{
 ./pcl_openni_tracking  
usage: ./pcl_openni_tracking <device_id> [-C] [-g]

  -C:  initialize the pointcloud to track without plane segmentation
  -D: visualizing with non-downsampled pointclouds.
  -P: not visualizing particle cloud.
  -fixed: use the fixed number of the particles.
  -d <value>: specify the grid size of downsampling (defaults to 0.01).
}}}