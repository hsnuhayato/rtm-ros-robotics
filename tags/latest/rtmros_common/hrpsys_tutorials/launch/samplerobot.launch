<launch>
  <arg name="KILL_SERVERS" default="false" />
  <arg name="GUI" default="true" />
  <include file="$(find hrpsys)/launch/hrpsys.launch" >
    <arg name="MODEL_FILE" value="$(find openhrp3)/share/OpenHRP-3.1/sample/model/sample1.wrl" />
    <arg name="CONF_FILE" value="$(find  hrpsys_tutorials)/models/SampleRobot.conf" />
    <arg name="PROJECT_FILE" value="$(find  hrpsys_tutorials)/models/SampleRobot.xml" />
    <arg name="SIMULATOR_NAME" value="SampleRobot(Robot)0" />
    <arg name="GUI" default="$(arg GUI)" />
    <arg name="KILL_SERVERS" default="$(arg KILL_SERVERS)" />
  </include>

  <sphinxdoc><![CDATA[

This launch file shows an example of create project file for the robot

`roslaunch hrpsys samplerobot.launch` starts SampleRobot_inHouse.xml project file, this project file invokes `openhrp-controller-bridge.sh` that reads project file and create openhrp3 simulator and rtc ontroller bridge RTC named `SampleRobot(Robot)`

.. code-block:: bash

  rosrun hrpsys hrpsyspy `rospack find hrpsys`/scripts/hrpsys.py `rospack find hrpsys`/scripts/SampleRobot_inHouse.xml

Then type `rosrun hrpsys hrpsyspy hrpsys.py <project xml file>` to start SequencePlayer(seq) and StateHolder(sh) , and serialize theses components includes the bridge component

.. code-block:: bash

  rosrun hrpsys SampleRobot_walk.sh

Finally, `rosrun hrpsys SampleRobot_walk.sh` read walking pattern data and send to `seq` component.

.. video:: build/images/SampleRobot
  :width: 600

  ]]></sphinxdoc>
</launch>
