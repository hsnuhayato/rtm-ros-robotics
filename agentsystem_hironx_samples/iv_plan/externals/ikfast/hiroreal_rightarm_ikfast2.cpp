/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// generated 2011-01-31 17:58:27.335456
/// To compile with gcc:
///     gcc -llapack -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -llapack -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef BOOST_ASSERT
#define IKFAST_ASSERT BOOST_ASSERT
#else

#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 0; }
IKFAST_API int* getFreeParameters() { return NULL; }
IKFAST_API int getNumJoints() { return 6; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 1; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71;
x0=IKcos(j[3]);
x1=IKcos(j[4]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[4]);
x5=IKcos(j[0]);
x6=IKcos(j[1]);
x7=IKsin(j[5]);
x8=IKsin(j[3]);
x9=IKsin(j[1]);
x10=((x0)*(x4)*(x7));
x11=IKcos(j[5]);
x12=((x11)*(x8));
x13=((((-1.00000000000000)*(x12)))+(x10));
x14=IKsin(j[0]);
x15=((x0)*(x11)*(x4));
x16=((x7)*(x8));
x17=((x15)+(x16));
x18=((-1.00000000000000)*(x17));
x19=((0.0900000000000000)*(x1));
x20=((0.220000000000000)+(x19));
x21=((0.0900000000000000)*(x0)*(x4));
x22=((0.0200000000000000)+(x21));
x23=((x0)*(x1)*(x3));
x24=((x2)*(x4));
x25=((((-1.00000000000000)*(x24)))+(x23));
x26=((x25)*(x6));
x27=((x0)*(x1)*(x2));
x28=((x3)*(x4));
x29=((x27)+(x28));
x30=((x29)*(x9));
x31=((((-1.00000000000000)*(x30)))+(x26));
x32=((x16)*(x4));
x33=((x0)*(x11));
x34=((x33)+(x32));
x35=((x13)*(x2));
x36=((x1)*(x3)*(x7));
x37=((((-1.00000000000000)*(x36)))+(x35));
x38=((x1)*(x2)*(x7));
x39=((x13)*(x3));
x40=((x39)+(x38));
x41=((x40)*(x6));
x42=((x37)*(x9));
x43=((((-1.00000000000000)*(x42)))+(x41));
x44=((x0)*(x7));
x45=((x12)*(x4));
x46=((((-1.00000000000000)*(x45)))+(x44));
x47=((x18)*(x3));
x48=((x1)*(x11)*(x2));
x49=((((-1.00000000000000)*(x48)))+(x47));
x50=((x1)*(x11)*(x3));
x51=((x18)*(x2));
x52=((x51)+(x50));
x53=((x20)*(x3));
x54=((0.250000000000000)+(x53));
x55=((x2)*(x22));
x56=((x54)+(((-1.00000000000000)*(x55))));
x57=((x2)*(x20));
x58=((x22)*(x3));
x59=((x58)+(x57));
x60=((0.0200000000000000)+(((-1.00000000000000)*(x59))));
x61=((x6)*(x60));
x62=((0.0900000000000000)*(x4)*(x8));
x63=((0.0850000000000000)+(x62));
x64=((-1.00000000000000)*(x48));
x65=((x47)+(x64));
x66=((x6)*(x65));
x67=((-1.00000000000000)*(x52)*(x9));
x68=((-1.00000000000000)*(x56)*(x9));
x69=((x61)+(x68));
x70=((-1.00000000000000)*(x30));
x71=((x70)+(x26));
eerot[0]=((((x31)*(x5)))+(((-1.00000000000000)*(x1)*(x14)*(x8))));
eerot[1]=((((x43)*(x5)))+(((-1.00000000000000)*(x14)*(x34))));
eerot[2]=((((-1.00000000000000)*(x5)*(((x66)+(((-1.00000000000000)*(x52)*(x9)))))))+(((x14)*(x46))));
eetrans[0]=((((x5)*(((((-1.00000000000000)*(x56)*(x9)))+(x61)))))+(((x14)*(x63)))+(((-0.0335000000000000)*(x31)*(x5)))+(((0.0335000000000000)*(x1)*(x14)*(x8))));
eerot[3]=((((0.258819050000000)*(x25)*(x9)))+(((0.258819050000000)*(x29)*(x6)))+(((0.965925826671681)*(x1)*(x5)*(x8)))+(((0.965925826671681)*(x14)*(x71))));
eerot[4]=((((0.258819050000000)*(x40)*(x9)))+(((0.258819050000000)*(x37)*(x6)))+(((0.965925826671681)*(x14)*(x43)))+(((0.965925826671681)*(x34)*(x5))));
eerot[5]=((((-0.258819050000000)*(x52)*(x6)))+(((-0.965925826671681)*(x14)*(((((x49)*(x6)))+(x67)))))+(((-0.258819050000000)*(x49)*(x9)))+(((-0.965925826671681)*(x46)*(x5))));
eetrans[1]=((-0.145000000000000)+(((-0.00867043817500000)*(x29)*(x6)))+(((-0.0323585151935013)*(x14)*(x31)))+(((-0.0323585151935013)*(x1)*(x5)*(x8)))+(((0.258819050000000)*(x60)*(x9)))+(((-0.965925826671681)*(x5)*(x63)))+(((-0.00867043817500000)*(x25)*(x9)))+(((0.258819050000000)*(x56)*(x6)))+(((0.965925826671681)*(x14)*(x69))));
eerot[6]=((((-0.965925826671681)*(x29)*(x6)))+(((-0.965925826671681)*(x25)*(x9)))+(((0.258819050000000)*(x14)*(x31)))+(((0.258819050000000)*(x1)*(x5)*(x8))));
eerot[7]=((((0.258819050000000)*(x14)*(((((-1.00000000000000)*(x42)))+(x41)))))+(((-0.965925826671681)*(x37)*(x6)))+(((0.258819050000000)*(x34)*(x5)))+(((-0.965925826671681)*(x40)*(x9))));
eerot[8]=((((-0.258819050000000)*(x46)*(x5)))+(((0.965925826671681)*(x65)*(x9)))+(((0.965925826671681)*(x52)*(x6)))+(((-0.258819050000000)*(x14)*(((x66)+(x67))))));
eetrans[2]=((0.380000000000000)+(((-0.965925826671681)*(x60)*(x9)))+(((0.0323585151935013)*(x29)*(x6)))+(((-0.00867043817500000)*(x14)*(x71)))+(((0.0323585151935013)*(x25)*(x9)))+(((0.258819050000000)*(x14)*(x69)))+(((-0.258819050000000)*(x5)*(x63)))+(((-0.00867043817500000)*(x1)*(x5)*(x8)))+(((-0.965925826671681)*(x56)*(x6))));
}

class IKSolver {
public:
IKReal j0, cj0, sj0,
j1, cj1, sj1,
j2, cj2, sj2,
j3, cj3, sj3,
j4, cj4, sj4,
j5, cj5, sj5,
    new_r00, r00, rxp0_0,
    new_r01, r01, rxp0_1,
    new_r02, r02, rxp0_2,
    new_r10, r10, rxp1_0,
    new_r11, r11, rxp1_1,
    new_r12, r12, rxp1_2,
    new_r20, r20, rxp2_0,
    new_r21, r21, rxp2_1,
    new_r22, r22, rxp2_2,
new_px, new_py, new_pz, px, py, pz, npx, npy, npz, pp;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.00000000000000)*(r02));
new_r01=r01;
new_r02=r00;
new_px=((px)+(((0.0335000000000000)*(r00))));
new_r10=((((-0.258819050000000)*(r22)))+(((-0.965925826671681)*(r12))));
new_r11=((((0.965925826671681)*(r11)))+(((0.258819050000000)*(r21))));
new_r12=((((0.965925826671681)*(r10)))+(((0.258819050000000)*(r20))));
new_py=((0.0417080058673937)+(((0.00867043817500000)*(r20)))+(((0.965925826671681)*(py)))+(((0.0323585151935013)*(r10)))+(((0.258819050000000)*(pz))));
new_r20=((((-0.965925826671681)*(r22)))+(((0.258819050000000)*(r12))));
new_r21=((((-0.258819050000000)*(r11)))+(((0.965925826671681)*(r21))));
new_r22=((((-0.258819050000000)*(r10)))+(((0.965925826671681)*(r20))));
new_pz=((-0.404580576385239)+(((0.965925826671681)*(pz)))+(((-0.258819050000000)*(py)))+(((0.0323585151935013)*(r20)))+(((-0.00867043817500000)*(r10))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
IKReal matrixcondition[1];
IKReal x0=(npy)*(npy);
IKReal x1=(r20)*(r20);
IKReal x2=(r21)*(r21);
IKReal x3=(npx)*(npx);
IKReal x4=(r20)*(r20)*(r20);
IKReal x5=(rxp2_2)*(rxp2_2);
IKReal x6=(r21)*(r21)*(r21)*(r21);
IKReal x7=(npz)*(npz);
IKReal x8=(rxp1_2)*(rxp1_2);
IKReal x9=(npy)*(npy)*(npy);
IKReal x10=(r22)*(r22);
IKReal x11=(rxp0_2)*(rxp0_2);
IKReal x12=(r20)*(r20)*(r20)*(r20)*(r20);
IKReal x13=(r21)*(r21)*(r21);
IKReal x14=(npx)*(npx)*(npx);
IKReal x15=(r20)*(r20)*(r20)*(r20);
IKReal x16=(r21)*(r21)*(r21)*(r21)*(r21);
 matrixcondition[0]=0;//((((-6.56100000000000e-5)*(npx)*(r21)*(x6)))+(((0.0162000000000000)*(npx)*(r20)*(rxp0_2)*(rxp1_2)*(x2)))+(((0.0324000000000000)*(npx)*(npy)*(r21)*(r22)*(rxp0_2)*(x1)))+(((3.00000000000000)*(npy)*(r20)*(x2)*(x3)*(x5)))+(((-0.0162000000000000)*(npy)*(r20)*(x10)*(x2)*(x3)))+(((6.56100000000000e-5)*(npy)*(r20)*(x15)))+(((4.00000000000000)*(npx)*(npy)*(npz)*(r21)*(rxp1_2)*(rxp2_2)*(x1)))+(((-0.0162000000000000)*(r21)*(r22)*(rxp1_2)*(x0)*(x1)))+(((-0.00810000000000000)*(npx)*(r21)*(x6)*(x7)))+(((-3.00000000000000)*(npx)*(r21)*(x0)*(x1)*(x5)))+(((-1.00000000000000)*(npx)*(r21)*(x11)*(x2)*(x7)))+(((4.00000000000000)*(npx)*(r20)*(r21)*(r22)*(rxp0_2)*(rxp2_2)*(x0)))+(((0.0162000000000000)*(npz)*(r20)*(r21)*(r22)*(x2)*(x3)))+(((2.00000000000000)*(npz)*(r20)*(r21)*(r22)*(x3)*(x8)))+(((0.0162000000000000)*(rxp2_2)*(x1)*(x2)*(x3)))+(((0.0162000000000000)*(npz)*(r20)*(r21)*(r22)*(x1)*(x3)))+(((0.0162000000000000)*(npx)*(r21)*(x0)*(x1)*(x10)))+(((2.00000000000000)*(npx)*(npy)*(npz)*(r22)*(x11)*(x2)))+(((-0.0324000000000000)*(npx)*(npy)*(r20)*(r21)*(rxp2_2)*(x2)))+(((-0.0324000000000000)*(npx)*(npy)*(r20)*(r21)*(rxp2_2)*(x1)))+(((0.00810000000000000)*(npy)*(r20)*(x15)*(x7)))+(((-0.00810000000000000)*(npx)*(r21)*(x11)*(x2)))+(((-0.00810000000000000)*(npx)*(r21)*(x1)*(x10)*(x3)))+(((-1.00000000000000)*(npx)*(r21)*(x2)*(x3)*(x5)))+(((6.56100000000000e-5)*(npy)*(r20)*(x6)))+(((-1.00000000000000)*(npx)*(r21)*(x1)*(x7)*(x8)))+(((-1.00000000000000)*(npx)*(r21)*(x10)*(x3)*(x8)))+(((0.0324000000000000)*(npx)*(npy)*(r20)*(r22)*(rxp1_2)*(x2)))+(((-6.56100000000000e-5)*(npx)*(r21)*(x15)))+(((0.0162000000000000)*(npy)*(r20)*(x1)*(x2)*(x7)))+(((-0.0162000000000000)*(npy)*(r21)*(rxp0_2)*(rxp1_2)*(x1)))+(((0.0162000000000000)*(rxp2_2)*(x3)*(x6)))+(((2.00000000000000)*(npx)*(r20)*(rxp0_2)*(rxp1_2)*(x2)*(x7)))+(((npy)*(r20)*(x10)*(x3)*(x8)))+(((0.00810000000000000)*(npy)*(r20)*(x11)*(x2)))+(((0.0162000000000000)*(rxp2_2)*(x0)*(x15)))+(((0.00810000000000000)*(npy)*(r20)*(x6)*(x7)))+(((-2.00000000000000)*(npy)*(r22)*(rxp0_2)*(rxp2_2)*(x2)*(x3)))+(((0.00810000000000000)*(npy)*(r20)*(x1)*(x10)*(x3)))+(((-1.00000000000000)*(npx)*(r21)*(x0)*(x10)*(x11)))+(((npy)*(r20)*(x1)*(x7)*(x8)))+(((-0.00810000000000000)*(npx)*(r21)*(x1)*(x8)))+(((-2.00000000000000)*(npz)*(r20)*(rxp1_2)*(rxp2_2)*(x2)*(x3)))+(((-0.000131220000000000)*(npx)*(r21)*(x1)*(x2)))+(((2.00000000000000)*(npx)*(r22)*(rxp1_2)*(rxp2_2)*(x0)*(x1)))+(((-2.00000000000000)*(npy)*(r22)*(rxp0_2)*(rxp2_2)*(x0)*(x1)))+(((-0.0162000000000000)*(r21)*(r22)*(rxp1_2)*(x2)*(x3)))+(((-2.00000000000000)*(npx)*(npy)*(npz)*(r22)*(x1)*(x8)))+(((-0.00810000000000000)*(npx)*(r21)*(x15)*(x7)))+(((-4.00000000000000)*(npx)*(npy)*(npz)*(r20)*(rxp0_2)*(rxp2_2)*(x2)))+(((-2.00000000000000)*(npz)*(r20)*(rxp1_2)*(rxp2_2)*(x0)*(x1)))+(((-0.0162000000000000)*(npx)*(r21)*(x1)*(x2)*(x7)))+(((2.00000000000000)*(npy)*(r21)*(rxp0_2)*(rxp1_2)*(x10)*(x3)))+(((-0.0162000000000000)*(r20)*(r22)*(rxp0_2)*(x2)*(x3)))+(((0.0162000000000000)*(npx)*(npy)*(npz)*(r22)*(x6)))+(((0.00810000000000000)*(npy)*(r20)*(x0)*(x10)*(x2)))+(((2.00000000000000)*(npz)*(r21)*(rxp0_2)*(rxp2_2)*(x2)*(x3)))+(((-4.00000000000000)*(npy)*(r20)*(r21)*(r22)*(rxp1_2)*(rxp2_2)*(x3)))+(((2.00000000000000)*(npx)*(r22)*(rxp1_2)*(rxp2_2)*(x2)*(x3)))+(((0.00810000000000000)*(npy)*(r20)*(x1)*(x8)))+(((-2.00000000000000)*(npz)*(r22)*(rxp0_2)*(rxp1_2)*(x2)*(x3)))+(((-2.00000000000000)*(npx)*(r20)*(rxp0_2)*(rxp1_2)*(x0)*(x10)))+(((2.00000000000000)*(npz)*(r22)*(rxp0_2)*(rxp1_2)*(x0)*(x1)))+(((npy)*(r20)*(x0)*(x10)*(x11)))+(((-0.00810000000000000)*(npx)*(r21)*(x0)*(x10)*(x2)))+(((npy)*(r20)*(x0)*(x1)*(x5)))+(((npy)*(r20)*(x11)*(x2)*(x7)))+(((-0.0162000000000000)*(r20)*(r22)*(rxp0_2)*(x0)*(x1)))+(((2.00000000000000)*(npz)*(r21)*(rxp0_2)*(rxp2_2)*(x0)*(x1)))+(((0.0162000000000000)*(rxp2_2)*(x0)*(x1)*(x2)))+(((-2.00000000000000)*(npy)*(r21)*(rxp0_2)*(rxp1_2)*(x1)*(x7)))+(((-0.0162000000000000)*(npz)*(r20)*(r21)*(r22)*(x0)*(x2)))+(((-0.0162000000000000)*(npz)*(r20)*(r21)*(r22)*(x0)*(x1)))+(((-0.0162000000000000)*(npx)*(npy)*(npz)*(r22)*(x15)))+(((0.000131220000000000)*(npy)*(r20)*(x1)*(x2)))+(((-2.00000000000000)*(npz)*(r20)*(r21)*(r22)*(x0)*(x11))));
 //if( IKabs(matrixcondition[0]) < 1e-15  )
 //{      printf("bad condition: %e\n",matrixcondition[0]); continue;
 //}
 IKReal IKFAST_ALIGNED16(matrixinvcoeffs[64]);
IKReal x17=((-1.00000000000000)*(r21));
IKReal x18=((-1.00000000000000)*(npy));
IKReal x19=((-1.00000000000000)*(r22));
IKReal x20=((-1.00000000000000)*(npz));
IKReal x21=((-1.00000000000000)*(rxp2_2));
IKReal x22=((0.0900000000000000)*(r20));
IKReal x23=((-1.00000000000000)*(r20));
IKReal x24=((-1.00000000000000)*(npx));
IKReal x25=((0.0900000000000000)*(r21));
matrixinvcoeffs[0]=x23;
matrixinvcoeffs[1]=x24;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=x17;
matrixinvcoeffs[9]=x18;
matrixinvcoeffs[10]=0;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=0;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=0;
matrixinvcoeffs[19]=x19;
matrixinvcoeffs[20]=-0.0900000000000000;
matrixinvcoeffs[21]=x20;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=x21;
matrixinvcoeffs[24]=0;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=x17;
matrixinvcoeffs[27]=0;
matrixinvcoeffs[28]=x18;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=((-1.00000000000000)*(rxp1_2));
matrixinvcoeffs[31]=x22;
matrixinvcoeffs[32]=0;
matrixinvcoeffs[33]=0;
matrixinvcoeffs[34]=r20;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=npx;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=rxp0_2;
matrixinvcoeffs[39]=x25;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=0;
matrixinvcoeffs[42]=x19;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=x20;
matrixinvcoeffs[45]=0.0900000000000000;
matrixinvcoeffs[46]=x21;
matrixinvcoeffs[47]=0;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=0;
matrixinvcoeffs[51]=r21;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=npy;
matrixinvcoeffs[54]=x22;
matrixinvcoeffs[55]=rxp1_2;
matrixinvcoeffs[56]=0;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x23;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=x24;
matrixinvcoeffs[62]=x25;
matrixinvcoeffs[63]=((-1.00000000000000)*(rxp0_2));
 if( !matrixinverse<8>(matrixinvcoeffs) ) {
continue;
}
IKReal gconst0_0=matrixinvcoeffs[0], gconst0_1=matrixinvcoeffs[8], gconst0_2=matrixinvcoeffs[16], gconst0_3=matrixinvcoeffs[24], gconst0_4=matrixinvcoeffs[32], gconst0_5=matrixinvcoeffs[40], gconst0_6=matrixinvcoeffs[48], gconst0_7=matrixinvcoeffs[56], gconst1_0=matrixinvcoeffs[1], gconst1_1=matrixinvcoeffs[9], gconst1_2=matrixinvcoeffs[17], gconst1_3=matrixinvcoeffs[25], gconst1_4=matrixinvcoeffs[33], gconst1_5=matrixinvcoeffs[41], gconst1_6=matrixinvcoeffs[49], gconst1_7=matrixinvcoeffs[57], gconst2_0=matrixinvcoeffs[2], gconst2_1=matrixinvcoeffs[10], gconst2_2=matrixinvcoeffs[18], gconst2_3=matrixinvcoeffs[26], gconst2_4=matrixinvcoeffs[34], gconst2_5=matrixinvcoeffs[42], gconst2_6=matrixinvcoeffs[50], gconst2_7=matrixinvcoeffs[58], gconst3_0=matrixinvcoeffs[3], gconst3_1=matrixinvcoeffs[11], gconst3_2=matrixinvcoeffs[19], gconst3_3=matrixinvcoeffs[27], gconst3_4=matrixinvcoeffs[35], gconst3_5=matrixinvcoeffs[43], gconst3_6=matrixinvcoeffs[51], gconst3_7=matrixinvcoeffs[59], gconst4_0=matrixinvcoeffs[4], gconst4_1=matrixinvcoeffs[12], gconst4_2=matrixinvcoeffs[20], gconst4_3=matrixinvcoeffs[28], gconst4_4=matrixinvcoeffs[36], gconst4_5=matrixinvcoeffs[44], gconst4_6=matrixinvcoeffs[52], gconst4_7=matrixinvcoeffs[60], gconst5_0=matrixinvcoeffs[5], gconst5_1=matrixinvcoeffs[13], gconst5_2=matrixinvcoeffs[21], gconst5_3=matrixinvcoeffs[29], gconst5_4=matrixinvcoeffs[37], gconst5_5=matrixinvcoeffs[45], gconst5_6=matrixinvcoeffs[53], gconst5_7=matrixinvcoeffs[61], gconst6_0=matrixinvcoeffs[6], gconst6_1=matrixinvcoeffs[14], gconst6_2=matrixinvcoeffs[22], gconst6_3=matrixinvcoeffs[30], gconst6_4=matrixinvcoeffs[38], gconst6_5=matrixinvcoeffs[46], gconst6_6=matrixinvcoeffs[54], gconst6_7=matrixinvcoeffs[62], gconst7_0=matrixinvcoeffs[7], gconst7_1=matrixinvcoeffs[15], gconst7_2=matrixinvcoeffs[23], gconst7_3=matrixinvcoeffs[31], gconst7_4=matrixinvcoeffs[39], gconst7_5=matrixinvcoeffs[47], gconst7_6=matrixinvcoeffs[55], gconst7_7=matrixinvcoeffs[63];
IKReal op[162], zeror[48];
int numroots;
IKReal x26=((0.0153000000000000)*(gconst1_1)*(npx));
IKReal x27=((0.220025000000000)+(x26));
IKReal x28=((0.0153000000000000)*(gconst0_1)*(npy));
IKReal x29=((pp)+(x28));
IKReal x30=((((-1.00000000000000)*(x29)))+(x27));
IKReal x31=((0.220025000000000)+(x28));
IKReal x32=((-0.220025000000000)+(pp)+(x27));
IKReal x33=((((-1.00000000000000)*(x32)))+(x31));
IKReal x34=((0.720000000000000)*(gconst0_0)*(npy));
IKReal x35=((0.720000000000000)*(gconst1_0)*(npx));
IKReal x36=((0.180000000000000)*(gconst1_1)*(npx));
IKReal x37=((0.180000000000000)*(gconst0_1)*(npy));
IKReal x38=((-0.218400000000000)+(x27));
IKReal x39=((((-1.00000000000000)*(x29)))+(x38));
IKReal x40=((0.0144000000000000)*(gconst0_1)*(npy));
IKReal x41=((0.0144000000000000)*(gconst1_1)*(npx));
IKReal x42=((((-1.00000000000000)*(x41)))+(x40));
IKReal x43=((-0.218400000000000)+(x31));
IKReal x44=((((-1.00000000000000)*(x32)))+(x43));
IKReal x45=((0.00765000000000000)*(gconst1_1)*(r20));
IKReal x46=((0.00765000000000000)*(gconst0_1)*(r21));
IKReal x47=((pz)+(x46));
IKReal x48=((pz)+(x45));
IKReal x49=((0.360000000000000)*(gconst0_0)*(r21));
IKReal x50=((0.360000000000000)*(gconst1_0)*(r20));
IKReal x51=((0.0900000000000000)*(gconst1_1)*(r20));
IKReal x52=((0.0900000000000000)*(gconst0_1)*(r21));
IKReal x53=((0.00720000000000000)*(gconst0_1)*(r21));
IKReal x54=((0.00720000000000000)*(gconst1_1)*(r20));
IKReal x55=((x53)+(((-1.00000000000000)*(x54))));
IKReal x56=((0.0850000000000000)*(gconst0_1)*(rxp0_2));
IKReal x57=((0.0850000000000000)*(gconst1_1)*(rxp1_2));
IKReal x58=((0.0900000000000000)*(r22));
IKReal x59=((x58)+(x57)+(x56));
IKReal x60=((x57)+(x56));
IKReal x61=((x58)+(((-1.00000000000000)*(x60))));
IKReal x62=((4.00000000000000)*(gconst0_0)*(rxp0_2));
IKReal x63=((4.00000000000000)*(gconst1_0)*(rxp1_2));
IKReal x64=((x62)+(x63));
IKReal x65=((gconst1_1)*(rxp1_2));
IKReal x66=((gconst0_1)*(rxp0_2));
IKReal x67=((0.0800000000000000)*(x66));
IKReal x68=((0.0800000000000000)*(x65));
IKReal x69=((x67)+(x68));
IKReal x70=((0.000688500000000000)*(gconst1_1)*(r21));
IKReal x71=((0.000688500000000000)*(gconst0_1)*(r20));
IKReal x72=((0.0850000000000000)*(gconst0_1)*(pp)*(r20));
IKReal x73=((0.0850000000000000)*(gconst1_1)*(pp)*(r21));
IKReal x74=((0.170000000000000)*(gconst0_1)*(npx)*(pz));
IKReal x75=((0.180000000000000)*(rxp2_2));
IKReal x76=((0.170000000000000)*(gconst1_1)*(npy)*(pz));
IKReal x77=((x76)+(x75)+(x74));
IKReal x78=((x75)+(x73)+(x72)+(x71)+(x70));
IKReal x79=((8.00000000000000)*(gconst0_0)*(npx)*(pz));
IKReal x80=((8.00000000000000)*(gconst1_0)*(npy)*(pz));
IKReal x81=((4.00000000000000)*(gconst0_0)*(pp)*(r20));
IKReal x82=((0.0324000000000000)*(gconst0_0)*(r20));
IKReal x83=((0.0324000000000000)*(gconst1_0)*(r21));
IKReal x84=((4.00000000000000)*(gconst1_0)*(pp)*(r21));
IKReal x85=((gconst0_1)*(pp)*(r20));
IKReal x86=((0.00810000000000000)*(gconst1_1)*(r21));
IKReal x87=((gconst1_1)*(pp)*(r21));
IKReal x88=((0.00810000000000000)*(gconst0_1)*(r20));
IKReal x89=((2.00000000000000)*(gconst0_1)*(npx)*(pz));
IKReal x90=((2.00000000000000)*(gconst1_1)*(npy)*(pz));
IKReal x91=((0.160000000000000)*(gconst1_1)*(npy)*(pz));
IKReal x92=((0.160000000000000)*(gconst0_1)*(npx)*(pz));
IKReal x93=((0.000648000000000000)*(gconst1_1)*(r21));
IKReal x94=((0.0800000000000000)*(x85));
IKReal x95=((0.000648000000000000)*(gconst0_1)*(r20));
IKReal x96=((0.0800000000000000)*(x87));
IKReal x97=((x93)+(x95)+(x94)+(x96));
IKReal x98=((0.0153000000000000)*(gconst2_6)*(pz));
IKReal x99=((0.00810000000000000)*(gconst3_3)*(r21));
IKReal x100=((0.000688500000000000)*(gconst3_6)*(r21));
IKReal x101=((0.00380700000000000)*(gconst3_5)*(r21));
IKReal x102=((0.0850000000000000)*(gconst4_6)*(pp)*(r20));
IKReal x103=((0.180000000000000)*(gconst2_3)*(pz));
IKReal x104=((0.470000000000000)*(gconst4_5)*(pp)*(r20));
IKReal x105=((0.0846000000000000)*(gconst2_5)*(pz));
IKReal x106=((gconst4_3)*(pp)*(r20));
IKReal x107=((2.00000000000000)*(gconst5_3)*(npz)*(pz));
IKReal x108=((0.940000000000000)*(gconst5_5)*(npz)*(pz));
IKReal x109=((0.170000000000000)*(gconst3_6)*(npy)*(pz));
IKReal x110=((0.940000000000000)*(gconst3_5)*(npy)*(pz));
IKReal x111=((2.00000000000000)*(gconst3_3)*(npy)*(pz));
IKReal x112=((0.170000000000000)*(gconst5_6)*(npz)*(pz));
IKReal x113=((2.00000000000000)*(gconst4_3)*(npx)*(pz));
IKReal x114=((0.470000000000000)*(gconst3_5)*(pp)*(r21));
IKReal x115=((0.170000000000000)*(gconst4_6)*(npx)*(pz));
IKReal x116=((0.0850000000000000)*(gconst5_6)*(pp)*(r22));
IKReal x117=((0.470000000000000)*(gconst5_5)*(pp)*(r22));
IKReal x118=((gconst3_3)*(pp)*(r21));
IKReal x119=((0.0850000000000000)*(gconst3_6)*(pp)*(r21));
IKReal x120=((0.00810000000000000)*(gconst5_3)*(r22));
IKReal x121=((0.180000000000000)*(gconst7_3)*(rxp1_2));
IKReal x122=((0.00810000000000000)*(gconst4_3)*(r20));
IKReal x123=((0.0846000000000000)*(gconst7_5)*(rxp1_2));
IKReal x124=((0.00380700000000000)*(gconst4_5)*(r20));
IKReal x125=((0.940000000000000)*(gconst4_5)*(npx)*(pz));
IKReal x126=((0.0153000000000000)*(gconst7_6)*(rxp1_2));
IKReal x127=((gconst5_3)*(pp)*(r22));
IKReal x128=((0.00380700000000000)*(gconst5_5)*(r22));
IKReal x129=((0.000688500000000000)*(gconst4_6)*(r20));
IKReal x130=((0.0846000000000000)*(gconst6_5)*(rxp0_2));
IKReal x131=((0.180000000000000)*(gconst6_3)*(rxp0_2));
IKReal x132=((0.000688500000000000)*(gconst5_6)*(r22));
IKReal x133=((0.0153000000000000)*(gconst6_6)*(rxp0_2));
IKReal x134=((0.170000000000000)*(gconst5_4)*(pp)*(r22));
IKReal x135=((0.00137700000000000)*(gconst4_4)*(r20));
IKReal x136=((0.170000000000000)*(gconst3_4)*(pp)*(r21));
IKReal x137=((0.0306000000000000)*(gconst7_4)*(rxp1_2));
IKReal x138=((0.340000000000000)*(gconst4_4)*(npx)*(pz));
IKReal x139=((0.00137700000000000)*(gconst5_4)*(r22));
IKReal x140=((0.0306000000000000)*(gconst6_4)*(rxp0_2));
IKReal x141=((0.340000000000000)*(gconst5_4)*(npz)*(pz));
IKReal x142=((0.00137700000000000)*(gconst3_4)*(r21));
IKReal x143=((0.0306000000000000)*(gconst2_4)*(pz));
IKReal x144=((0.340000000000000)*(gconst3_4)*(npy)*(pz));
IKReal x145=((0.170000000000000)*(gconst4_4)*(pp)*(r20));
IKReal x146=((x141)+(x142)+(x143)+(x144)+(x145));
IKReal x147=((0.0306000000000000)*(gconst2_7)*(pz));
IKReal x148=((0.170000000000000)*(gconst4_7)*(pp)*(r20));
IKReal x149=((4.00000000000000)*(gconst5_2)*(npz)*(pz));
IKReal x150=((2.00000000000000)*(gconst4_2)*(pp)*(r20));
IKReal x151=((0.340000000000000)*(gconst3_7)*(npy)*(pz));
IKReal x152=((4.00000000000000)*(gconst3_2)*(npy)*(pz));
IKReal x153=((0.00137700000000000)*(gconst3_7)*(r21));
IKReal x154=((0.360000000000000)*(gconst2_2)*(pz));
IKReal x155=((0.0162000000000000)*(gconst3_2)*(r21));
IKReal x156=((0.340000000000000)*(gconst5_7)*(npz)*(pz));
IKReal x157=((0.0306000000000000)*(gconst7_7)*(rxp1_2));
IKReal x158=((0.0306000000000000)*(gconst6_7)*(rxp0_2));
IKReal x159=((0.170000000000000)*(gconst5_7)*(pp)*(r22));
IKReal x160=((0.00137700000000000)*(gconst5_7)*(r22));
IKReal x161=((2.00000000000000)*(gconst3_2)*(pp)*(r21));
IKReal x162=((2.00000000000000)*(gconst5_2)*(pp)*(r22));
IKReal x163=((0.0162000000000000)*(gconst5_2)*(r22));
IKReal x164=((0.0162000000000000)*(gconst4_2)*(r20));
IKReal x165=((0.360000000000000)*(gconst6_2)*(rxp0_2));
IKReal x166=((0.170000000000000)*(gconst3_7)*(pp)*(r21));
IKReal x167=((4.00000000000000)*(gconst4_2)*(npx)*(pz));
IKReal x168=((0.340000000000000)*(gconst4_7)*(npx)*(pz));
IKReal x169=((0.360000000000000)*(gconst7_2)*(rxp1_2));
IKReal x170=((0.00137700000000000)*(gconst4_7)*(r20));
IKReal x171=((gconst3_4)*(npy)*(pz));
IKReal x172=((0.000324000000000000)*(gconst5_5)*(r22));
IKReal x173=((0.000324000000000000)*(gconst4_5)*(r20));
IKReal x174=((0.500000000000000)*(gconst4_4)*(pp)*(r20));
IKReal x175=((0.0800000000000000)*(gconst4_5)*(npx)*(pz));
IKReal x176=((0.0400000000000000)*(gconst5_5)*(pp)*(r22));
IKReal x177=((0.0400000000000000)*(gconst3_5)*(pp)*(r21));
IKReal x178=((0.00405000000000000)*(gconst3_4)*(r21));
IKReal x179=((0.00720000000000000)*(gconst6_5)*(rxp0_2));
IKReal x180=((gconst5_4)*(npz)*(pz));
IKReal x181=((0.0900000000000000)*(gconst2_4)*(pz));
IKReal x182=((0.00720000000000000)*(gconst7_5)*(rxp1_2));
IKReal x183=((0.500000000000000)*(gconst3_4)*(pp)*(r21));
IKReal x184=((0.000324000000000000)*(gconst3_5)*(r21));
IKReal x185=((gconst4_4)*(npx)*(pz));
IKReal x186=((0.0900000000000000)*(gconst7_4)*(rxp1_2));
IKReal x187=((0.500000000000000)*(gconst5_4)*(pp)*(r22));
IKReal x188=((0.0800000000000000)*(gconst3_5)*(npy)*(pz));
IKReal x189=((0.0900000000000000)*(gconst6_4)*(rxp0_2));
IKReal x190=((0.0800000000000000)*(gconst5_5)*(npz)*(pz));
IKReal x191=((0.0400000000000000)*(gconst4_5)*(pp)*(r20));
IKReal x192=((0.00405000000000000)*(gconst5_4)*(r22));
IKReal x193=((0.00720000000000000)*(gconst2_5)*(pz));
IKReal x194=((0.00405000000000000)*(gconst4_4)*(r20));
IKReal x195=((0.00712800000000000)*(gconst5_6)*(r22));
IKReal x196=((0.158400000000000)*(gconst7_6)*(rxp1_2));
IKReal x197=((1.76000000000000)*(gconst4_6)*(npx)*(pz));
IKReal x198=((0.158400000000000)*(gconst6_6)*(rxp0_2));
IKReal x199=((0.880000000000000)*(gconst3_6)*(pp)*(r21));
IKReal x200=((0.00712800000000000)*(gconst4_6)*(r20));
IKReal x201=((0.880000000000000)*(gconst5_6)*(pp)*(r22));
IKReal x202=((1.76000000000000)*(gconst5_6)*(npz)*(pz));
IKReal x203=((0.880000000000000)*(gconst4_6)*(pp)*(r20));
IKReal x204=((0.158400000000000)*(gconst2_6)*(pz));
IKReal x205=((1.76000000000000)*(gconst3_6)*(npy)*(pz));
IKReal x206=((0.00712800000000000)*(gconst3_6)*(r21));
IKReal x207=((0.0324000000000000)*(gconst3_3)*(r21));
IKReal x208=((4.00000000000000)*(x106));
IKReal x209=((0.340000000000000)*(gconst5_6)*(pp)*(r22));
IKReal x210=((0.720000000000000)*(gconst2_3)*(pz));
IKReal x211=((0.00275400000000000)*(gconst5_6)*(r22));
IKReal x212=((0.0612000000000000)*(gconst6_6)*(rxp0_2));
IKReal x213=((8.00000000000000)*(gconst3_3)*(npy)*(pz));
IKReal x214=((8.00000000000000)*(gconst5_3)*(npz)*(pz));
IKReal x215=((0.340000000000000)*(gconst3_6)*(pp)*(r21));
IKReal x216=((0.680000000000000)*(gconst4_6)*(npx)*(pz));
IKReal x217=((0.0612000000000000)*(gconst7_6)*(rxp1_2));
IKReal x218=((0.00275400000000000)*(gconst4_6)*(r20));
IKReal x219=((4.00000000000000)*(x127));
IKReal x220=((0.680000000000000)*(gconst5_6)*(npz)*(pz));
IKReal x221=((0.0612000000000000)*(gconst2_6)*(pz));
IKReal x222=((0.00275400000000000)*(gconst3_6)*(r21));
IKReal x223=((0.0324000000000000)*(gconst5_3)*(r22));
IKReal x224=((0.0324000000000000)*(gconst4_3)*(r20));
IKReal x225=((0.720000000000000)*(gconst7_3)*(rxp1_2));
IKReal x226=((0.340000000000000)*(gconst4_6)*(pp)*(r20));
IKReal x227=((0.680000000000000)*(gconst3_6)*(npy)*(pz));
IKReal x228=((8.00000000000000)*(gconst4_3)*(npx)*(pz));
IKReal x229=((0.720000000000000)*(gconst6_3)*(rxp0_2));
IKReal x230=((4.00000000000000)*(x118));
IKReal x231=((0.000243000000000000)*(gconst5_5)*(r22));
IKReal x232=((0.00540000000000000)*(gconst7_5)*(rxp1_2));
IKReal x233=((0.00720000000000000)*(gconst7_4)*(rxp1_2));
IKReal x234=((0.000324000000000000)*(gconst5_4)*(r22));
IKReal x235=((0.000324000000000000)*(gconst4_4)*(r20));
IKReal x236=((0.0400000000000000)*(gconst3_4)*(pp)*(r21));
IKReal x237=((0.0600000000000000)*(gconst4_5)*(npx)*(pz));
IKReal x238=((0.000243000000000000)*(gconst4_5)*(r20));
IKReal x239=((0.0300000000000000)*(gconst5_5)*(pp)*(r22));
IKReal x240=((0.0300000000000000)*(gconst3_5)*(pp)*(r21));
IKReal x241=((0.0400000000000000)*(gconst5_4)*(pp)*(r22));
IKReal x242=((0.00720000000000000)*(gconst6_4)*(rxp0_2));
IKReal x243=((0.0800000000000000)*(x185));
IKReal x244=((0.00540000000000000)*(gconst6_5)*(rxp0_2));
IKReal x245=((0.000243000000000000)*(gconst3_5)*(r21));
IKReal x246=((0.000324000000000000)*(gconst3_4)*(r21));
IKReal x247=((0.00540000000000000)*(gconst2_5)*(pz));
IKReal x248=((0.0300000000000000)*(gconst4_5)*(pp)*(r20));
IKReal x249=((0.0800000000000000)*(x180));
IKReal x250=((0.0800000000000000)*(x171));
IKReal x251=((0.0600000000000000)*(gconst5_5)*(npz)*(pz));
IKReal x252=((0.00720000000000000)*(gconst2_4)*(pz));
IKReal x253=((0.0600000000000000)*(gconst3_5)*(npy)*(pz));
IKReal x254=((0.0400000000000000)*(gconst4_4)*(pp)*(r20));
IKReal x255=((0.160000000000000)*(gconst3_6)*(npy)*(pz));
IKReal x256=((0.0800000000000000)*(gconst4_6)*(pp)*(r20));
IKReal x257=((0.0144000000000000)*(gconst2_6)*(pz));
IKReal x258=((0.000648000000000000)*(gconst3_6)*(r21));
IKReal x259=((0.160000000000000)*(gconst5_6)*(npz)*(pz));
IKReal x260=((0.0144000000000000)*(gconst7_6)*(rxp1_2));
IKReal x261=((0.0800000000000000)*(gconst3_6)*(pp)*(r21));
IKReal x262=((0.000648000000000000)*(gconst4_6)*(r20));
IKReal x263=((0.0800000000000000)*(gconst5_6)*(pp)*(r22));
IKReal x264=((0.0144000000000000)*(gconst6_6)*(rxp0_2));
IKReal x265=((0.000648000000000000)*(gconst5_6)*(r22));
IKReal x266=((0.160000000000000)*(gconst4_6)*(npx)*(pz));
IKReal x267=((0.00380700000000000)*(gconst7_5)*(r20));
IKReal x268=((0.470000000000000)*(gconst6_5)*(pp)*(r21));
IKReal x269=((0.940000000000000)*(gconst7_5)*(npx)*(pz));
IKReal x270=((gconst6_3)*(pp)*(r21));
IKReal x271=((0.170000000000000)*(gconst2_6)*(npz)*(pz));
IKReal x272=((0.170000000000000)*(gconst7_6)*(npx)*(pz));
IKReal x273=((2.00000000000000)*(gconst7_3)*(npx)*(pz));
IKReal x274=((2.00000000000000)*(gconst2_3)*(npz)*(pz));
IKReal x275=((0.940000000000000)*(gconst2_5)*(npz)*(pz));
IKReal x276=((0.0850000000000000)*(gconst6_6)*(pp)*(r21));
IKReal x277=((0.000688500000000000)*(gconst7_6)*(r20));
IKReal x278=((0.00810000000000000)*(gconst7_3)*(r20));
IKReal x279=((0.0846000000000000)*(gconst4_5)*(rxp1_2));
IKReal x280=((0.0153000000000000)*(gconst4_6)*(rxp1_2));
IKReal x281=((0.180000000000000)*(gconst3_3)*(rxp0_2));
IKReal x282=((0.0846000000000000)*(gconst3_5)*(rxp0_2));
IKReal x283=((2.00000000000000)*(gconst6_3)*(npy)*(pz));
IKReal x284=((0.00810000000000000)*(gconst6_3)*(r21));
IKReal x285=((0.000688500000000000)*(gconst2_6)*(r22));
IKReal x286=((0.180000000000000)*(gconst5_3)*(pz));
IKReal x287=((0.170000000000000)*(gconst6_6)*(npy)*(pz));
IKReal x288=((gconst2_3)*(pp)*(r22));
IKReal x289=((0.0850000000000000)*(gconst7_6)*(pp)*(r20));
IKReal x290=((0.0846000000000000)*(gconst5_5)*(pz));
IKReal x291=((0.000688500000000000)*(gconst6_6)*(r21));
IKReal x292=((0.470000000000000)*(gconst2_5)*(pp)*(r22));
IKReal x293=((0.180000000000000)*(gconst4_3)*(rxp1_2));
IKReal x294=((gconst7_3)*(pp)*(r20));
IKReal x295=((0.0153000000000000)*(gconst3_6)*(rxp0_2));
IKReal x296=((0.940000000000000)*(gconst6_5)*(npy)*(pz));
IKReal x297=((0.00380700000000000)*(gconst6_5)*(r21));
IKReal x298=((0.0850000000000000)*(gconst2_6)*(pp)*(r22));
IKReal x299=((0.0153000000000000)*(gconst5_6)*(pz));
IKReal x300=((0.00380700000000000)*(gconst2_5)*(r22));
IKReal x301=((0.470000000000000)*(gconst7_5)*(pp)*(r20));
IKReal x302=((0.00810000000000000)*(gconst2_3)*(r22));
IKReal x303=((0.00137700000000000)*(gconst2_4)*(r22));
IKReal x304=((0.170000000000000)*(gconst7_4)*(pp)*(r20));
IKReal x305=((0.0306000000000000)*(gconst3_4)*(rxp0_2));
IKReal x306=((0.340000000000000)*(gconst6_4)*(npy)*(pz));
IKReal x307=((0.0306000000000000)*(gconst4_4)*(rxp1_2));
IKReal x308=((0.0306000000000000)*(gconst5_4)*(pz));
IKReal x309=((0.170000000000000)*(gconst2_4)*(pp)*(r22));
IKReal x310=((0.00137700000000000)*(gconst6_4)*(r21));
IKReal x311=((x308)+(x309)+(x306)+(x307)+(x304)+(x305)+(x303)+(x310));
IKReal x312=((0.170000000000000)*(gconst6_4)*(pp)*(r21));
IKReal x313=((0.340000000000000)*(gconst7_4)*(npx)*(pz));
IKReal x314=((0.340000000000000)*(gconst2_4)*(npz)*(pz));
IKReal x315=((0.00137700000000000)*(gconst7_4)*(r20));
IKReal x316=((x315)+(x314)+(x313)+(x312));
IKReal x317=((x311)+(((-1.00000000000000)*(x316))));
IKReal x318=((0.340000000000000)*(gconst7_7)*(npx)*(pz));
IKReal x319=((0.00137700000000000)*(gconst7_7)*(r20));
IKReal x320=((4.00000000000000)*(gconst2_2)*(npz)*(pz));
IKReal x321=((0.0162000000000000)*(gconst7_2)*(r20));
IKReal x322=((0.340000000000000)*(gconst2_7)*(npz)*(pz));
IKReal x323=((0.170000000000000)*(gconst6_7)*(pp)*(r21));
IKReal x324=((2.00000000000000)*(gconst6_2)*(pp)*(r21));
IKReal x325=((4.00000000000000)*(gconst7_2)*(npx)*(pz));
IKReal x326=((2.00000000000000)*(gconst2_2)*(pp)*(r22));
IKReal x327=((0.360000000000000)*(gconst5_2)*(pz));
IKReal x328=((4.00000000000000)*(gconst6_2)*(npy)*(pz));
IKReal x329=((0.0306000000000000)*(gconst3_7)*(rxp0_2));
IKReal x330=((0.0162000000000000)*(gconst6_2)*(r21));
IKReal x331=((0.170000000000000)*(gconst2_7)*(pp)*(r22));
IKReal x332=((2.00000000000000)*(gconst7_2)*(pp)*(r20));
IKReal x333=((0.360000000000000)*(gconst3_2)*(rxp0_2));
IKReal x334=((0.170000000000000)*(gconst7_7)*(pp)*(r20));
IKReal x335=((0.0162000000000000)*(gconst2_2)*(r22));
IKReal x336=((0.0306000000000000)*(gconst4_7)*(rxp1_2));
IKReal x337=((0.00137700000000000)*(gconst6_7)*(r21));
IKReal x338=((0.0306000000000000)*(gconst5_7)*(pz));
IKReal x339=((0.00137700000000000)*(gconst2_7)*(r22));
IKReal x340=((0.340000000000000)*(gconst6_7)*(npy)*(pz));
IKReal x341=((0.360000000000000)*(gconst4_2)*(rxp1_2));
IKReal x342=((0.0800000000000000)*(gconst6_5)*(npy)*(pz));
IKReal x343=((gconst2_4)*(npz)*(pz));
IKReal x344=((0.00720000000000000)*(gconst3_5)*(rxp0_2));
IKReal x345=((0.00720000000000000)*(gconst4_5)*(rxp1_2));
IKReal x346=((0.000324000000000000)*(gconst2_5)*(r22));
IKReal x347=((0.00720000000000000)*(gconst5_5)*(pz));
IKReal x348=((0.0400000000000000)*(gconst7_5)*(pp)*(r20));
IKReal x349=((gconst7_4)*(npx)*(pz));
IKReal x350=((0.000324000000000000)*(gconst6_5)*(r21));
IKReal x351=((0.500000000000000)*(gconst6_4)*(pp)*(r21));
IKReal x352=((0.00405000000000000)*(gconst7_4)*(r20));
IKReal x353=((0.0400000000000000)*(gconst2_5)*(pp)*(r22));
IKReal x354=((0.0400000000000000)*(gconst6_5)*(pp)*(r21));
IKReal x355=((gconst6_4)*(npy)*(pz));
IKReal x356=((0.0900000000000000)*(gconst3_4)*(rxp0_2));
IKReal x357=((0.00405000000000000)*(gconst6_4)*(r21));
IKReal x358=((0.0800000000000000)*(gconst2_5)*(npz)*(pz));
IKReal x359=((0.0900000000000000)*(gconst4_4)*(rxp1_2));
IKReal x360=((0.000324000000000000)*(gconst7_5)*(r20));
IKReal x361=((0.0900000000000000)*(gconst5_4)*(pz));
IKReal x362=((0.00405000000000000)*(gconst2_4)*(r22));
IKReal x363=((0.500000000000000)*(gconst7_4)*(pp)*(r20));
IKReal x364=((0.0800000000000000)*(gconst7_5)*(npx)*(pz));
IKReal x365=((0.500000000000000)*(gconst2_4)*(pp)*(r22));
IKReal x366=((0.158400000000000)*(gconst5_6)*(pz));
IKReal x367=((0.00712800000000000)*(gconst2_6)*(r22));
IKReal x368=((0.880000000000000)*(gconst7_6)*(pp)*(r20));
IKReal x369=((0.158400000000000)*(gconst3_6)*(rxp0_2));
IKReal x370=((0.880000000000000)*(gconst2_6)*(pp)*(r22));
IKReal x371=((1.76000000000000)*(gconst6_6)*(npy)*(pz));
IKReal x372=((0.158400000000000)*(gconst4_6)*(rxp1_2));
IKReal x373=((0.00712800000000000)*(gconst6_6)*(r21));
IKReal x374=((x373)+(x372)+(x371)+(x370)+(x368)+(x369)+(x366)+(x367));
IKReal x375=((0.00712800000000000)*(gconst7_6)*(r20));
IKReal x376=((1.76000000000000)*(gconst7_6)*(npx)*(pz));
IKReal x377=((1.76000000000000)*(gconst2_6)*(npz)*(pz));
IKReal x378=((0.880000000000000)*(gconst6_6)*(pp)*(r21));
IKReal x379=((x378)+(x377)+(x376)+(x375));
IKReal x380=((0.0324000000000000)*(gconst7_3)*(r20));
IKReal x381=((8.00000000000000)*(gconst2_3)*(npz)*(pz));
IKReal x382=((0.340000000000000)*(gconst2_6)*(pp)*(r22));
IKReal x383=((0.680000000000000)*(gconst6_6)*(npy)*(pz));
IKReal x384=((0.0612000000000000)*(gconst5_6)*(pz));
IKReal x385=((0.00275400000000000)*(gconst6_6)*(r21));
IKReal x386=((0.340000000000000)*(gconst7_6)*(pp)*(r20));
IKReal x387=((8.00000000000000)*(gconst7_3)*(npx)*(pz));
IKReal x388=((0.00275400000000000)*(gconst2_6)*(r22));
IKReal x389=((0.0612000000000000)*(gconst4_6)*(rxp1_2));
IKReal x390=((4.00000000000000)*(x270));
IKReal x391=((0.0612000000000000)*(gconst3_6)*(rxp0_2));
IKReal x392=((4.00000000000000)*(x294));
IKReal x393=((0.720000000000000)*(gconst3_3)*(rxp0_2));
IKReal x394=((0.00275400000000000)*(gconst7_6)*(r20));
IKReal x395=((0.340000000000000)*(gconst6_6)*(pp)*(r21));
IKReal x396=((0.720000000000000)*(gconst5_3)*(pz));
IKReal x397=((0.0324000000000000)*(gconst2_3)*(r22));
IKReal x398=((0.0324000000000000)*(gconst6_3)*(r21));
IKReal x399=((0.680000000000000)*(gconst2_6)*(npz)*(pz));
IKReal x400=((8.00000000000000)*(gconst6_3)*(npy)*(pz));
IKReal x401=((4.00000000000000)*(x288));
IKReal x402=((0.720000000000000)*(gconst4_3)*(rxp1_2));
IKReal x403=((0.680000000000000)*(gconst7_6)*(npx)*(pz));
IKReal x404=((x333)+(x332)+(x330)+(x335)+(x326)+(x327)+(x322)+(x323)+(x328)+(x319)+(x318)+(x341));
IKReal x405=((0.00720000000000000)*(gconst3_4)*(rxp0_2));
IKReal x406=((0.00540000000000000)*(gconst5_5)*(pz));
IKReal x407=((0.0300000000000000)*(gconst2_5)*(pp)*(r22));
IKReal x408=((0.0600000000000000)*(gconst6_5)*(npy)*(pz));
IKReal x409=((0.00540000000000000)*(gconst4_5)*(rxp1_2));
IKReal x410=((0.00720000000000000)*(gconst5_4)*(pz));
IKReal x411=((0.0400000000000000)*(gconst7_4)*(pp)*(r20));
IKReal x412=((0.00720000000000000)*(gconst4_4)*(rxp1_2));
IKReal x413=((0.0400000000000000)*(gconst2_4)*(pp)*(r22));
IKReal x414=((0.00540000000000000)*(gconst3_5)*(rxp0_2));
IKReal x415=((0.000243000000000000)*(gconst2_5)*(r22));
IKReal x416=((0.000324000000000000)*(gconst2_4)*(r22));
IKReal x417=((0.0300000000000000)*(gconst7_5)*(pp)*(r20));
IKReal x418=((0.0800000000000000)*(x355));
IKReal x419=((0.000324000000000000)*(gconst6_4)*(r21));
IKReal x420=((0.000243000000000000)*(gconst6_5)*(r21));
IKReal x421=((0.0300000000000000)*(gconst6_5)*(pp)*(r21));
IKReal x422=((0.0400000000000000)*(gconst6_4)*(pp)*(r21));
IKReal x423=((0.0800000000000000)*(x343));
IKReal x424=((0.0600000000000000)*(gconst2_5)*(npz)*(pz));
IKReal x425=((0.000243000000000000)*(gconst7_5)*(r20));
IKReal x426=((0.000324000000000000)*(gconst7_4)*(r20));
IKReal x427=((0.0800000000000000)*(x349));
IKReal x428=((0.0600000000000000)*(gconst7_5)*(npx)*(pz));
IKReal x429=((0.0800000000000000)*(gconst6_6)*(pp)*(r21));
IKReal x430=((0.160000000000000)*(gconst2_6)*(npz)*(pz));
IKReal x431=((0.000648000000000000)*(gconst7_6)*(r20));
IKReal x432=((0.160000000000000)*(gconst7_6)*(npx)*(pz));
IKReal x433=((0.0800000000000000)*(gconst2_6)*(pp)*(r22));
IKReal x434=((0.0144000000000000)*(gconst3_6)*(rxp0_2));
IKReal x435=((0.000648000000000000)*(gconst6_6)*(r21));
IKReal x436=((0.0800000000000000)*(gconst7_6)*(pp)*(r20));
IKReal x437=((0.000648000000000000)*(gconst2_6)*(r22));
IKReal x438=((0.160000000000000)*(gconst6_6)*(npy)*(pz));
IKReal x439=((0.0144000000000000)*(gconst5_6)*(pz));
IKReal x440=((0.0144000000000000)*(gconst4_6)*(rxp1_2));
IKReal x441=((x324)+(x325)+(x320)+(x321)+(x322)+(x323)+(x319)+(x318));
op[0]=x30;
op[1]=0;
op[2]=x30;
op[3]=0;
op[4]=((((-1.00000000000000)*(x35)))+(x34));
op[5]=0;
op[6]=x33;
op[7]=0;
op[8]=x33;
op[9]=-0.0376000000000000;
op[10]=0;
op[11]=-0.0376000000000000;
op[12]=((((-1.00000000000000)*(x35)))+(((-1.00000000000000)*(x37)))+(x36)+(x34));
op[13]=0;
op[14]=((((-1.00000000000000)*(x34)))+(((-1.00000000000000)*(x37)))+(x36)+(x35));
op[15]=-0.0376000000000000;
op[16]=0;
op[17]=-0.0376000000000000;
op[18]=x39;
op[19]=0;
op[20]=x39;
op[21]=x42;
op[22]=((((-1.00000000000000)*(x34)))+(x35));
op[23]=x42;
op[24]=x44;
op[25]=0;
op[26]=x44;
op[27]=((-0.470000000000000)+(((-1.00000000000000)*(x47)))+(x45));
op[28]=0;
op[29]=((0.470000000000000)+(((-1.00000000000000)*(x47)))+(x45));
op[30]=0;
op[31]=((x49)+(((-1.00000000000000)*(x50))));
op[32]=0;
op[33]=((-0.470000000000000)+(((-1.00000000000000)*(x48)))+(x46));
op[34]=0;
op[35]=((0.470000000000000)+(((-1.00000000000000)*(x48)))+(x46));
op[36]=0.0400000000000000;
op[37]=0.880000000000000;
op[38]=-0.0400000000000000;
op[39]=((x49)+(x51)+(((-1.00000000000000)*(x52)))+(((-1.00000000000000)*(x50))));
op[40]=0;
op[41]=((((-1.00000000000000)*(x49)))+(x51)+(x50)+(((-1.00000000000000)*(x52))));
op[42]=0.0400000000000000;
op[43]=0.880000000000000;
op[44]=-0.0400000000000000;
op[45]=((-0.0300000000000000)+(((-1.00000000000000)*(x47)))+(x45));
op[46]=-0.0800000000000000;
op[47]=((0.0300000000000000)+(((-1.00000000000000)*(x47)))+(x45));
op[48]=x55;
op[49]=((((-1.00000000000000)*(x49)))+(x50));
op[50]=x55;
op[51]=((-0.0300000000000000)+(((-1.00000000000000)*(x48)))+(x46));
op[52]=-0.0800000000000000;
op[53]=((0.0300000000000000)+(((-1.00000000000000)*(x48)))+(x46));
op[54]=x59;
op[55]=-0.940000000000000;
op[56]=x59;
op[57]=-0.170000000000000;
op[58]=((-1.00000000000000)*(x64));
op[59]=0.170000000000000;
op[60]=x61;
op[61]=0.940000000000000;
op[62]=x61;
op[63]=-0.440000000000000;
op[64]=0.0800000000000000;
op[65]=0.440000000000000;
op[66]=((x65)+(x66)+(((-1.00000000000000)*(x64))));
op[67]=0.680000000000000;
op[68]=((x64)+(x65)+(x66));
op[69]=0.440000000000000;
op[70]=-0.0800000000000000;
op[71]=-0.440000000000000;
op[72]=((0.0400000000000000)+(x59));
op[73]=-0.0600000000000000;
op[74]=((-0.0400000000000000)+(x59));
op[75]=((0.170000000000000)+(((-1.00000000000000)*(x69))));
op[76]=x64;
op[77]=((-0.170000000000000)+(((-1.00000000000000)*(x69))));
op[78]=((-0.0400000000000000)+(x58)+(((-1.00000000000000)*(x60))));
op[79]=0.0600000000000000;
op[80]=((0.0400000000000000)+(x58)+(((-1.00000000000000)*(x60))));
op[81]=((0.0799000000000000)+(((-1.00000000000000)*(x77)))+(x73)+(x72)+(x71)+(x70));
op[82]=0;
op[83]=((-0.0799000000000000)+(((-1.00000000000000)*(x77)))+(x73)+(x72)+(x71)+(x70));
op[84]=0;
op[85]=((-0.912500000000000)+(x79)+(x80)+(((-1.00000000000000)*(x84)))+(((-1.00000000000000)*(x81)))+(((-1.00000000000000)*(x83)))+(((-1.00000000000000)*(x82))));
op[86]=0;
op[87]=((-0.0799000000000000)+(((-1.00000000000000)*(x78)))+(x76)+(x74));
op[88]=0;
op[89]=((0.0799000000000000)+(((-1.00000000000000)*(x78)))+(x76)+(x74));
op[90]=-0.00680000000000000;
op[91]=-0.149600000000000;
op[92]=0.00680000000000000;
op[93]=((0.0275000000000000)+(x79)+(x88)+(x80)+(x86)+(x87)+(x85)+(((-1.00000000000000)*(x90)))+(((-1.00000000000000)*(x89)))+(((-1.00000000000000)*(x84)))+(((-1.00000000000000)*(x81)))+(((-1.00000000000000)*(x83)))+(((-1.00000000000000)*(x82))));
op[94]=0.150400000000000;
op[95]=((-0.0275000000000000)+(((-1.00000000000000)*(x79)))+(x88)+(x82)+(x83)+(x81)+(x86)+(x87)+(x84)+(x85)+(((-1.00000000000000)*(x90)))+(((-1.00000000000000)*(x89)))+(((-1.00000000000000)*(x80))));
op[96]=0.00680000000000000;
op[97]=0.149600000000000;
op[98]=-0.00680000000000000;
op[99]=((0.00510000000000000)+(((-1.00000000000000)*(x77)))+(x73)+(x72)+(x71)+(x70));
op[100]=0.0136000000000000;
op[101]=((-0.00510000000000000)+(((-1.00000000000000)*(x77)))+(x73)+(x72)+(x71)+(x70));
op[102]=((-0.00480000000000000)+(x91)+(x92)+(((-1.00000000000000)*(x97))));
op[103]=((0.0261000000000000)+(((-1.00000000000000)*(x79)))+(x82)+(x83)+(x81)+(x84)+(((-1.00000000000000)*(x80))));
op[104]=((0.00480000000000000)+(x91)+(x92)+(((-1.00000000000000)*(x97))));
op[105]=((-0.00510000000000000)+(((-1.00000000000000)*(x78)))+(x76)+(x74));
op[106]=-0.0136000000000000;
op[107]=((0.00510000000000000)+(((-1.00000000000000)*(x78)))+(x76)+(x74));
op[108]=((((-1.00000000000000)*(x109)))+(((-1.00000000000000)*(x100)))+(((-1.00000000000000)*(x107)))+(((-1.00000000000000)*(x106)))+(((-1.00000000000000)*(x103)))+(((-1.00000000000000)*(x102)))+(((-1.00000000000000)*(x111)))+(((-1.00000000000000)*(x112)))+(((-1.00000000000000)*(x114)))+(((-1.00000000000000)*(x117)))+(((-1.00000000000000)*(x123)))+(((-1.00000000000000)*(x128)))+(((-1.00000000000000)*(x125)))+(((-1.00000000000000)*(x124)))+(x131)+(x133)+(x132)+(x126)+(x127)+(x122)+(x120)+(x121)+(x129)+(x113)+(x110)+(x116)+(x115)+(x119)+(x118)+(x108)+(x104)+(x105)+(x101)+(((-1.00000000000000)*(x130)))+(((-1.00000000000000)*(x98)))+(((-1.00000000000000)*(x99))));
op[109]=((0.456250000000000)+(((-1.00000000000000)*(x149)))+(((-1.00000000000000)*(x157)))+(((-1.00000000000000)*(x150)))+(((-1.00000000000000)*(x152)))+(((-1.00000000000000)*(x154)))+(((-1.00000000000000)*(x155)))+(((-1.00000000000000)*(x158)))+(((-1.00000000000000)*(x159)))+(((-1.00000000000000)*(x168)))+(((-1.00000000000000)*(x166)))+(((-1.00000000000000)*(x160)))+(((-1.00000000000000)*(x170)))+(x169)+(x162)+(x163)+(x161)+(x167)+(x164)+(x165)+(x156)+(x153)+(x151)+(x147)+(x148));
op[110]=((((-1.00000000000000)*(x113)))+(((-1.00000000000000)*(x114)))+(((-1.00000000000000)*(x115)))+(((-1.00000000000000)*(x116)))+(((-1.00000000000000)*(x117)))+(((-1.00000000000000)*(x118)))+(((-1.00000000000000)*(x119)))+(((-1.00000000000000)*(x121)))+(((-1.00000000000000)*(x120)))+(((-1.00000000000000)*(x123)))+(((-1.00000000000000)*(x122)))+(((-1.00000000000000)*(x129)))+(((-1.00000000000000)*(x128)))+(((-1.00000000000000)*(x125)))+(((-1.00000000000000)*(x124)))+(((-1.00000000000000)*(x127)))+(((-1.00000000000000)*(x126)))+(x112)+(x111)+(x110)+(x108)+(x109)+(x104)+(x105)+(x106)+(x107)+(x100)+(x101)+(x102)+(x103)+(((-1.00000000000000)*(x132)))+(((-1.00000000000000)*(x133)))+(((-1.00000000000000)*(x130)))+(((-1.00000000000000)*(x131)))+(x99)+(x98));
op[111]=((0.159800000000000)+(((-1.00000000000000)*(x146)))+(x140)+(x135)+(x134)+(x137)+(x136)+(x139)+(x138));
op[112]=((((-1.88000000000000)*(gconst3_6)*(pp)*(r21)))+(((3.76000000000000)*(gconst3_6)*(npy)*(pz)))+(((0.338400000000000)*(gconst2_6)*(pz)))+(((-0.338400000000000)*(gconst6_6)*(rxp0_2)))+(((0.0152280000000000)*(gconst3_6)*(r21)))+(((-0.0152280000000000)*(gconst4_6)*(r20)))+(((-1.88000000000000)*(gconst5_6)*(pp)*(r22)))+(((-0.0152280000000000)*(gconst5_6)*(r22)))+(((-3.76000000000000)*(gconst4_6)*(npx)*(pz)))+(((3.76000000000000)*(gconst5_6)*(npz)*(pz)))+(((1.88000000000000)*(gconst4_6)*(pp)*(r20)))+(((-0.338400000000000)*(gconst7_6)*(rxp1_2))));
op[113]=((-0.159800000000000)+(((-1.00000000000000)*(x146)))+(x140)+(x135)+(x134)+(x137)+(x136)+(x139)+(x138));
op[114]=((((-1.00000000000000)*(x107)))+(((-1.00000000000000)*(x106)))+(((-1.00000000000000)*(x103)))+(((-1.00000000000000)*(x111)))+(((-1.00000000000000)*(x114)))+(((-1.00000000000000)*(x115)))+(((-1.00000000000000)*(x116)))+(((-1.00000000000000)*(x117)))+(((-1.00000000000000)*(x119)))+(((-1.00000000000000)*(x123)))+(((-1.00000000000000)*(x129)))+(((-1.00000000000000)*(x128)))+(((-1.00000000000000)*(x125)))+(((-1.00000000000000)*(x124)))+(((-1.00000000000000)*(x126)))+(x131)+(x127)+(x122)+(x120)+(x121)+(x113)+(x112)+(x110)+(x118)+(x108)+(x109)+(x104)+(x105)+(x100)+(x101)+(x102)+(((-1.00000000000000)*(x132)))+(((-1.00000000000000)*(x133)))+(((-1.00000000000000)*(x130)))+(x98)+(((-1.00000000000000)*(x99))));
op[115]=((-0.456250000000000)+(((-1.00000000000000)*(x157)))+(((-1.00000000000000)*(x158)))+(((-1.00000000000000)*(x159)))+(((-1.00000000000000)*(x162)))+(((-1.00000000000000)*(x169)))+(((-1.00000000000000)*(x168)))+(((-1.00000000000000)*(x165)))+(((-1.00000000000000)*(x164)))+(((-1.00000000000000)*(x167)))+(((-1.00000000000000)*(x166)))+(((-1.00000000000000)*(x161)))+(((-1.00000000000000)*(x160)))+(((-1.00000000000000)*(x163)))+(((-1.00000000000000)*(x170)))+(x156)+(x155)+(x154)+(x153)+(x152)+(x151)+(x150)+(x147)+(x148)+(x149));
op[116]=((((-1.00000000000000)*(x109)))+(((-1.00000000000000)*(x100)))+(((-1.00000000000000)*(x102)))+(((-1.00000000000000)*(x112)))+(((-1.00000000000000)*(x113)))+(((-1.00000000000000)*(x114)))+(((-1.00000000000000)*(x117)))+(((-1.00000000000000)*(x118)))+(((-1.00000000000000)*(x121)))+(((-1.00000000000000)*(x120)))+(((-1.00000000000000)*(x123)))+(((-1.00000000000000)*(x122)))+(((-1.00000000000000)*(x128)))+(((-1.00000000000000)*(x125)))+(((-1.00000000000000)*(x124)))+(((-1.00000000000000)*(x127)))+(x133)+(x132)+(x126)+(x129)+(x111)+(x110)+(x116)+(x115)+(x119)+(x108)+(x104)+(x105)+(x106)+(x107)+(x101)+(x103)+(((-1.00000000000000)*(x130)))+(((-1.00000000000000)*(x131)))+(x99)+(((-1.00000000000000)*(x98))));
op[117]=((-0.0137500000000000)+(((-1.00000000000000)*(x149)))+(((-1.00000000000000)*(x157)))+(((-1.00000000000000)*(x150)))+(((-1.00000000000000)*(x152)))+(((-1.00000000000000)*(x154)))+(((-1.00000000000000)*(x155)))+(((-1.00000000000000)*(x158)))+(((-1.00000000000000)*(x159)))+(((-1.00000000000000)*(x168)))+(((-1.00000000000000)*(x166)))+(((-1.00000000000000)*(x160)))+(((-1.00000000000000)*(x170)))+(((-1.00000000000000)*(x187)))+(((-1.00000000000000)*(x186)))+(((-1.00000000000000)*(x185)))+(((-1.00000000000000)*(x184)))+(((-1.00000000000000)*(x183)))+(((-1.00000000000000)*(x189)))+(((-1.00000000000000)*(x188)))+(((-1.00000000000000)*(x193)))+(((-1.00000000000000)*(x194)))+(((-1.00000000000000)*(x190)))+(((-1.00000000000000)*(x191)))+(((-1.00000000000000)*(x192)))+(x179)+(x178)+(x171)+(x173)+(x172)+(x175)+(x174)+(x177)+(x176)+(x169)+(x162)+(x163)+(x161)+(x167)+(x164)+(x165)+(x156)+(x153)+(x151)+(x147)+(x148)+(x180)+(x181)+(x182));
op[118]=((-0.0752000000000000)+(((-1.00000000000000)*(x209)))+(((-1.00000000000000)*(x230)))+(x210)+(x213)+(x214)+(x221)+(x220)+(x222)+(x227)+(x226)+(x207)+(x208)+(((-1.00000000000000)*(x212)))+(((-1.00000000000000)*(x211)))+(((-1.00000000000000)*(x219)))+(((-1.00000000000000)*(x218)))+(((-1.00000000000000)*(x217)))+(((-1.00000000000000)*(x216)))+(((-1.00000000000000)*(x215)))+(((-1.00000000000000)*(x228)))+(((-1.00000000000000)*(x229)))+(((-1.00000000000000)*(x223)))+(((-1.00000000000000)*(x224)))+(((-1.00000000000000)*(x225))));
op[119]=((0.0137500000000000)+(((-1.00000000000000)*(x148)))+(((-1.00000000000000)*(x147)))+(((-1.00000000000000)*(x151)))+(((-1.00000000000000)*(x153)))+(((-1.00000000000000)*(x156)))+(((-1.00000000000000)*(x162)))+(((-1.00000000000000)*(x169)))+(((-1.00000000000000)*(x165)))+(((-1.00000000000000)*(x164)))+(((-1.00000000000000)*(x167)))+(((-1.00000000000000)*(x161)))+(((-1.00000000000000)*(x163)))+(((-1.00000000000000)*(x187)))+(((-1.00000000000000)*(x186)))+(((-1.00000000000000)*(x185)))+(((-1.00000000000000)*(x184)))+(((-1.00000000000000)*(x183)))+(((-1.00000000000000)*(x189)))+(((-1.00000000000000)*(x188)))+(((-1.00000000000000)*(x193)))+(((-1.00000000000000)*(x194)))+(((-1.00000000000000)*(x190)))+(((-1.00000000000000)*(x191)))+(((-1.00000000000000)*(x192)))+(x179)+(x178)+(x171)+(x170)+(x173)+(x172)+(x175)+(x174)+(x177)+(x176)+(x168)+(x160)+(x166)+(x157)+(x155)+(x154)+(x152)+(x150)+(x159)+(x158)+(x149)+(x180)+(x181)+(x182));
op[120]=((-0.0136000000000000)+(((-1.00000000000000)*(x198)))+(((-1.00000000000000)*(x199)))+(((-1.00000000000000)*(x195)))+(((-1.00000000000000)*(x196)))+(((-1.00000000000000)*(x197)))+(((-1.00000000000000)*(x200)))+(((-1.00000000000000)*(x201)))+(x206)+(x205)+(x204)+(x203)+(x202));
op[121]=((-0.299200000000000)+(((0.0288000000000000)*(gconst7_6)*(rxp1_2)))+(((-0.0288000000000000)*(gconst2_6)*(pz)))+(((0.00129600000000000)*(gconst5_6)*(r22)))+(((0.160000000000000)*(gconst5_6)*(pp)*(r22)))+(((-0.00129600000000000)*(gconst3_6)*(r21)))+(((-0.160000000000000)*(gconst4_6)*(pp)*(r20)))+(((0.320000000000000)*(gconst4_6)*(npx)*(pz)))+(((0.0288000000000000)*(gconst6_6)*(rxp0_2)))+(((0.160000000000000)*(gconst3_6)*(pp)*(r21)))+(((0.00129600000000000)*(gconst4_6)*(r20)))+(((-0.320000000000000)*(gconst5_6)*(npz)*(pz)))+(((-0.320000000000000)*(gconst3_6)*(npy)*(pz))));
op[122]=((0.0136000000000000)+(x199)+(x198)+(x197)+(x196)+(x195)+(((-1.00000000000000)*(x205)))+(((-1.00000000000000)*(x206)))+(((-1.00000000000000)*(x202)))+(((-1.00000000000000)*(x203)))+(((-1.00000000000000)*(x204)))+(x201)+(x200));
op[123]=((0.0137500000000000)+(((-1.00000000000000)*(x157)))+(((-1.00000000000000)*(x158)))+(((-1.00000000000000)*(x159)))+(((-1.00000000000000)*(x162)))+(((-1.00000000000000)*(x169)))+(((-1.00000000000000)*(x168)))+(((-1.00000000000000)*(x165)))+(((-1.00000000000000)*(x164)))+(((-1.00000000000000)*(x167)))+(((-1.00000000000000)*(x166)))+(((-1.00000000000000)*(x161)))+(((-1.00000000000000)*(x160)))+(((-1.00000000000000)*(x163)))+(((-1.00000000000000)*(x178)))+(((-1.00000000000000)*(x170)))+(((-1.00000000000000)*(x171)))+(((-1.00000000000000)*(x174)))+(((-1.00000000000000)*(x180)))+(((-1.00000000000000)*(x184)))+(((-1.00000000000000)*(x181)))+(((-1.00000000000000)*(x188)))+(((-1.00000000000000)*(x193)))+(((-1.00000000000000)*(x190)))+(((-1.00000000000000)*(x191)))+(x179)+(x173)+(x172)+(x175)+(x177)+(x176)+(x156)+(x155)+(x154)+(x153)+(x152)+(x151)+(x150)+(x147)+(x148)+(x149)+(x192)+(x194)+(x185)+(x186)+(x187)+(x182)+(x183)+(x189));
op[124]=((0.0752000000000000)+(((-1.00000000000000)*(x230)))+(x210)+(x211)+(x212)+(x213)+(x214)+(x215)+(x216)+(x217)+(x218)+(x207)+(x209)+(x208)+(((-1.00000000000000)*(x219)))+(((-1.00000000000000)*(x228)))+(((-1.00000000000000)*(x229)))+(((-1.00000000000000)*(x223)))+(((-1.00000000000000)*(x220)))+(((-1.00000000000000)*(x221)))+(((-1.00000000000000)*(x226)))+(((-1.00000000000000)*(x227)))+(((-1.00000000000000)*(x224)))+(((-1.00000000000000)*(x225)))+(((-1.00000000000000)*(x222))));
op[125]=((-0.0137500000000000)+(((-1.00000000000000)*(x149)))+(((-1.00000000000000)*(x148)))+(((-1.00000000000000)*(x147)))+(((-1.00000000000000)*(x150)))+(((-1.00000000000000)*(x151)))+(((-1.00000000000000)*(x152)))+(((-1.00000000000000)*(x153)))+(((-1.00000000000000)*(x154)))+(((-1.00000000000000)*(x155)))+(((-1.00000000000000)*(x156)))+(((-1.00000000000000)*(x178)))+(((-1.00000000000000)*(x171)))+(((-1.00000000000000)*(x174)))+(((-1.00000000000000)*(x180)))+(((-1.00000000000000)*(x184)))+(((-1.00000000000000)*(x181)))+(((-1.00000000000000)*(x188)))+(((-1.00000000000000)*(x193)))+(((-1.00000000000000)*(x190)))+(((-1.00000000000000)*(x191)))+(x179)+(x170)+(x173)+(x172)+(x175)+(x177)+(x176)+(x168)+(x169)+(x162)+(x163)+(x160)+(x161)+(x166)+(x167)+(x164)+(x165)+(x157)+(x159)+(x158)+(x192)+(x194)+(x185)+(x186)+(x187)+(x182)+(x183)+(x189));
op[126]=((0.00240000000000000)+(((-1.00000000000000)*(x113)))+(((-1.00000000000000)*(x115)))+(((-1.00000000000000)*(x116)))+(((-1.00000000000000)*(x118)))+(((-1.00000000000000)*(x119)))+(((-1.00000000000000)*(x121)))+(((-1.00000000000000)*(x120)))+(((-1.00000000000000)*(x122)))+(((-1.00000000000000)*(x129)))+(((-1.00000000000000)*(x127)))+(((-1.00000000000000)*(x126)))+(x112)+(x111)+(x109)+(x106)+(x107)+(x100)+(x102)+(x103)+(((-1.00000000000000)*(x132)))+(((-1.00000000000000)*(x133)))+(((-1.00000000000000)*(x131)))+(x238)+(x239)+(x232)+(x233)+(x231)+(x236)+(x237)+(x234)+(x235)+(x243)+(x242)+(x241)+(x240)+(x244)+(x99)+(x98)+(((-1.00000000000000)*(x249)))+(((-1.00000000000000)*(x245)))+(((-1.00000000000000)*(x246)))+(((-1.00000000000000)*(x247)))+(((-1.00000000000000)*(x248)))+(((-1.00000000000000)*(x251)))+(((-1.00000000000000)*(x250)))+(((-1.00000000000000)*(x254)))+(((-1.00000000000000)*(x253)))+(((-1.00000000000000)*(x252))));
op[127]=((-0.0130500000000000)+(((-1.00000000000000)*(x148)))+(((-1.00000000000000)*(x147)))+(((-1.00000000000000)*(x151)))+(((-1.00000000000000)*(x153)))+(((-1.00000000000000)*(x156)))+(((-1.00000000000000)*(x162)))+(((-1.00000000000000)*(x169)))+(((-1.00000000000000)*(x165)))+(((-1.00000000000000)*(x164)))+(((-1.00000000000000)*(x167)))+(((-1.00000000000000)*(x161)))+(((-1.00000000000000)*(x163)))+(x170)+(x168)+(x160)+(x166)+(x157)+(x155)+(x154)+(x152)+(x150)+(x159)+(x158)+(x149));
op[128]=((-0.00240000000000000)+(((-1.00000000000000)*(x109)))+(((-1.00000000000000)*(x100)))+(((-1.00000000000000)*(x107)))+(((-1.00000000000000)*(x106)))+(((-1.00000000000000)*(x103)))+(((-1.00000000000000)*(x102)))+(((-1.00000000000000)*(x111)))+(((-1.00000000000000)*(x112)))+(x131)+(x133)+(x132)+(x126)+(x127)+(x122)+(x120)+(x121)+(x129)+(x113)+(x116)+(x115)+(x119)+(x118)+(x238)+(x239)+(x232)+(x233)+(x231)+(x236)+(x237)+(x234)+(x235)+(x243)+(x242)+(x241)+(x240)+(x244)+(((-1.00000000000000)*(x98)))+(((-1.00000000000000)*(x99)))+(((-1.00000000000000)*(x249)))+(((-1.00000000000000)*(x245)))+(((-1.00000000000000)*(x246)))+(((-1.00000000000000)*(x247)))+(((-1.00000000000000)*(x248)))+(((-1.00000000000000)*(x251)))+(((-1.00000000000000)*(x250)))+(((-1.00000000000000)*(x254)))+(((-1.00000000000000)*(x253)))+(((-1.00000000000000)*(x252))));
op[129]=((0.0102000000000000)+(((-1.00000000000000)*(x146)))+(x140)+(x135)+(x134)+(x137)+(x136)+(x139)+(x138)+(x265)+(x264)+(x266)+(x261)+(x260)+(x263)+(x262)+(((-1.00000000000000)*(x259)))+(((-1.00000000000000)*(x258)))+(((-1.00000000000000)*(x257)))+(((-1.00000000000000)*(x256)))+(((-1.00000000000000)*(x255))));
op[130]=((0.0272000000000000)+(((-0.000972000000000000)*(gconst4_6)*(r20)))+(((0.120000000000000)*(gconst4_6)*(pp)*(r20)))+(((0.240000000000000)*(gconst5_6)*(npz)*(pz)))+(((-0.0216000000000000)*(gconst7_6)*(rxp1_2)))+(((-0.240000000000000)*(gconst4_6)*(npx)*(pz)))+(((-0.0216000000000000)*(gconst6_6)*(rxp0_2)))+(((-0.120000000000000)*(gconst5_6)*(pp)*(r22)))+(((0.0216000000000000)*(gconst2_6)*(pz)))+(((-0.120000000000000)*(gconst3_6)*(pp)*(r21)))+(((0.000972000000000000)*(gconst3_6)*(r21)))+(((-0.000972000000000000)*(gconst5_6)*(r22)))+(((0.240000000000000)*(gconst3_6)*(npy)*(pz))));
op[131]=((-0.0102000000000000)+(((-1.00000000000000)*(x146)))+(x140)+(x135)+(x134)+(x137)+(x136)+(x139)+(x138)+(x258)+(x259)+(x255)+(x256)+(x257)+(((-1.00000000000000)*(x264)))+(((-1.00000000000000)*(x265)))+(((-1.00000000000000)*(x262)))+(((-1.00000000000000)*(x263)))+(((-1.00000000000000)*(x260)))+(((-1.00000000000000)*(x261)))+(((-1.00000000000000)*(x266))));
op[132]=((-0.00240000000000000)+(((-1.00000000000000)*(x109)))+(((-1.00000000000000)*(x100)))+(((-1.00000000000000)*(x102)))+(((-1.00000000000000)*(x112)))+(((-1.00000000000000)*(x113)))+(((-1.00000000000000)*(x118)))+(((-1.00000000000000)*(x121)))+(((-1.00000000000000)*(x120)))+(((-1.00000000000000)*(x122)))+(((-1.00000000000000)*(x127)))+(x133)+(x132)+(x126)+(x129)+(x111)+(x116)+(x115)+(x119)+(x106)+(x107)+(x103)+(((-1.00000000000000)*(x131)))+(((-1.00000000000000)*(x233)))+(((-1.00000000000000)*(x235)))+(((-1.00000000000000)*(x234)))+(((-1.00000000000000)*(x236)))+(x254)+(x250)+(x252)+(x238)+(x239)+(x232)+(x231)+(x237)+(x240)+(x246)+(x244)+(x249)+(x99)+(((-1.00000000000000)*(x98)))+(((-1.00000000000000)*(x241)))+(((-1.00000000000000)*(x242)))+(((-1.00000000000000)*(x243)))+(((-1.00000000000000)*(x245)))+(((-1.00000000000000)*(x247)))+(((-1.00000000000000)*(x248)))+(((-1.00000000000000)*(x251)))+(((-1.00000000000000)*(x253))));
op[133]=((0.0130500000000000)+(((-1.00000000000000)*(x149)))+(((-1.00000000000000)*(x148)))+(((-1.00000000000000)*(x147)))+(((-1.00000000000000)*(x150)))+(((-1.00000000000000)*(x151)))+(((-1.00000000000000)*(x152)))+(((-1.00000000000000)*(x153)))+(((-1.00000000000000)*(x154)))+(((-1.00000000000000)*(x155)))+(((-1.00000000000000)*(x156)))+(x170)+(x168)+(x169)+(x162)+(x163)+(x160)+(x161)+(x166)+(x167)+(x164)+(x165)+(x157)+(x159)+(x158));
op[134]=((0.00240000000000000)+(((-1.00000000000000)*(x107)))+(((-1.00000000000000)*(x106)))+(((-1.00000000000000)*(x103)))+(((-1.00000000000000)*(x111)))+(((-1.00000000000000)*(x115)))+(((-1.00000000000000)*(x116)))+(((-1.00000000000000)*(x119)))+(((-1.00000000000000)*(x129)))+(((-1.00000000000000)*(x126)))+(x131)+(x127)+(x122)+(x120)+(x121)+(x113)+(x112)+(x118)+(x109)+(x100)+(x102)+(((-1.00000000000000)*(x132)))+(((-1.00000000000000)*(x133)))+(((-1.00000000000000)*(x233)))+(((-1.00000000000000)*(x235)))+(((-1.00000000000000)*(x234)))+(((-1.00000000000000)*(x236)))+(x254)+(x250)+(x252)+(x238)+(x239)+(x232)+(x231)+(x237)+(x240)+(x246)+(x244)+(x249)+(x98)+(((-1.00000000000000)*(x99)))+(((-1.00000000000000)*(x241)))+(((-1.00000000000000)*(x242)))+(((-1.00000000000000)*(x243)))+(((-1.00000000000000)*(x245)))+(((-1.00000000000000)*(x247)))+(((-1.00000000000000)*(x248)))+(((-1.00000000000000)*(x251)))+(((-1.00000000000000)*(x253))));
op[135]=((-0.213675000000000)+(((-1.00000000000000)*(x292)))+(((-1.00000000000000)*(x290)))+(((-1.00000000000000)*(x297)))+(((-1.00000000000000)*(x296)))+(x302)+(x298)+(x299)+(x291)+(x293)+(x294)+(x295)+(x267)+(x269)+(x268)+(x275)+(x289)+(x288)+(x287)+(x286)+(x285)+(x284)+(x283)+(x281)+(x280)+(((-1.00000000000000)*(x274)))+(((-1.00000000000000)*(x277)))+(((-1.00000000000000)*(x276)))+(((-1.00000000000000)*(x271)))+(((-1.00000000000000)*(x270)))+(((-1.00000000000000)*(x273)))+(((-1.00000000000000)*(x272)))+(((-1.00000000000000)*(x279)))+(((-1.00000000000000)*(x278)))+(((-1.00000000000000)*(x282)))+(((-1.00000000000000)*(x301)))+(((-1.00000000000000)*(x300))));
op[136]=((((-1.00000000000000)*(x320)))+(((-1.00000000000000)*(x325)))+(((-1.00000000000000)*(x324)))+(((-1.00000000000000)*(x321)))+(((-1.00000000000000)*(x329)))+(x404)+(((-1.00000000000000)*(x338)))+(((-1.00000000000000)*(x339)))+(((-1.00000000000000)*(x334)))+(((-1.00000000000000)*(x336)))+(((-1.00000000000000)*(x337)))+(((-1.00000000000000)*(x331)))+(((-1.00000000000000)*(x340))));
op[137]=((0.213675000000000)+(((-1.00000000000000)*(x299)))+(((-1.00000000000000)*(x298)))+(((-1.00000000000000)*(x295)))+(((-1.00000000000000)*(x294)))+(((-1.00000000000000)*(x293)))+(((-1.00000000000000)*(x292)))+(((-1.00000000000000)*(x291)))+(((-1.00000000000000)*(x290)))+(((-1.00000000000000)*(x297)))+(((-1.00000000000000)*(x296)))+(x267)+(x269)+(x268)+(x276)+(x277)+(x274)+(x275)+(x272)+(x273)+(x270)+(x271)+(x278)+(((-1.00000000000000)*(x279)))+(((-1.00000000000000)*(x280)))+(((-1.00000000000000)*(x281)))+(((-1.00000000000000)*(x282)))+(((-1.00000000000000)*(x283)))+(((-1.00000000000000)*(x284)))+(((-1.00000000000000)*(x285)))+(((-1.00000000000000)*(x286)))+(((-1.00000000000000)*(x287)))+(((-1.00000000000000)*(x288)))+(((-1.00000000000000)*(x289)))+(((-1.00000000000000)*(x301)))+(((-1.00000000000000)*(x300)))+(((-1.00000000000000)*(x302))));
op[138]=x317;
op[139]=((((-3.76000000000000)*(gconst6_6)*(npy)*(pz)))+(((-1.88000000000000)*(gconst7_6)*(pp)*(r20)))+(((-0.0152280000000000)*(gconst6_6)*(r21)))+(((1.88000000000000)*(gconst6_6)*(pp)*(r21)))+(((3.76000000000000)*(gconst7_6)*(npx)*(pz)))+(((-0.0152280000000000)*(gconst2_6)*(r22)))+(((0.0152280000000000)*(gconst7_6)*(r20)))+(((3.76000000000000)*(gconst2_6)*(npz)*(pz)))+(((-0.338400000000000)*(gconst5_6)*(pz)))+(((-0.338400000000000)*(gconst4_6)*(rxp1_2)))+(((-0.338400000000000)*(gconst3_6)*(rxp0_2)))+(((-1.88000000000000)*(gconst2_6)*(pp)*(r22))));
op[140]=x317;
op[141]=((-0.213675000000000)+(((-1.00000000000000)*(x299)))+(((-1.00000000000000)*(x298)))+(((-1.00000000000000)*(x295)))+(((-1.00000000000000)*(x292)))+(((-1.00000000000000)*(x291)))+(((-1.00000000000000)*(x290)))+(((-1.00000000000000)*(x297)))+(((-1.00000000000000)*(x296)))+(x302)+(x293)+(x294)+(x267)+(x269)+(x268)+(x276)+(x277)+(x275)+(x272)+(x271)+(x288)+(x286)+(x284)+(x283)+(x281)+(((-1.00000000000000)*(x274)))+(((-1.00000000000000)*(x270)))+(((-1.00000000000000)*(x273)))+(((-1.00000000000000)*(x279)))+(((-1.00000000000000)*(x278)))+(((-1.00000000000000)*(x280)))+(((-1.00000000000000)*(x282)))+(((-1.00000000000000)*(x285)))+(((-1.00000000000000)*(x287)))+(((-1.00000000000000)*(x289)))+(((-1.00000000000000)*(x301)))+(((-1.00000000000000)*(x300))));
op[142]=((((-1.00000000000000)*(x327)))+(((-1.00000000000000)*(x326)))+(((-1.00000000000000)*(x329)))+(((-1.00000000000000)*(x328)))+(x441)+(((-1.00000000000000)*(x333)))+(((-1.00000000000000)*(x338)))+(((-1.00000000000000)*(x339)))+(((-1.00000000000000)*(x334)))+(((-1.00000000000000)*(x335)))+(((-1.00000000000000)*(x336)))+(((-1.00000000000000)*(x337)))+(((-1.00000000000000)*(x330)))+(((-1.00000000000000)*(x331)))+(((-1.00000000000000)*(x332)))+(((-1.00000000000000)*(x340)))+(((-1.00000000000000)*(x341))));
op[143]=((0.213675000000000)+(((-1.00000000000000)*(x294)))+(((-1.00000000000000)*(x293)))+(((-1.00000000000000)*(x292)))+(((-1.00000000000000)*(x290)))+(((-1.00000000000000)*(x297)))+(((-1.00000000000000)*(x296)))+(x298)+(x299)+(x291)+(x295)+(x267)+(x269)+(x268)+(x274)+(x275)+(x273)+(x270)+(x278)+(x289)+(x287)+(x285)+(x280)+(((-1.00000000000000)*(x277)))+(((-1.00000000000000)*(x276)))+(((-1.00000000000000)*(x271)))+(((-1.00000000000000)*(x272)))+(((-1.00000000000000)*(x279)))+(((-1.00000000000000)*(x281)))+(((-1.00000000000000)*(x282)))+(((-1.00000000000000)*(x283)))+(((-1.00000000000000)*(x284)))+(((-1.00000000000000)*(x286)))+(((-1.00000000000000)*(x288)))+(((-1.00000000000000)*(x301)))+(((-1.00000000000000)*(x300)))+(((-1.00000000000000)*(x302))));
op[144]=((0.0376000000000000)+(((-1.00000000000000)*(x365)))+(((-1.00000000000000)*(x364)))+(((-1.00000000000000)*(x363)))+(((-1.00000000000000)*(x362)))+(((-1.00000000000000)*(x361)))+(((-1.00000000000000)*(x360)))+(((-1.00000000000000)*(x358)))+(((-1.00000000000000)*(x359)))+(((-1.00000000000000)*(x356)))+(((-1.00000000000000)*(x357)))+(((-1.00000000000000)*(x354)))+(((-1.00000000000000)*(x355)))+(((-1.00000000000000)*(x320)))+(((-1.00000000000000)*(x325)))+(((-1.00000000000000)*(x324)))+(((-1.00000000000000)*(x321)))+(((-1.00000000000000)*(x329)))+(x351)+(x350)+(x353)+(x352)+(x342)+(x343)+(x346)+(x347)+(x344)+(x345)+(x348)+(x349)+(x404)+(((-1.00000000000000)*(x338)))+(((-1.00000000000000)*(x339)))+(((-1.00000000000000)*(x334)))+(((-1.00000000000000)*(x336)))+(((-1.00000000000000)*(x337)))+(((-1.00000000000000)*(x331)))+(((-1.00000000000000)*(x340))));
op[145]=((-0.0853000000000000)+(((-1.00000000000000)*(x392)))+(((-1.00000000000000)*(x393)))+(((-1.00000000000000)*(x391)))+(((-1.00000000000000)*(x396)))+(((-1.00000000000000)*(x397)))+(((-1.00000000000000)*(x398)))+(x387)+(x380)+(x381)+(x395)+(x394)+(x390)+(x399)+(x403)+(((-1.00000000000000)*(x383)))+(((-1.00000000000000)*(x382)))+(((-1.00000000000000)*(x385)))+(((-1.00000000000000)*(x384)))+(((-1.00000000000000)*(x386)))+(((-1.00000000000000)*(x389)))+(((-1.00000000000000)*(x388)))+(((-1.00000000000000)*(x402)))+(((-1.00000000000000)*(x400)))+(((-1.00000000000000)*(x401))));
op[146]=((-0.0376000000000000)+(((-1.00000000000000)*(x365)))+(((-1.00000000000000)*(x364)))+(((-1.00000000000000)*(x363)))+(((-1.00000000000000)*(x362)))+(((-1.00000000000000)*(x361)))+(((-1.00000000000000)*(x360)))+(((-1.00000000000000)*(x358)))+(((-1.00000000000000)*(x359)))+(((-1.00000000000000)*(x356)))+(((-1.00000000000000)*(x357)))+(((-1.00000000000000)*(x354)))+(((-1.00000000000000)*(x355)))+(x339)+(x338)+(x331)+(x337)+(x336)+(x334)+(x324)+(x325)+(x320)+(x321)+(x329)+(x351)+(x350)+(x353)+(x352)+(x342)+(x343)+(x340)+(x346)+(x347)+(x344)+(x345)+(x348)+(x349)+(((-1.00000000000000)*(x404))));
op[147]=((((-1.00000000000000)*(x374)))+(x379));
op[148]=((((-0.160000000000000)*(gconst6_6)*(pp)*(r21)))+(((-0.320000000000000)*(gconst7_6)*(npx)*(pz)))+(((-0.320000000000000)*(gconst2_6)*(npz)*(pz)))+(((0.160000000000000)*(gconst2_6)*(pp)*(r22)))+(((-0.00129600000000000)*(gconst7_6)*(r20)))+(((0.160000000000000)*(gconst7_6)*(pp)*(r20)))+(((0.0288000000000000)*(gconst4_6)*(rxp1_2)))+(((0.0288000000000000)*(gconst3_6)*(rxp0_2)))+(((0.0288000000000000)*(gconst5_6)*(pz)))+(((0.00129600000000000)*(gconst2_6)*(r22)))+(((0.00129600000000000)*(gconst6_6)*(r21)))+(((0.320000000000000)*(gconst6_6)*(npy)*(pz))));
op[149]=((((-1.00000000000000)*(x379)))+(x374));
op[150]=((0.0376000000000000)+(((-1.00000000000000)*(x364)))+(((-1.00000000000000)*(x360)))+(((-1.00000000000000)*(x358)))+(((-1.00000000000000)*(x351)))+(((-1.00000000000000)*(x354)))+(((-1.00000000000000)*(x352)))+(((-1.00000000000000)*(x327)))+(((-1.00000000000000)*(x326)))+(((-1.00000000000000)*(x329)))+(((-1.00000000000000)*(x328)))+(x350)+(x353)+(x355)+(x357)+(x356)+(x359)+(x342)+(x346)+(x347)+(x344)+(x345)+(x348)+(x361)+(x362)+(x363)+(x365)+(x441)+(((-1.00000000000000)*(x333)))+(((-1.00000000000000)*(x338)))+(((-1.00000000000000)*(x339)))+(((-1.00000000000000)*(x334)))+(((-1.00000000000000)*(x335)))+(((-1.00000000000000)*(x336)))+(((-1.00000000000000)*(x337)))+(((-1.00000000000000)*(x330)))+(((-1.00000000000000)*(x331)))+(((-1.00000000000000)*(x332)))+(((-1.00000000000000)*(x340)))+(((-1.00000000000000)*(x343)))+(((-1.00000000000000)*(x341)))+(((-1.00000000000000)*(x349))));
op[151]=((-0.0853000000000000)+(((-1.00000000000000)*(x394)))+(((-1.00000000000000)*(x395)))+(((-1.00000000000000)*(x392)))+(((-1.00000000000000)*(x393)))+(((-1.00000000000000)*(x396)))+(((-1.00000000000000)*(x397)))+(((-1.00000000000000)*(x398)))+(((-1.00000000000000)*(x399)))+(x386)+(x387)+(x384)+(x385)+(x382)+(x383)+(x380)+(x381)+(x388)+(x389)+(x391)+(x390)+(((-1.00000000000000)*(x402)))+(((-1.00000000000000)*(x403)))+(((-1.00000000000000)*(x400)))+(((-1.00000000000000)*(x401))));
op[152]=((-0.0376000000000000)+(((-1.00000000000000)*(x441)))+(((-1.00000000000000)*(x364)))+(((-1.00000000000000)*(x360)))+(((-1.00000000000000)*(x358)))+(((-1.00000000000000)*(x351)))+(((-1.00000000000000)*(x354)))+(((-1.00000000000000)*(x352)))+(x339)+(x338)+(x333)+(x332)+(x331)+(x330)+(x337)+(x336)+(x335)+(x334)+(x326)+(x327)+(x328)+(x329)+(x350)+(x353)+(x355)+(x357)+(x356)+(x359)+(x342)+(x340)+(x341)+(x346)+(x347)+(x344)+(x345)+(x348)+(x361)+(x362)+(x363)+(x365)+(((-1.00000000000000)*(x343)))+(((-1.00000000000000)*(x349))));
op[153]=((-0.00792500000000000)+(((-1.00000000000000)*(x428)))+(((-1.00000000000000)*(x421)))+(((-1.00000000000000)*(x422)))+(((-1.00000000000000)*(x423)))+(((-1.00000000000000)*(x424)))+(((-1.00000000000000)*(x425)))+(((-1.00000000000000)*(x426)))+(((-1.00000000000000)*(x427)))+(((-1.00000000000000)*(x299)))+(((-1.00000000000000)*(x298)))+(((-1.00000000000000)*(x295)))+(((-1.00000000000000)*(x294)))+(((-1.00000000000000)*(x293)))+(((-1.00000000000000)*(x291)))+(x276)+(x277)+(x274)+(x272)+(x273)+(x270)+(x271)+(x278)+(x405)+(x407)+(x406)+(x409)+(x408)+(x412)+(x413)+(x410)+(x411)+(x416)+(x417)+(x414)+(x415)+(x418)+(x419)+(x420)+(((-1.00000000000000)*(x280)))+(((-1.00000000000000)*(x281)))+(((-1.00000000000000)*(x283)))+(((-1.00000000000000)*(x284)))+(((-1.00000000000000)*(x285)))+(((-1.00000000000000)*(x286)))+(((-1.00000000000000)*(x287)))+(((-1.00000000000000)*(x288)))+(((-1.00000000000000)*(x289)))+(((-1.00000000000000)*(x302))));
op[154]=((0.00480000000000000)+(x339)+(x338)+(x331)+(x337)+(x336)+(x334)+(x324)+(x325)+(x320)+(x321)+(x329)+(x340)+(((-1.00000000000000)*(x404))));
op[155]=((0.00792500000000000)+(((-1.00000000000000)*(x428)))+(((-1.00000000000000)*(x421)))+(((-1.00000000000000)*(x422)))+(((-1.00000000000000)*(x423)))+(((-1.00000000000000)*(x424)))+(((-1.00000000000000)*(x425)))+(((-1.00000000000000)*(x426)))+(((-1.00000000000000)*(x427)))+(x302)+(x298)+(x299)+(x291)+(x293)+(x294)+(x295)+(x289)+(x288)+(x287)+(x286)+(x285)+(x284)+(x283)+(x281)+(x280)+(x405)+(x407)+(x406)+(x409)+(x408)+(x412)+(x413)+(x410)+(x411)+(x416)+(x417)+(x414)+(x415)+(x418)+(x419)+(x420)+(((-1.00000000000000)*(x274)))+(((-1.00000000000000)*(x277)))+(((-1.00000000000000)*(x276)))+(((-1.00000000000000)*(x271)))+(((-1.00000000000000)*(x270)))+(((-1.00000000000000)*(x273)))+(((-1.00000000000000)*(x272)))+(((-1.00000000000000)*(x278))));
op[156]=((((-1.00000000000000)*(x432)))+(((-1.00000000000000)*(x431)))+(((-1.00000000000000)*(x430)))+(((-1.00000000000000)*(x429)))+(x311)+(((-1.00000000000000)*(x316)))+(x438)+(x439)+(x433)+(x434)+(x435)+(x436)+(x437)+(x440));
op[157]=((((-0.120000000000000)*(gconst7_6)*(pp)*(r20)))+(((-0.0216000000000000)*(gconst5_6)*(pz)))+(((-0.000972000000000000)*(gconst6_6)*(r21)))+(((-0.120000000000000)*(gconst2_6)*(pp)*(r22)))+(((-0.0216000000000000)*(gconst3_6)*(rxp0_2)))+(((0.240000000000000)*(gconst2_6)*(npz)*(pz)))+(((0.240000000000000)*(gconst7_6)*(npx)*(pz)))+(((-0.240000000000000)*(gconst6_6)*(npy)*(pz)))+(((-0.000972000000000000)*(gconst2_6)*(r22)))+(((-0.0216000000000000)*(gconst4_6)*(rxp1_2)))+(((0.120000000000000)*(gconst6_6)*(pp)*(r21)))+(((0.000972000000000000)*(gconst7_6)*(r20))));
op[158]=((((-1.00000000000000)*(x440)))+(((-1.00000000000000)*(x437)))+(((-1.00000000000000)*(x436)))+(((-1.00000000000000)*(x435)))+(((-1.00000000000000)*(x434)))+(((-1.00000000000000)*(x439)))+(((-1.00000000000000)*(x438)))+(((-1.00000000000000)*(x433)))+(x311)+(((-1.00000000000000)*(x316)))+(x429)+(x430)+(x431)+(x432));
op[159]=((-0.00792500000000000)+(((-1.00000000000000)*(x428)))+(((-1.00000000000000)*(x421)))+(((-1.00000000000000)*(x424)))+(((-1.00000000000000)*(x425)))+(((-1.00000000000000)*(x294)))+(((-1.00000000000000)*(x293)))+(x298)+(x299)+(x291)+(x295)+(x274)+(x273)+(x270)+(x278)+(x289)+(x287)+(x285)+(x280)+(x407)+(x406)+(x409)+(x408)+(x417)+(x414)+(x415)+(x427)+(x426)+(x423)+(x422)+(x420)+(((-1.00000000000000)*(x277)))+(((-1.00000000000000)*(x276)))+(((-1.00000000000000)*(x271)))+(((-1.00000000000000)*(x272)))+(((-1.00000000000000)*(x281)))+(((-1.00000000000000)*(x283)))+(((-1.00000000000000)*(x284)))+(((-1.00000000000000)*(x286)))+(((-1.00000000000000)*(x288)))+(((-1.00000000000000)*(x419)))+(((-1.00000000000000)*(x418)))+(((-1.00000000000000)*(x412)))+(((-1.00000000000000)*(x416)))+(((-1.00000000000000)*(x411)))+(((-1.00000000000000)*(x410)))+(((-1.00000000000000)*(x413)))+(((-1.00000000000000)*(x302)))+(((-1.00000000000000)*(x405))));
op[160]=((0.00480000000000000)+(((-1.00000000000000)*(x441)))+(x339)+(x338)+(x333)+(x332)+(x331)+(x330)+(x337)+(x336)+(x335)+(x334)+(x326)+(x327)+(x328)+(x329)+(x340)+(x341));
op[161]=((0.00792500000000000)+(((-1.00000000000000)*(x428)))+(((-1.00000000000000)*(x421)))+(((-1.00000000000000)*(x424)))+(((-1.00000000000000)*(x425)))+(((-1.00000000000000)*(x299)))+(((-1.00000000000000)*(x298)))+(((-1.00000000000000)*(x295)))+(((-1.00000000000000)*(x291)))+(x302)+(x293)+(x294)+(x276)+(x277)+(x272)+(x271)+(x288)+(x286)+(x284)+(x283)+(x281)+(x407)+(x406)+(x409)+(x408)+(x417)+(x414)+(x415)+(x427)+(x426)+(x423)+(x422)+(x420)+(((-1.00000000000000)*(x274)))+(((-1.00000000000000)*(x270)))+(((-1.00000000000000)*(x273)))+(((-1.00000000000000)*(x278)))+(((-1.00000000000000)*(x280)))+(((-1.00000000000000)*(x285)))+(((-1.00000000000000)*(x287)))+(((-1.00000000000000)*(x289)))+(((-1.00000000000000)*(x419)))+(((-1.00000000000000)*(x418)))+(((-1.00000000000000)*(x412)))+(((-1.00000000000000)*(x416)))+(((-1.00000000000000)*(x411)))+(((-1.00000000000000)*(x410)))+(((-1.00000000000000)*(x413)))+(((-1.00000000000000)*(x405))));
solveeigendialyticpoly12(op,zeror,numroots);
IKReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IKReal dummy0 = zeror[ij1+0], dummy2 = zeror[ij1+1], dummy4 = zeror[ij1+2];
j1array[numsolutions]=((2.00000000000000)*(atan(dummy0)));
j2array[numsolutions]=((2.00000000000000)*(atan(dummy2)));
j3array[numsolutions]=((2.00000000000000)*(atan(dummy4)));
IKReal x442=(dummy0)*(dummy0);
IKReal x443=(dummy2)*(dummy2);
IKReal x444=(dummy4)*(dummy4);
cj1array[numsolutions]=((((IKabs(((1.00000000000000)+(x442))) != 0)?((IKReal)1/(((1.00000000000000)+(x442)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x442))))));
cj2array[numsolutions]=((((IKabs(((1.00000000000000)+(x443))) != 0)?((IKReal)1/(((1.00000000000000)+(x443)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x443))))));
cj3array[numsolutions]=((((IKabs(((1.00000000000000)+(x444))) != 0)?((IKReal)1/(((1.00000000000000)+(x444)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x444))))));
sj1array[numsolutions]=((2.00000000000000)*(dummy0)*(((IKabs(((1.00000000000000)+((dummy0)*(dummy0)))) != 0)?((IKReal)1/(((1.00000000000000)+((dummy0)*(dummy0))))):(IKReal)1.0e30)));
sj2array[numsolutions]=((2.00000000000000)*(dummy2)*(((IKabs(((1.00000000000000)+((dummy2)*(dummy2)))) != 0)?((IKReal)1/(((1.00000000000000)+((dummy2)*(dummy2))))):(IKReal)1.0e30)));
sj3array[numsolutions]=((2.00000000000000)*(dummy4)*(((IKabs(((1.00000000000000)+((dummy4)*(dummy4)))) != 0)?((IKReal)1/(((1.00000000000000)+((dummy4)*(dummy4))))):(IKReal)1.0e30)));
if( j1array[numsolutions] > IKPI )
    j1array[numsolutions]-=IK2PI;
else if( j1array[numsolutions] < -IKPI )
    j1array[numsolutions]+=IK2PI;
if( j2array[numsolutions] > IKPI )
    j2array[numsolutions]-=IK2PI;
else if( j2array[numsolutions] < -IKPI )
    j2array[numsolutions]+=IK2PI;
if( j3array[numsolutions] > IKPI )
    j3array[numsolutions]-=IK2PI;
else if( j3array[numsolutions] < -IKPI )
    j3array[numsolutions]+=IK2PI;
bool valid = true;
for( int kj1 = 0; kj1 < numsolutions; ++kj1)
{
    if( IKabs(cj1array[kj1]-cj1array[numsolutions]) < 0.00001 && IKabs(sj1array[kj1]-sj1array[numsolutions]) < 0.00001 &&IKabs(cj2array[kj1]-cj2array[numsolutions]) < 0.00001 && IKabs(sj2array[kj1]-sj2array[numsolutions]) < 0.00001 &&IKabs(cj3array[kj1]-cj3array[numsolutions]) < 0.00001 && IKabs(sj3array[kj1]-sj3array[numsolutions]) < 0.00001 && 1 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

{
IKReal dummyeval[1];
dummyeval[0]=((((px)*(r01)*(r20)))+(((-1.00000000000000)*(py)*(r10)*(r21)))+(((py)*(r11)*(r20)))+(((-1.00000000000000)*(px)*(r00)*(r21))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
IKReal x445=((cj1)*(sj2)*(sj3));
IKReal x446=((cj2)*(sj1)*(sj3));
IKReal x447=((x445)+(x446));
IKReal x448=((0.0200000000000000)*(sj3));
IKReal x449=((cj2)*(x448));
IKReal x450=((0.0850000000000000)*(cj3));
IKReal x451=((0.250000000000000)*(sj2)*(sj3));
IKReal x452=((x449)+(x450)+(x451));
IKReal x453=((((-1.00000000000000)*(x452)))+(x448));
IKReal x454=((px)*(r01)*(r20));
IKReal x455=((py)*(r11)*(r20));
IKReal x456=((x454)+(x455));
IKReal x457=((px)*(r00)*(r21));
IKReal x458=((py)*(r10)*(r21));
IKReal x459=((x458)+(x457));
IKReal x460=((((-1.00000000000000)*(x459)))+(x456));
IKReal x461=((IKabs(x460) != 0)?((IKReal)1/(x460)):(IKReal)1.0e30);
j5array[0]=IKatan2(((-1.00000000000000)*(x461)*(((((x447)*(((((-1.00000000000000)*(px)*(r01)))+(((-1.00000000000000)*(pz)*(r21)))+(((-1.00000000000000)*(py)*(r11)))))))+(((r21)*(x453)))))), ((x461)*(((((r20)*(x453)))+(((x447)*(((((-1.00000000000000)*(px)*(r00)))+(((-1.00000000000000)*(pz)*(r20)))+(((-1.00000000000000)*(py)*(r10)))))))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
    j5array[0]-=IK2PI;
else if( j5array[0] < -IKPI )
    j5array[0]+=IK2PI;
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] ) { continue; }
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
dummyeval[0]=((((-2.00000000000000)*(cj5)*(r20)*(r21)*(sj5)))+((r22)*(r22))+((((cj5)*(cj5))*((r20)*(r20))))+((((r21)*(r21))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
IKReal x462=(cj5)*(cj5);
IKReal x463=(sj5)*(sj5);
dummyeval[0]=((((-1.00000000000000)*(x463)*((r00)*(r00))))+(((-2.00000000000000)*(cj5)*(r00)*(r01)*(sj5)))+(((-1.00000000000000)*(x463)*((r10)*(r10))))+(((-1.00000000000000)*(x462)*((r01)*(r01))))+(((-2.00000000000000)*(cj5)*(r10)*(r11)*(sj5)))+(((-1.00000000000000)*(x462)*((r11)*(r11)))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((py)*(r12)*(r21)*(sj5)))+(((cj5)*(px)*(r00)*(r22)))+(((px)*(r02)*(r21)*(sj5)))+(((-1.00000000000000)*(px)*(r01)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(px)*(r02)*(r20)))+(((-1.00000000000000)*(py)*(r11)*(r22)*(sj5)))+(((-0.0900000000000000)*(r22)))+(((-1.00000000000000)*(cj5)*(py)*(r12)*(r20)))+(((cj5)*(py)*(r10)*(r22))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x464=((0.250000000000000)*(cj2));
IKReal x465=((0.220000000000000)+(x464));
IKReal x466=((0.0200000000000000)*(sj2));
IKReal x467=((((-1.00000000000000)*(x466)))+(x465));
IKReal x468=((sj1)*(sj2));
IKReal x469=((cj1)*(cj2));
IKReal x470=((py)*(r12)*(r21)*(sj5));
IKReal x471=((cj5)*(px)*(r00)*(r22));
IKReal x472=((px)*(r02)*(r21)*(sj5));
IKReal x473=((cj5)*(py)*(r10)*(r22));
IKReal x474=((x470)+(x471)+(x472)+(x473));
IKReal x475=((cj5)*(py)*(r12)*(r20));
IKReal x476=((cj5)*(px)*(r02)*(r20));
IKReal x477=x58;
IKReal x478=((py)*(r11)*(r22)*(sj5));
IKReal x479=((px)*(r01)*(r22)*(sj5));
IKReal x480=((x475)+(x476)+(x477)+(x478)+(x479));
IKReal x481=((((-1.00000000000000)*(x480)))+(x474));
IKReal x482=((IKabs(x481) != 0)?((IKReal)1/(x481)):(IKReal)1.0e30);
j4array[0]=IKatan2(((x482)*(((((x467)*(((((r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r20)))))))+(((((((-1.00000000000000)*(x468)))+(x469)))*(((0.0900000000000000)+(((-1.00000000000000)*(cj5)*(px)*(r00)))+(((px)*(r01)*(sj5)))+(((-1.00000000000000)*(cj5)*(pz)*(r20)))+(((pz)*(r21)*(sj5)))+(((py)*(r11)*(sj5)))+(((-1.00000000000000)*(cj5)*(py)*(r10)))))))))), ((x482)*(((((r22)*(x467)))+(((((((-1.00000000000000)*(x469)))+(x468)))*(((((-1.00000000000000)*(px)*(r02)))+(((-1.00000000000000)*(pz)*(r22)))+(((-1.00000000000000)*(py)*(r12)))))))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
IKReal x483=(cj5)*(cj5);
IKReal x484=(sj5)*(sj5);
dummyeval[0]=((((-1.00000000000000)*(cj5)*(r02)*(r11)*(sj4)))+(((cj5)*(r01)*(r12)*(sj4)))+(((cj4)*(r01)*(r10)*(x484)))+(((cj4)*(r01)*(r10)*(x483)))+(((-1.00000000000000)*(r02)*(r10)*(sj4)*(sj5)))+(((r00)*(r12)*(sj4)*(sj5)))+(((-1.00000000000000)*(cj4)*(r00)*(r11)*(x483)))+(((-1.00000000000000)*(cj4)*(r00)*(r11)*(x484))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
IKReal x485=(cj5)*(cj5);
IKReal x486=(sj5)*(sj5);
dummyeval[0]=((((-1.00000000000000)*(x485)*((r11)*(r11))))+(((-1.00000000000000)*(x486)*((r00)*(r00))))+(((-2.00000000000000)*(cj5)*(r00)*(r01)*(sj5)))+(((-1.00000000000000)*(x485)*((r01)*(r01))))+(((-1.00000000000000)*(x486)*((r10)*(r10))))+(((-2.00000000000000)*(cj5)*(r10)*(r11)*(sj5))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
IKReal x487=(cj5)*(cj5);
IKReal x488=(sj5)*(sj5);
dummyeval[0]=((((cj4)*(r02)*(r10)*(sj5)))+(((r01)*(r10)*(sj4)*(x488)))+(((r01)*(r10)*(sj4)*(x487)))+(((-1.00000000000000)*(r00)*(r11)*(sj4)*(x487)))+(((-1.00000000000000)*(r00)*(r11)*(sj4)*(x488)))+(((-1.00000000000000)*(cj4)*(r00)*(r12)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(r01)*(r12)))+(((cj4)*(cj5)*(r02)*(r11))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x489=(cj5)*(cj5);
IKReal x490=(sj5)*(sj5);
IKReal x491=((cj4)*(r02)*(r10)*(sj5));
IKReal x492=((r01)*(r10)*(sj4)*(x489));
IKReal x493=((r01)*(r10)*(sj4)*(x490));
IKReal x494=((cj4)*(cj5)*(r02)*(r11));
IKReal x495=((x492)+(x493)+(x491)+(x494));
IKReal x496=((r00)*(r11)*(sj4)*(x489));
IKReal x497=((r00)*(r11)*(sj4)*(x490));
IKReal x498=((cj4)*(r00)*(r12)*(sj5));
IKReal x499=((cj4)*(cj5)*(r01)*(r12));
IKReal x500=((x498)+(x499)+(x496)+(x497));
IKReal x501=((((-1.00000000000000)*(x500)))+(x495));
IKReal x502=((IKabs(x501) != 0)?((IKReal)1/(x501)):(IKReal)1.0e30);
j0array[0]=IKatan2(((x502)*(((((cj3)*(((((r11)*(sj4)*(sj5)))+(((cj4)*(r12)))+(((-1.00000000000000)*(cj5)*(r10)*(sj4)))))))+(((-1.00000000000000)*(sj3)*(((((cj5)*(r11)))+(((r10)*(sj5)))))))))), ((x502)*(((((sj3)*(((((-1.00000000000000)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r01)))))))+(((-1.00000000000000)*(cj3)*(((((-1.00000000000000)*(r01)*(sj4)*(sj5)))+(((cj5)*(r00)*(sj4)))+(((-1.00000000000000)*(cj4)*(r02)))))))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
    j0array[0]-=IK2PI;
else if( j0array[0] < -IKPI )
    j0array[0]+=IK2PI;
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] ) { continue; }
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x503=(cj5)*(cj5);
IKReal x504=(sj5)*(sj5);
IKReal x505=((r00)*(sj5));
IKReal x506=((cj5)*(r01));
IKReal x507=((x505)+(x506));
IKReal x508=((cj1)*(cj2)*(sj3));
IKReal x509=((sj1)*(sj2)*(sj3));
IKReal x510=((((-1.00000000000000)*(x509)))+(x508));
IKReal x511=((cj5)*(r11));
IKReal x512=((r10)*(sj5));
IKReal x513=((x512)+(x511));
IKReal x514=((2.00000000000000)*(x505)*(x506));
IKReal x515=((2.00000000000000)*(x511)*(x512));
IKReal x516=(r01)*(r01);
IKReal x517=((x503)*(x516));
IKReal x518=(r10)*(r10);
IKReal x519=((x504)*(x518));
IKReal x520=(r11)*(r11);
IKReal x521=((x503)*(x520));
IKReal x522=(r00)*(r00);
IKReal x523=((x504)*(x522));
IKReal x524=((x523)+(x521)+(x519)+(x517)+(x515)+(x514));
IKReal x525=((-1.00000000000000)*(x524));
IKReal x526=((IKabs(x525) != 0)?((IKReal)1/(x525)):(IKReal)1.0e30);
j0array[0]=IKatan2(((x526)*(((((x510)*(x513)))+(((cj3)*(x507)))))), ((x526)*(((((x507)*(x510)))+(((-1.00000000000000)*(cj3)*(x513)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
    j0array[0]-=IK2PI;
else if( j0array[0] < -IKPI )
    j0array[0]+=IK2PI;
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] ) { continue; }
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x527=(cj5)*(cj5);
IKReal x528=(sj5)*(sj5);
IKReal x529=((r02)*(r10)*(sj4)*(sj5));
IKReal x530=((cj4)*(r00)*(r11)*(x527));
IKReal x531=((cj4)*(r00)*(r11)*(x528));
IKReal x532=((cj5)*(r02)*(r11)*(sj4));
IKReal x533=((x531)+(x530)+(x532)+(x529));
IKReal x534=((cj5)*(r01)*(r12)*(sj4));
IKReal x535=((cj4)*(r01)*(r10)*(x527));
IKReal x536=((cj4)*(r01)*(r10)*(x528));
IKReal x537=((r00)*(r12)*(sj4)*(sj5));
IKReal x538=((x535)+(x534)+(x537)+(x536));
j0array[0]=IKatan2(((-1.00000000000000)*(cj3)*(((IKabs(((((-1.00000000000000)*(x533)))+(x538))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x533)))+(x538)))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj4)*(r11)*(sj5)))+(((cj4)*(cj5)*(r10)))+(((r12)*(sj4)))))), ((-1.00000000000000)*(cj3)*(((IKabs(((((-1.00000000000000)*(x538)))+(x533))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x538)))+(x533)))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj4)*(cj5)*(r00)))+(((cj4)*(r01)*(sj5)))+(((-1.00000000000000)*(r02)*(sj4)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
    j0array[0]-=IK2PI;
else if( j0array[0] < -IKPI )
    j0array[0]+=IK2PI;
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] ) { continue; }
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x539=(cj5)*(cj5);
IKReal x540=(sj5)*(sj5);
IKReal x541=((r00)*(sj5));
IKReal x542=((cj5)*(r01));
IKReal x543=((x541)+(x542));
IKReal x544=((cj1)*(cj2)*(sj3));
IKReal x545=((sj1)*(sj2)*(sj3));
IKReal x546=((((-1.00000000000000)*(x545)))+(x544));
IKReal x547=((cj5)*(r11));
IKReal x548=((r10)*(sj5));
IKReal x549=((x547)+(x548));
IKReal x550=((2.00000000000000)*(x541)*(x542));
IKReal x551=((2.00000000000000)*(x547)*(x548));
IKReal x552=(r01)*(r01);
IKReal x553=((x539)*(x552));
IKReal x554=(r10)*(r10);
IKReal x555=((x540)*(x554));
IKReal x556=(r11)*(r11);
IKReal x557=((x539)*(x556));
IKReal x558=(r00)*(r00);
IKReal x559=((x540)*(x558));
IKReal x560=((x559)+(x553)+(x551)+(x550)+(x557)+(x555));
IKReal x561=((-1.00000000000000)*(x560));
IKReal x562=((IKabs(x561) != 0)?((IKReal)1/(x561)):(IKReal)1.0e30);
j0array[0]=IKatan2(((x562)*(((((cj3)*(x543)))+(((x546)*(x549)))))), ((x562)*(((((-1.00000000000000)*(cj3)*(x549)))+(((x543)*(x546)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
    j0array[0]-=IK2PI;
else if( j0array[0] < -IKPI )
    j0array[0]+=IK2PI;
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] ) { continue; }
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IKReal dummyeval[1];
dummyeval[0]=((((-2.00000000000000)*(cj5)*(r20)*(r21)*(sj5)))+((r22)*(r22))+((((cj5)*(cj5))*((r20)*(r20))))+((((r21)*(r21))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((r01)*(r22)*(sj0)*(sj5)))+(((-1.00000000000000)*(r02)*(r21)*(sj0)*(sj5)))+(((cj5)*(r02)*(r20)*(sj0)))+(((-1.00000000000000)*(cj5)*(r00)*(r22)*(sj0)))+(((cj0)*(cj5)*(r10)*(r22)))+(((cj0)*(r12)*(r21)*(sj5)))+(((-1.00000000000000)*(cj0)*(r11)*(r22)*(sj5)))+(((-1.00000000000000)*(cj0)*(cj5)*(r12)*(r20))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
IKReal x563=x540;
IKReal x564=x539;
dummyeval[0]=((((-1.00000000000000)*(cj5)*(r01)*(r20)*(sj0)*(sj5)))+(((cj0)*(cj5)*(r11)*(r20)*(sj5)))+(((r01)*(r21)*(sj0)*(x563)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(sj0)*(sj5)))+(((-1.00000000000000)*(cj0)*(r12)*(r22)))+(((cj0)*(cj5)*(r10)*(r21)*(sj5)))+(((r00)*(r20)*(sj0)*(x564)))+(((-1.00000000000000)*(cj0)*(r11)*(r21)*(x563)))+(((-1.00000000000000)*(cj0)*(r10)*(r20)*(x564)))+(((r02)*(r22)*(sj0))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x565=x540;
IKReal x566=x539;
IKReal x567=((cj5)*(r01)*(r20)*(sj0)*(sj5));
IKReal x568=((cj0)*(r11)*(r21)*(x565));
IKReal x569=((cj0)*(r12)*(r22));
IKReal x570=((cj5)*(r00)*(r21)*(sj0)*(sj5));
IKReal x571=((cj0)*(r10)*(r20)*(x566));
IKReal x572=((x571)+(x570)+(x568)+(x569)+(x567));
IKReal x573=((cj0)*(cj5)*(r11)*(r20)*(sj5));
IKReal x574=((cj0)*(cj5)*(r10)*(r21)*(sj5));
IKReal x575=((r02)*(r22)*(sj0));
IKReal x576=((r01)*(r21)*(sj0)*(x565));
IKReal x577=((r00)*(r20)*(sj0)*(x566));
IKReal x578=((x575)+(x574)+(x577)+(x576)+(x573));
IKReal x579=((cj1)*(cj3)*(sj2));
IKReal x580=((cj2)*(cj3)*(sj1));
IKReal x581=((x579)+(x580));
IKReal x582=((-1.00000000000000)*(x581));
j4array[0]=IKatan2(((x582)*(((IKabs(((((-1.00000000000000)*(x572)))+(x578))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x572)))+(x578)))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj0)*(r11)*(sj5)))+(((cj0)*(cj5)*(r10)))+(((-1.00000000000000)*(cj5)*(r00)*(sj0)))+(((r01)*(sj0)*(sj5)))))), ((x582)*(((IKabs(((((-1.00000000000000)*(x578)))+(x572))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x578)))+(x572)))):(IKReal)1.0e30))*(((((cj0)*(r12)))+(((-1.00000000000000)*(r02)*(sj0)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x583=((r02)*(r21)*(sj0)*(sj5));
IKReal x584=((cj5)*(r00)*(r22)*(sj0));
IKReal x585=((cj0)*(cj5)*(r12)*(r20));
IKReal x586=((cj0)*(r11)*(r22)*(sj5));
IKReal x587=((x583)+(x584)+(x585)+(x586));
IKReal x588=((r01)*(r22)*(sj0)*(sj5));
IKReal x589=((cj5)*(r02)*(r20)*(sj0));
IKReal x590=((cj0)*(cj5)*(r10)*(r22));
IKReal x591=((cj0)*(r12)*(r21)*(sj5));
IKReal x592=((x588)+(x589)+(x591)+(x590));
IKReal x593=((sj1)*(sj2));
IKReal x594=((cj1)*(cj2));
IKReal x595=((((-1.00000000000000)*(x594)))+(x593));
j4array[0]=IKatan2(((x595)*(((IKabs(((x592)+(((-1.00000000000000)*(x587))))) != 0)?((IKReal)1/(((x592)+(((-1.00000000000000)*(x587)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj0)*(r11)*(sj5)))+(((cj0)*(cj5)*(r10)))+(((-1.00000000000000)*(cj5)*(r00)*(sj0)))+(((r01)*(sj0)*(sj5)))))), ((x595)*(((IKabs(((((-1.00000000000000)*(x592)))+(x587))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x592)))+(x587)))):(IKReal)1.0e30))*(((((cj0)*(r12)))+(((-1.00000000000000)*(r02)*(sj0)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x596=((cj1)*(cj3)*(sj2));
IKReal x597=((cj2)*(cj3)*(sj1));
IKReal x598=((x597)+(x596));
IKReal x599=((-1.00000000000000)*(x598));
IKReal x600=((cj5)*(r20));
IKReal x601=((r21)*(sj5));
IKReal x602=((sj1)*(sj2));
IKReal x603=((cj1)*(cj2));
IKReal x604=((x602)+(((-1.00000000000000)*(x603))));
IKReal x605=x10;
IKReal x606=x539;
IKReal x607=x1;
IKReal x608=(x600)*(x600);
IKReal x609=x2;
IKReal x610=x540;
IKReal x611=(x601)*(x601);
IKReal x612=((x605)+(x608)+(x611));
IKReal x613=((2.00000000000000)*(x600)*(x601));
IKReal x614=((((-1.00000000000000)*(x613)))+(x612));
IKReal x615=((IKabs(x614) != 0)?((IKReal)1/(x614)):(IKReal)1.0e30);
j4array[0]=IKatan2(((x615)*(((((x599)*(((x601)+(((-1.00000000000000)*(x600)))))))+(((r22)*(x604)))))), ((x615)*(((((r22)*(x599)))+(((x604)*(((x600)+(((-1.00000000000000)*(x601)))))))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x616=((cj1)*(cj3)*(sj2));
IKReal x617=((cj2)*(cj3)*(sj1));
IKReal x618=((x616)+(x617));
IKReal x619=((-1.00000000000000)*(x618));
IKReal x620=((cj5)*(r20));
IKReal x621=((r21)*(sj5));
IKReal x622=((sj1)*(sj2));
IKReal x623=((cj1)*(cj2));
IKReal x624=((((-1.00000000000000)*(x623)))+(x622));
IKReal x625=x10;
IKReal x626=(cj5)*(cj5);
IKReal x627=x1;
IKReal x628=(x620)*(x620);
IKReal x629=x2;
IKReal x630=(sj5)*(sj5);
IKReal x631=(x621)*(x621);
IKReal x632=((x625)+(x628)+(x631));
IKReal x633=((2.00000000000000)*(x620)*(x621));
IKReal x634=((((-1.00000000000000)*(x633)))+(x632));
IKReal x635=((IKabs(x634) != 0)?((IKReal)1/(x634)):(IKReal)1.0e30);
j4array[0]=IKatan2(((x635)*(((((x619)*(((((-1.00000000000000)*(x620)))+(x621)))))+(((r22)*(x624)))))), ((x635)*(((((x624)*(((((-1.00000000000000)*(x621)))+(x620)))))+(((r22)*(x619)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
IKReal x636=x626;
IKReal x637=x630;
dummyeval[0]=((((-1.00000000000000)*(cj5)*(r02)*(r11)*(sj4)))+(((cj4)*(r01)*(r10)*(x637)))+(((cj4)*(r01)*(r10)*(x636)))+(((cj5)*(r01)*(r12)*(sj4)))+(((-1.00000000000000)*(r02)*(r10)*(sj4)*(sj5)))+(((-1.00000000000000)*(cj4)*(r00)*(r11)*(x636)))+(((-1.00000000000000)*(cj4)*(r00)*(r11)*(x637)))+(((r00)*(r12)*(sj4)*(sj5))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
IKReal x638=x626;
IKReal x639=x630;
dummyeval[0]=((((-2.00000000000000)*(cj5)*(r00)*(r01)*(sj5)))+(((-1.00000000000000)*(x639)*((r00)*(r00))))+(((-1.00000000000000)*(x639)*((r10)*(r10))))+(((-1.00000000000000)*(x638)*((r11)*(r11))))+(((-2.00000000000000)*(cj5)*(r10)*(r11)*(sj5)))+(((-1.00000000000000)*(x638)*((r01)*(r01)))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
IKReal x640=x626;
IKReal x641=x630;
dummyeval[0]=((((cj4)*(r02)*(r10)*(sj5)))+(((r01)*(r10)*(sj4)*(x641)))+(((r01)*(r10)*(sj4)*(x640)))+(((-1.00000000000000)*(r00)*(r11)*(sj4)*(x640)))+(((-1.00000000000000)*(r00)*(r11)*(sj4)*(x641)))+(((-1.00000000000000)*(cj4)*(r00)*(r12)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(r01)*(r12)))+(((cj4)*(cj5)*(r02)*(r11))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x642=x626;
IKReal x643=x630;
IKReal x644=((cj4)*(r02)*(r10)*(sj5));
IKReal x645=((r01)*(r10)*(sj4)*(x642));
IKReal x646=((r01)*(r10)*(sj4)*(x643));
IKReal x647=((cj4)*(cj5)*(r02)*(r11));
IKReal x648=((x647)+(x646)+(x645)+(x644));
IKReal x649=((r00)*(r11)*(sj4)*(x642));
IKReal x650=((r00)*(r11)*(sj4)*(x643));
IKReal x651=((cj4)*(r00)*(r12)*(sj5));
IKReal x652=((cj4)*(cj5)*(r01)*(r12));
IKReal x653=((x649)+(x650)+(x651)+(x652));
IKReal x654=((((-1.00000000000000)*(x653)))+(x648));
IKReal x655=((IKabs(x654) != 0)?((IKReal)1/(x654)):(IKReal)1.0e30);
j0array[0]=IKatan2(((x655)*(((((cj3)*(((((r11)*(sj4)*(sj5)))+(((cj4)*(r12)))+(((-1.00000000000000)*(cj5)*(r10)*(sj4)))))))+(((-1.00000000000000)*(sj3)*(((((cj5)*(r11)))+(((r10)*(sj5)))))))))), ((x655)*(((((sj3)*(((((-1.00000000000000)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r01)))))))+(((-1.00000000000000)*(cj3)*(((((-1.00000000000000)*(r01)*(sj4)*(sj5)))+(((cj5)*(r00)*(sj4)))+(((-1.00000000000000)*(cj4)*(r02)))))))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
    j0array[0]-=IK2PI;
else if( j0array[0] < -IKPI )
    j0array[0]+=IK2PI;
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] ) { continue; }
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x656=x626;
IKReal x657=x630;
IKReal x658=((r00)*(sj5));
IKReal x659=((cj5)*(r01));
IKReal x660=((x658)+(x659));
IKReal x661=((cj1)*(cj2)*(sj3));
IKReal x662=((sj1)*(sj2)*(sj3));
IKReal x663=((((-1.00000000000000)*(x662)))+(x661));
IKReal x664=((cj5)*(r11));
IKReal x665=((r10)*(sj5));
IKReal x666=((x665)+(x664));
IKReal x667=((2.00000000000000)*(x658)*(x659));
IKReal x668=((2.00000000000000)*(x664)*(x665));
IKReal x669=(r01)*(r01);
IKReal x670=((x656)*(x669));
IKReal x671=(r10)*(r10);
IKReal x672=((x657)*(x671));
IKReal x673=(r11)*(r11);
IKReal x674=((x656)*(x673));
IKReal x675=(r00)*(r00);
IKReal x676=((x657)*(x675));
IKReal x677=((x668)+(x667)+(x672)+(x670)+(x676)+(x674));
IKReal x678=((-1.00000000000000)*(x677));
IKReal x679=((IKabs(x678) != 0)?((IKReal)1/(x678)):(IKReal)1.0e30);
j0array[0]=IKatan2(((x679)*(((((cj3)*(x660)))+(((x663)*(x666)))))), ((x679)*(((((-1.00000000000000)*(cj3)*(x666)))+(((x660)*(x663)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
    j0array[0]-=IK2PI;
else if( j0array[0] < -IKPI )
    j0array[0]+=IK2PI;
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] ) { continue; }
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x680=x626;
IKReal x681=x630;
IKReal x682=((r02)*(r10)*(sj4)*(sj5));
IKReal x683=((cj4)*(r00)*(r11)*(x680));
IKReal x684=((cj4)*(r00)*(r11)*(x681));
IKReal x685=((cj5)*(r02)*(r11)*(sj4));
IKReal x686=((x683)+(x682)+(x685)+(x684));
IKReal x687=((cj5)*(r01)*(r12)*(sj4));
IKReal x688=((cj4)*(r01)*(r10)*(x680));
IKReal x689=((cj4)*(r01)*(r10)*(x681));
IKReal x690=((r00)*(r12)*(sj4)*(sj5));
IKReal x691=((x689)+(x688)+(x687)+(x690));
j0array[0]=IKatan2(((-1.00000000000000)*(cj3)*(((IKabs(((((-1.00000000000000)*(x686)))+(x691))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x686)))+(x691)))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj4)*(r11)*(sj5)))+(((cj4)*(cj5)*(r10)))+(((r12)*(sj4)))))), ((-1.00000000000000)*(cj3)*(((IKabs(((x686)+(((-1.00000000000000)*(x691))))) != 0)?((IKReal)1/(((x686)+(((-1.00000000000000)*(x691)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj4)*(cj5)*(r00)))+(((cj4)*(r01)*(sj5)))+(((-1.00000000000000)*(r02)*(sj4)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
    j0array[0]-=IK2PI;
else if( j0array[0] < -IKPI )
    j0array[0]+=IK2PI;
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] ) { continue; }
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}
}
}

}

}
    }
}
return vsolutions.size()>0;
}

template <int D>
static inline bool matrixinverse(double* A)
{
    IKReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    int n = D;
    int info;
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

static inline bool checkconsistency12(const double* Breal)
{
    const double tol = 1e-5; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[0]-Breal[1]) < tol && IKabs(Breal[0]*Breal[2]-Breal[3]) < tol && IKabs(Breal[1]*Breal[2]-Breal[4]) < tol && IKabs(Breal[2]*Breal[2]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol && IKabs(Breal[1]*Breal[5]-Breal[7]) < tol && IKabs(Breal[2]*Breal[5]-Breal[8]) < tol && IKabs(Breal[0]*Breal[8]-Breal[9]) < tol && IKabs(Breal[1]*Breal[8]-Breal[10]) < tol;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
static inline void solveeigendialyticpoly12(const IKReal* matcoeffs, IKReal* rawroots, int& numroots)
{
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    IKReal IKFAST_ALIGNED16(M[24*24]) = {0};
    IKReal IKFAST_ALIGNED16(A[12*12]);
    IKReal IKFAST_ALIGNED16(work[24*24*23]);
    int ipiv[12];
    int info, coeffindex;
    const int worksize=24*24*3;
    const int matrixdim = 12;
    const int matrixdim2 = 24;
    numroots = 0;

    // setup M = [0 I; -A^-1 C -A^-1B] and A
    coeffindex = 0;
    for(int j = 0; j < 6; ++j) {
        for(int k = 0; k < 9; ++k) {
            A[(j+6)+matrixdim*k] = A[j+matrixdim*(k+3)] = matcoeffs[coeffindex+2];
            M[matrixdim+(j+6)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+3)] = -matcoeffs[coeffindex];
            M[matrixdim+(j+6)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+3)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex+1];
            coeffindex += 3;
        }
        // fill the rest with 0s!
        for(int k = 0; k < 3; ++k) {
            A[j+matrixdim*k] = A[(j+6)+matrixdim*(k+9)] = 0;
        }
    }
    //dgesv_(&matrixdim,&matrixdim2,A,&matrixdim,&ipiv[0],&M[matrixdim],&matrixdim2,&info);
    const IKReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    IKReal polymultiplier = 0;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            polymultiplier = A[0];
            for(int j = 1; j < matrixdim; ++j) {
                polymultiplier *= A[j*matrixdim+j];
            }
            if( IKabs(polymultiplier) >= 100*tol ) {
                break;
            }
        }
        // transform by the linear functional
        lfindex++;
        const IKReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 6; ++j) {
            for(int k = 0; k < 9; ++k) {
                IKReal a = matcoeffs[coeffindex+2], b = matcoeffs[coeffindex+1], c = matcoeffs[coeffindex];
                A[(j+6)+matrixdim*k] = A[j+matrixdim*(k+3)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+6)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+3)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+6)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+3)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex += 3;
            }
            // fill the rest with 0s!
            for(int k = 0; k < 3; ++k) {
                A[j+matrixdim*k] = A[(j+6)+matrixdim*(k+9)] = 0;
            }
        }
    } while(lfindex<4);

    if( IKabs(polymultiplier) < 100*tol ) {
        //printf("ill conditioned matrix %e\n",polymultiplier);
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IKReal IKFAST_ALIGNED16(wr[24]);
    IKReal IKFAST_ALIGNED16(wi[24]);
    IKReal IKFAST_ALIGNED16(vr[24*24]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IKReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        if( IKabs(wi[i]) < tol*100 ) {
            IKReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IKReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency12(Breal) ) {
                if( lfindex >= 0 ) {
                    const IKReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[3]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[5]/ev[2];
                    rawroots[numroots++] = ev[2]/ev[1];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[9]/ev[6];
                    rawroots[numroots++] = ev[10]/ev[9];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[11]/ev[8];
                    rawroots[numroots++] = ev[11]/ev[10];
                }
            }
        }
    }
}

static inline void polyroots2(IKReal rawcoeffs[2+1], IKReal rawroots[2], int& numroots) {
    IKReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);
        numroots = 2;
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return ""; }

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
