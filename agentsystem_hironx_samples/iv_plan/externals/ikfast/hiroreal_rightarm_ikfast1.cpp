/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// generated 2011-01-31 16:54:50.305014
/// To compile with gcc:
///     gcc -lstdc++ -llapack ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -llapack  -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef BOOST_ASSERT
#define IKFAST_ASSERT BOOST_ASSERT
#else

#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
}

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 0; }
IKFAST_API int* getFreeParameters() { return NULL; }
IKFAST_API int getNumJoints() { return 6; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 1; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71;
x0=IKcos(j[3]);
x1=IKcos(j[4]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[4]);
x5=IKcos(j[0]);
x6=IKcos(j[1]);
x7=IKsin(j[5]);
x8=IKsin(j[3]);
x9=IKsin(j[1]);
x10=((x0)*(x4)*(x7));
x11=IKcos(j[5]);
x12=((x11)*(x8));
x13=((((-1.00000000000000)*(x12)))+(x10));
x14=IKsin(j[0]);
x15=((x0)*(x11)*(x4));
x16=((x7)*(x8));
x17=((x15)+(x16));
x18=((-1.00000000000000)*(x17));
x19=((0.0900000000000000)*(x1));
x20=((0.220000000000000)+(x19));
x21=((0.0900000000000000)*(x0)*(x4));
x22=((0.0200000000000000)+(x21));
x23=((x0)*(x1)*(x3));
x24=((x2)*(x4));
x25=((((-1.00000000000000)*(x24)))+(x23));
x26=((x25)*(x6));
x27=((x0)*(x1)*(x2));
x28=((x3)*(x4));
x29=((x27)+(x28));
x30=((x29)*(x9));
x31=((((-1.00000000000000)*(x30)))+(x26));
x32=((x16)*(x4));
x33=((x0)*(x11));
x34=((x33)+(x32));
x35=((x13)*(x2));
x36=((x1)*(x3)*(x7));
x37=((((-1.00000000000000)*(x36)))+(x35));
x38=((x1)*(x2)*(x7));
x39=((x13)*(x3));
x40=((x39)+(x38));
x41=((x40)*(x6));
x42=((x37)*(x9));
x43=((((-1.00000000000000)*(x42)))+(x41));
x44=((x0)*(x7));
x45=((x12)*(x4));
x46=((((-1.00000000000000)*(x45)))+(x44));
x47=((x18)*(x3));
x48=((x1)*(x11)*(x2));
x49=((((-1.00000000000000)*(x48)))+(x47));
x50=((x1)*(x11)*(x3));
x51=((x18)*(x2));
x52=((x51)+(x50));
x53=((x20)*(x3));
x54=((0.250000000000000)+(x53));
x55=((x2)*(x22));
x56=((x54)+(((-1.00000000000000)*(x55))));
x57=((x2)*(x20));
x58=((x22)*(x3));
x59=((x58)+(x57));
x60=((0.0200000000000000)+(((-1.00000000000000)*(x59))));
x61=((x6)*(x60));
x62=((0.0900000000000000)*(x4)*(x8));
x63=((0.0850000000000000)+(x62));
x64=((-1.00000000000000)*(x48));
x65=((x47)+(x64));
x66=((x6)*(x65));
x67=((-1.00000000000000)*(x52)*(x9));
x68=((-1.00000000000000)*(x56)*(x9));
x69=((x61)+(x68));
x70=((-1.00000000000000)*(x30));
x71=((x70)+(x26));
eerot[0]=((((x31)*(x5)))+(((-1.00000000000000)*(x1)*(x14)*(x8))));
eerot[1]=((((x43)*(x5)))+(((-1.00000000000000)*(x14)*(x34))));
eerot[2]=((((-1.00000000000000)*(x5)*(((x66)+(((-1.00000000000000)*(x52)*(x9)))))))+(((x14)*(x46))));
eetrans[0]=((((x5)*(((((-1.00000000000000)*(x56)*(x9)))+(x61)))))+(((x14)*(x63)))+(((-0.0335000000000000)*(x31)*(x5)))+(((0.0335000000000000)*(x1)*(x14)*(x8))));
eerot[3]=((((0.258819050000000)*(x25)*(x9)))+(((0.258819050000000)*(x29)*(x6)))+(((0.965925826671681)*(x1)*(x5)*(x8)))+(((0.965925826671681)*(x14)*(x71))));
eerot[4]=((((0.258819050000000)*(x40)*(x9)))+(((0.258819050000000)*(x37)*(x6)))+(((0.965925826671681)*(x14)*(x43)))+(((0.965925826671681)*(x34)*(x5))));
eerot[5]=((((-0.258819050000000)*(x52)*(x6)))+(((-0.965925826671681)*(x14)*(((((x49)*(x6)))+(x67)))))+(((-0.258819050000000)*(x49)*(x9)))+(((-0.965925826671681)*(x46)*(x5))));
eetrans[1]=((-0.145000000000000)+(((-0.00867043817500000)*(x29)*(x6)))+(((-0.0323585151935013)*(x14)*(x31)))+(((-0.0323585151935013)*(x1)*(x5)*(x8)))+(((0.258819050000000)*(x60)*(x9)))+(((-0.965925826671681)*(x5)*(x63)))+(((-0.00867043817500000)*(x25)*(x9)))+(((0.258819050000000)*(x56)*(x6)))+(((0.965925826671681)*(x14)*(x69))));
eerot[6]=((((-0.965925826671681)*(x29)*(x6)))+(((-0.965925826671681)*(x25)*(x9)))+(((0.258819050000000)*(x14)*(x31)))+(((0.258819050000000)*(x1)*(x5)*(x8))));
eerot[7]=((((0.258819050000000)*(x14)*(((((-1.00000000000000)*(x42)))+(x41)))))+(((-0.965925826671681)*(x37)*(x6)))+(((0.258819050000000)*(x34)*(x5)))+(((-0.965925826671681)*(x40)*(x9))));
eerot[8]=((((-0.258819050000000)*(x46)*(x5)))+(((0.965925826671681)*(x65)*(x9)))+(((0.965925826671681)*(x52)*(x6)))+(((-0.258819050000000)*(x14)*(((x66)+(x67))))));
eetrans[2]=((0.380000000000000)+(((-0.965925826671681)*(x60)*(x9)))+(((0.0323585151935013)*(x29)*(x6)))+(((-0.00867043817500000)*(x14)*(x71)))+(((0.0323585151935013)*(x25)*(x9)))+(((0.258819050000000)*(x14)*(x69)))+(((-0.258819050000000)*(x5)*(x63)))+(((-0.00867043817500000)*(x1)*(x5)*(x8)))+(((-0.965925826671681)*(x56)*(x6))));
}

class IKSolver {
public:
IKReal j0, cj0, sj0,
j1, cj1, sj1,
j2, cj2, sj2,
j3, cj3, sj3,
j4, cj4, sj4,
j5, cj5, sj5,
new_r00, r00,
new_r01, r01,
new_r02, r02,
new_r10, r10,
new_r11, r11,
new_r12, r12,
new_r20, r20,
new_r21, r21,
new_r22, r22,
    rxp0_0, rxp0_1, rxp0_2,
    rxp1_0, rxp1_1, rxp1_2,
    rxp2_0, rxp2_1, rxp2_2,
new_px, new_py, new_pz, px, py, pz, npx, npy, npz, pp;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.00000000000000)*(r02));
new_r01=r01;
new_r02=r00;
new_px=((px)+(((0.0335000000000000)*(r00))));
new_r10=((((-0.258819050000000)*(r22)))+(((-0.965925826671681)*(r12))));
new_r11=((((0.965925826671681)*(r11)))+(((0.258819050000000)*(r21))));
new_r12=((((0.965925826671681)*(r10)))+(((0.258819050000000)*(r20))));
new_py=((0.0417080058673937)+(((0.00867043817500000)*(r20)))+(((0.965925826671681)*(py)))+(((0.0323585151935013)*(r10)))+(((0.258819050000000)*(pz))));
new_r20=((((-0.965925826671681)*(r22)))+(((0.258819050000000)*(r12))));
new_r21=((((-0.258819050000000)*(r11)))+(((0.965925826671681)*(r21))));
new_r22=((((-0.258819050000000)*(r10)))+(((0.965925826671681)*(r20))));
new_pz=((-0.404580576385239)+(((0.965925826671681)*(pz)))+(((-0.258819050000000)*(py)))+(((0.0323585151935013)*(r20)))+(((-0.00867043817500000)*(r10))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
IKReal matrixinvcoeffs[64];
IKReal x0=((-1.00000000000000)*(r21));
IKReal x1=((-1.00000000000000)*(npy));
IKReal x2=((-1.00000000000000)*(r22));
IKReal x3=((-1.00000000000000)*(npz));
IKReal x4=((-1.00000000000000)*(rxp2_2));
IKReal x5=((0.0900000000000000)*(r20));
IKReal x6=((-1.00000000000000)*(r20));
IKReal x7=((-1.00000000000000)*(npx));
IKReal x8=((0.0900000000000000)*(r21));
matrixinvcoeffs[0]=x6;
matrixinvcoeffs[1]=x7;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=x0;
matrixinvcoeffs[9]=x1;
matrixinvcoeffs[10]=0;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=0;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=0;
matrixinvcoeffs[19]=x2;
matrixinvcoeffs[20]=-0.0900000000000000;
matrixinvcoeffs[21]=x3;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=x4;
matrixinvcoeffs[24]=0;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=x0;
matrixinvcoeffs[27]=0;
matrixinvcoeffs[28]=x1;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=((-1.00000000000000)*(rxp1_2));
matrixinvcoeffs[31]=x5;
matrixinvcoeffs[32]=0;
matrixinvcoeffs[33]=0;
matrixinvcoeffs[34]=r20;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=npx;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=rxp0_2;
matrixinvcoeffs[39]=x8;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=0;
matrixinvcoeffs[42]=x2;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=x3;
matrixinvcoeffs[45]=0.0900000000000000;
matrixinvcoeffs[46]=x4;
matrixinvcoeffs[47]=0;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=0;
matrixinvcoeffs[51]=r21;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=npy;
matrixinvcoeffs[54]=x5;
matrixinvcoeffs[55]=rxp1_2;
matrixinvcoeffs[56]=0;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x6;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=x7;
matrixinvcoeffs[62]=x8;
matrixinvcoeffs[63]=((-1.00000000000000)*(rxp0_2));
if( !matrixinverse(matrixinvcoeffs,8) ) {
continue;
}
IKReal gconst0_0=matrixinvcoeffs[0], gconst0_1=matrixinvcoeffs[8], gconst0_2=matrixinvcoeffs[16], gconst0_3=matrixinvcoeffs[24], gconst0_4=matrixinvcoeffs[32], gconst0_5=matrixinvcoeffs[40], gconst0_6=matrixinvcoeffs[48], gconst0_7=matrixinvcoeffs[56], gconst1_0=matrixinvcoeffs[1], gconst1_1=matrixinvcoeffs[9], gconst1_2=matrixinvcoeffs[17], gconst1_3=matrixinvcoeffs[25], gconst1_4=matrixinvcoeffs[33], gconst1_5=matrixinvcoeffs[41], gconst1_6=matrixinvcoeffs[49], gconst1_7=matrixinvcoeffs[57], gconst2_0=matrixinvcoeffs[2], gconst2_1=matrixinvcoeffs[10], gconst2_2=matrixinvcoeffs[18], gconst2_3=matrixinvcoeffs[26], gconst2_4=matrixinvcoeffs[34], gconst2_5=matrixinvcoeffs[42], gconst2_6=matrixinvcoeffs[50], gconst2_7=matrixinvcoeffs[58], gconst3_0=matrixinvcoeffs[3], gconst3_1=matrixinvcoeffs[11], gconst3_2=matrixinvcoeffs[19], gconst3_3=matrixinvcoeffs[27], gconst3_4=matrixinvcoeffs[35], gconst3_5=matrixinvcoeffs[43], gconst3_6=matrixinvcoeffs[51], gconst3_7=matrixinvcoeffs[59], gconst4_0=matrixinvcoeffs[4], gconst4_1=matrixinvcoeffs[12], gconst4_2=matrixinvcoeffs[20], gconst4_3=matrixinvcoeffs[28], gconst4_4=matrixinvcoeffs[36], gconst4_5=matrixinvcoeffs[44], gconst4_6=matrixinvcoeffs[52], gconst4_7=matrixinvcoeffs[60], gconst5_0=matrixinvcoeffs[5], gconst5_1=matrixinvcoeffs[13], gconst5_2=matrixinvcoeffs[21], gconst5_3=matrixinvcoeffs[29], gconst5_4=matrixinvcoeffs[37], gconst5_5=matrixinvcoeffs[45], gconst5_6=matrixinvcoeffs[53], gconst5_7=matrixinvcoeffs[61], gconst6_0=matrixinvcoeffs[6], gconst6_1=matrixinvcoeffs[14], gconst6_2=matrixinvcoeffs[22], gconst6_3=matrixinvcoeffs[30], gconst6_4=matrixinvcoeffs[38], gconst6_5=matrixinvcoeffs[46], gconst6_6=matrixinvcoeffs[54], gconst6_7=matrixinvcoeffs[62], gconst7_0=matrixinvcoeffs[7], gconst7_1=matrixinvcoeffs[15], gconst7_2=matrixinvcoeffs[23], gconst7_3=matrixinvcoeffs[31], gconst7_4=matrixinvcoeffs[39], gconst7_5=matrixinvcoeffs[47], gconst7_6=matrixinvcoeffs[55], gconst7_7=matrixinvcoeffs[63];
IKReal op[162], zeror[48];
int numroots;
IKReal x9=((0.0153000000000000)*(gconst1_1)*(npx));
IKReal x10=((0.220025000000000)+(x9));
IKReal x11=((0.0153000000000000)*(gconst0_1)*(npy));
IKReal x12=((pp)+(x11));
IKReal x13=((((-1.00000000000000)*(x12)))+(x10));
IKReal x14=((0.220025000000000)+(x11));
IKReal x15=((-0.220025000000000)+(pp)+(x10));
IKReal x16=((((-1.00000000000000)*(x15)))+(x14));
IKReal x17=((0.720000000000000)*(gconst0_0)*(npy));
IKReal x18=((0.720000000000000)*(gconst1_0)*(npx));
IKReal x19=((0.180000000000000)*(gconst1_1)*(npx));
IKReal x20=((0.180000000000000)*(gconst0_1)*(npy));
IKReal x21=((-0.218400000000000)+(x10));
IKReal x22=((((-1.00000000000000)*(x12)))+(x21));
IKReal x23=((0.0144000000000000)*(gconst0_1)*(npy));
IKReal x24=((0.0144000000000000)*(gconst1_1)*(npx));
IKReal x25=((((-1.00000000000000)*(x24)))+(x23));
IKReal x26=((-0.218400000000000)+(x14));
IKReal x27=((((-1.00000000000000)*(x15)))+(x26));
IKReal x28=((0.00765000000000000)*(gconst1_1)*(r20));
IKReal x29=((0.00765000000000000)*(gconst0_1)*(r21));
IKReal x30=((pz)+(x29));
IKReal x31=((pz)+(x28));
IKReal x32=((0.360000000000000)*(gconst0_0)*(r21));
IKReal x33=((0.360000000000000)*(gconst1_0)*(r20));
IKReal x34=((0.0900000000000000)*(gconst1_1)*(r20));
IKReal x35=((0.0900000000000000)*(gconst0_1)*(r21));
IKReal x36=((0.00720000000000000)*(gconst0_1)*(r21));
IKReal x37=((0.00720000000000000)*(gconst1_1)*(r20));
IKReal x38=((((-1.00000000000000)*(x37)))+(x36));
IKReal x39=((0.0850000000000000)*(gconst0_1)*(rxp0_2));
IKReal x40=((0.0850000000000000)*(gconst1_1)*(rxp1_2));
IKReal x41=((0.0900000000000000)*(r22));
IKReal x42=((x39)+(x40)+(x41));
IKReal x43=((x39)+(x40));
IKReal x44=((((-1.00000000000000)*(x43)))+(x41));
IKReal x45=((4.00000000000000)*(gconst0_0)*(rxp0_2));
IKReal x46=((4.00000000000000)*(gconst1_0)*(rxp1_2));
IKReal x47=((x46)+(x45));
IKReal x48=((gconst1_1)*(rxp1_2));
IKReal x49=((gconst0_1)*(rxp0_2));
IKReal x50=((0.0800000000000000)*(x49));
IKReal x51=((0.0800000000000000)*(x48));
IKReal x52=((x51)+(x50));
IKReal x53=((0.000688500000000000)*(gconst1_1)*(r21));
IKReal x54=((0.000688500000000000)*(gconst0_1)*(r20));
IKReal x55=((0.0850000000000000)*(gconst0_1)*(pp)*(r20));
IKReal x56=((0.0850000000000000)*(gconst1_1)*(pp)*(r21));
IKReal x57=((0.170000000000000)*(gconst0_1)*(npx)*(pz));
IKReal x58=((0.180000000000000)*(rxp2_2));
IKReal x59=((0.170000000000000)*(gconst1_1)*(npy)*(pz));
IKReal x60=((x59)+(x58)+(x57));
IKReal x61=((x58)+(x55)+(x54)+(x56)+(x53));
IKReal x62=((8.00000000000000)*(gconst0_0)*(npx)*(pz));
IKReal x63=((8.00000000000000)*(gconst1_0)*(npy)*(pz));
IKReal x64=((4.00000000000000)*(gconst0_0)*(pp)*(r20));
IKReal x65=((0.0324000000000000)*(gconst0_0)*(r20));
IKReal x66=((0.0324000000000000)*(gconst1_0)*(r21));
IKReal x67=((4.00000000000000)*(gconst1_0)*(pp)*(r21));
IKReal x68=((gconst0_1)*(pp)*(r20));
IKReal x69=((0.00810000000000000)*(gconst1_1)*(r21));
IKReal x70=((gconst1_1)*(pp)*(r21));
IKReal x71=((0.00810000000000000)*(gconst0_1)*(r20));
IKReal x72=((2.00000000000000)*(gconst0_1)*(npx)*(pz));
IKReal x73=((2.00000000000000)*(gconst1_1)*(npy)*(pz));
IKReal x74=((0.160000000000000)*(gconst1_1)*(npy)*(pz));
IKReal x75=((0.160000000000000)*(gconst0_1)*(npx)*(pz));
IKReal x76=((0.000648000000000000)*(gconst1_1)*(r21));
IKReal x77=((0.0800000000000000)*(x68));
IKReal x78=((0.000648000000000000)*(gconst0_1)*(r20));
IKReal x79=((0.0800000000000000)*(x70));
IKReal x80=((x77)+(x76)+(x79)+(x78));
IKReal x81=((0.0153000000000000)*(gconst2_6)*(pz));
IKReal x82=((0.00810000000000000)*(gconst3_3)*(r21));
IKReal x83=((0.000688500000000000)*(gconst3_6)*(r21));
IKReal x84=((0.00380700000000000)*(gconst3_5)*(r21));
IKReal x85=((0.0850000000000000)*(gconst4_6)*(pp)*(r20));
IKReal x86=((0.180000000000000)*(gconst2_3)*(pz));
IKReal x87=((0.470000000000000)*(gconst4_5)*(pp)*(r20));
IKReal x88=((0.0846000000000000)*(gconst2_5)*(pz));
IKReal x89=((gconst4_3)*(pp)*(r20));
IKReal x90=((2.00000000000000)*(gconst5_3)*(npz)*(pz));
IKReal x91=((0.940000000000000)*(gconst5_5)*(npz)*(pz));
IKReal x92=((0.170000000000000)*(gconst3_6)*(npy)*(pz));
IKReal x93=((0.940000000000000)*(gconst3_5)*(npy)*(pz));
IKReal x94=((2.00000000000000)*(gconst3_3)*(npy)*(pz));
IKReal x95=((0.170000000000000)*(gconst5_6)*(npz)*(pz));
IKReal x96=((2.00000000000000)*(gconst4_3)*(npx)*(pz));
IKReal x97=((0.470000000000000)*(gconst3_5)*(pp)*(r21));
IKReal x98=((0.170000000000000)*(gconst4_6)*(npx)*(pz));
IKReal x99=((0.0850000000000000)*(gconst5_6)*(pp)*(r22));
IKReal x100=((0.470000000000000)*(gconst5_5)*(pp)*(r22));
IKReal x101=((gconst3_3)*(pp)*(r21));
IKReal x102=((0.0850000000000000)*(gconst3_6)*(pp)*(r21));
IKReal x103=((0.00810000000000000)*(gconst5_3)*(r22));
IKReal x104=((0.180000000000000)*(gconst7_3)*(rxp1_2));
IKReal x105=((0.00810000000000000)*(gconst4_3)*(r20));
IKReal x106=((0.0846000000000000)*(gconst7_5)*(rxp1_2));
IKReal x107=((0.00380700000000000)*(gconst4_5)*(r20));
IKReal x108=((0.940000000000000)*(gconst4_5)*(npx)*(pz));
IKReal x109=((0.0153000000000000)*(gconst7_6)*(rxp1_2));
IKReal x110=((gconst5_3)*(pp)*(r22));
IKReal x111=((0.00380700000000000)*(gconst5_5)*(r22));
IKReal x112=((0.000688500000000000)*(gconst4_6)*(r20));
IKReal x113=((0.0846000000000000)*(gconst6_5)*(rxp0_2));
IKReal x114=((0.180000000000000)*(gconst6_3)*(rxp0_2));
IKReal x115=((0.000688500000000000)*(gconst5_6)*(r22));
IKReal x116=((0.0153000000000000)*(gconst6_6)*(rxp0_2));
IKReal x117=((0.170000000000000)*(gconst5_4)*(pp)*(r22));
IKReal x118=((0.00137700000000000)*(gconst4_4)*(r20));
IKReal x119=((0.170000000000000)*(gconst3_4)*(pp)*(r21));
IKReal x120=((0.0306000000000000)*(gconst7_4)*(rxp1_2));
IKReal x121=((0.340000000000000)*(gconst4_4)*(npx)*(pz));
IKReal x122=((0.00137700000000000)*(gconst5_4)*(r22));
IKReal x123=((0.0306000000000000)*(gconst6_4)*(rxp0_2));
IKReal x124=((0.340000000000000)*(gconst5_4)*(npz)*(pz));
IKReal x125=((0.00137700000000000)*(gconst3_4)*(r21));
IKReal x126=((0.0306000000000000)*(gconst2_4)*(pz));
IKReal x127=((0.340000000000000)*(gconst3_4)*(npy)*(pz));
IKReal x128=((0.170000000000000)*(gconst4_4)*(pp)*(r20));
IKReal x129=((x126)+(x127)+(x124)+(x125)+(x128));
IKReal x130=((0.0306000000000000)*(gconst2_7)*(pz));
IKReal x131=((0.170000000000000)*(gconst4_7)*(pp)*(r20));
IKReal x132=((4.00000000000000)*(gconst5_2)*(npz)*(pz));
IKReal x133=((2.00000000000000)*(gconst4_2)*(pp)*(r20));
IKReal x134=((0.340000000000000)*(gconst3_7)*(npy)*(pz));
IKReal x135=((4.00000000000000)*(gconst3_2)*(npy)*(pz));
IKReal x136=((0.00137700000000000)*(gconst3_7)*(r21));
IKReal x137=((0.360000000000000)*(gconst2_2)*(pz));
IKReal x138=((0.0162000000000000)*(gconst3_2)*(r21));
IKReal x139=((0.340000000000000)*(gconst5_7)*(npz)*(pz));
IKReal x140=((0.0306000000000000)*(gconst7_7)*(rxp1_2));
IKReal x141=((0.0306000000000000)*(gconst6_7)*(rxp0_2));
IKReal x142=((0.170000000000000)*(gconst5_7)*(pp)*(r22));
IKReal x143=((0.00137700000000000)*(gconst5_7)*(r22));
IKReal x144=((2.00000000000000)*(gconst3_2)*(pp)*(r21));
IKReal x145=((2.00000000000000)*(gconst5_2)*(pp)*(r22));
IKReal x146=((0.0162000000000000)*(gconst5_2)*(r22));
IKReal x147=((0.0162000000000000)*(gconst4_2)*(r20));
IKReal x148=((0.360000000000000)*(gconst6_2)*(rxp0_2));
IKReal x149=((0.170000000000000)*(gconst3_7)*(pp)*(r21));
IKReal x150=((4.00000000000000)*(gconst4_2)*(npx)*(pz));
IKReal x151=((0.340000000000000)*(gconst4_7)*(npx)*(pz));
IKReal x152=((0.360000000000000)*(gconst7_2)*(rxp1_2));
IKReal x153=((0.00137700000000000)*(gconst4_7)*(r20));
IKReal x154=((gconst3_4)*(npy)*(pz));
IKReal x155=((0.000324000000000000)*(gconst5_5)*(r22));
IKReal x156=((0.000324000000000000)*(gconst4_5)*(r20));
IKReal x157=((0.500000000000000)*(gconst4_4)*(pp)*(r20));
IKReal x158=((0.0800000000000000)*(gconst4_5)*(npx)*(pz));
IKReal x159=((0.0400000000000000)*(gconst5_5)*(pp)*(r22));
IKReal x160=((0.0400000000000000)*(gconst3_5)*(pp)*(r21));
IKReal x161=((0.00405000000000000)*(gconst3_4)*(r21));
IKReal x162=((0.00720000000000000)*(gconst6_5)*(rxp0_2));
IKReal x163=((gconst5_4)*(npz)*(pz));
IKReal x164=((0.0900000000000000)*(gconst2_4)*(pz));
IKReal x165=((0.00720000000000000)*(gconst7_5)*(rxp1_2));
IKReal x166=((0.500000000000000)*(gconst3_4)*(pp)*(r21));
IKReal x167=((0.000324000000000000)*(gconst3_5)*(r21));
IKReal x168=((gconst4_4)*(npx)*(pz));
IKReal x169=((0.0900000000000000)*(gconst7_4)*(rxp1_2));
IKReal x170=((0.500000000000000)*(gconst5_4)*(pp)*(r22));
IKReal x171=((0.0800000000000000)*(gconst3_5)*(npy)*(pz));
IKReal x172=((0.0900000000000000)*(gconst6_4)*(rxp0_2));
IKReal x173=((0.0800000000000000)*(gconst5_5)*(npz)*(pz));
IKReal x174=((0.0400000000000000)*(gconst4_5)*(pp)*(r20));
IKReal x175=((0.00405000000000000)*(gconst5_4)*(r22));
IKReal x176=((0.00720000000000000)*(gconst2_5)*(pz));
IKReal x177=((0.00405000000000000)*(gconst4_4)*(r20));
IKReal x178=((0.00712800000000000)*(gconst5_6)*(r22));
IKReal x179=((0.158400000000000)*(gconst7_6)*(rxp1_2));
IKReal x180=((1.76000000000000)*(gconst4_6)*(npx)*(pz));
IKReal x181=((0.158400000000000)*(gconst6_6)*(rxp0_2));
IKReal x182=((0.880000000000000)*(gconst3_6)*(pp)*(r21));
IKReal x183=((0.00712800000000000)*(gconst4_6)*(r20));
IKReal x184=((0.880000000000000)*(gconst5_6)*(pp)*(r22));
IKReal x185=((1.76000000000000)*(gconst5_6)*(npz)*(pz));
IKReal x186=((0.880000000000000)*(gconst4_6)*(pp)*(r20));
IKReal x187=((0.158400000000000)*(gconst2_6)*(pz));
IKReal x188=((1.76000000000000)*(gconst3_6)*(npy)*(pz));
IKReal x189=((0.00712800000000000)*(gconst3_6)*(r21));
IKReal x190=((0.0324000000000000)*(gconst3_3)*(r21));
IKReal x191=((4.00000000000000)*(x89));
IKReal x192=((0.340000000000000)*(gconst5_6)*(pp)*(r22));
IKReal x193=((0.720000000000000)*(gconst2_3)*(pz));
IKReal x194=((0.00275400000000000)*(gconst5_6)*(r22));
IKReal x195=((0.0612000000000000)*(gconst6_6)*(rxp0_2));
IKReal x196=((8.00000000000000)*(gconst3_3)*(npy)*(pz));
IKReal x197=((8.00000000000000)*(gconst5_3)*(npz)*(pz));
IKReal x198=((0.340000000000000)*(gconst3_6)*(pp)*(r21));
IKReal x199=((0.680000000000000)*(gconst4_6)*(npx)*(pz));
IKReal x200=((0.0612000000000000)*(gconst7_6)*(rxp1_2));
IKReal x201=((0.00275400000000000)*(gconst4_6)*(r20));
IKReal x202=((4.00000000000000)*(x110));
IKReal x203=((0.680000000000000)*(gconst5_6)*(npz)*(pz));
IKReal x204=((0.0612000000000000)*(gconst2_6)*(pz));
IKReal x205=((0.00275400000000000)*(gconst3_6)*(r21));
IKReal x206=((0.0324000000000000)*(gconst5_3)*(r22));
IKReal x207=((0.0324000000000000)*(gconst4_3)*(r20));
IKReal x208=((0.720000000000000)*(gconst7_3)*(rxp1_2));
IKReal x209=((0.340000000000000)*(gconst4_6)*(pp)*(r20));
IKReal x210=((0.680000000000000)*(gconst3_6)*(npy)*(pz));
IKReal x211=((8.00000000000000)*(gconst4_3)*(npx)*(pz));
IKReal x212=((0.720000000000000)*(gconst6_3)*(rxp0_2));
IKReal x213=((4.00000000000000)*(x101));
IKReal x214=((0.000243000000000000)*(gconst5_5)*(r22));
IKReal x215=((0.00540000000000000)*(gconst7_5)*(rxp1_2));
IKReal x216=((0.00720000000000000)*(gconst7_4)*(rxp1_2));
IKReal x217=((0.000324000000000000)*(gconst5_4)*(r22));
IKReal x218=((0.000324000000000000)*(gconst4_4)*(r20));
IKReal x219=((0.0400000000000000)*(gconst3_4)*(pp)*(r21));
IKReal x220=((0.0600000000000000)*(gconst4_5)*(npx)*(pz));
IKReal x221=((0.000243000000000000)*(gconst4_5)*(r20));
IKReal x222=((0.0300000000000000)*(gconst5_5)*(pp)*(r22));
IKReal x223=((0.0300000000000000)*(gconst3_5)*(pp)*(r21));
IKReal x224=((0.0400000000000000)*(gconst5_4)*(pp)*(r22));
IKReal x225=((0.00720000000000000)*(gconst6_4)*(rxp0_2));
IKReal x226=((0.0800000000000000)*(x168));
IKReal x227=((0.00540000000000000)*(gconst6_5)*(rxp0_2));
IKReal x228=((0.000243000000000000)*(gconst3_5)*(r21));
IKReal x229=((0.000324000000000000)*(gconst3_4)*(r21));
IKReal x230=((0.00540000000000000)*(gconst2_5)*(pz));
IKReal x231=((0.0300000000000000)*(gconst4_5)*(pp)*(r20));
IKReal x232=((0.0800000000000000)*(x163));
IKReal x233=((0.0800000000000000)*(x154));
IKReal x234=((0.0600000000000000)*(gconst5_5)*(npz)*(pz));
IKReal x235=((0.00720000000000000)*(gconst2_4)*(pz));
IKReal x236=((0.0600000000000000)*(gconst3_5)*(npy)*(pz));
IKReal x237=((0.0400000000000000)*(gconst4_4)*(pp)*(r20));
IKReal x238=((0.160000000000000)*(gconst3_6)*(npy)*(pz));
IKReal x239=((0.0800000000000000)*(gconst4_6)*(pp)*(r20));
IKReal x240=((0.0144000000000000)*(gconst2_6)*(pz));
IKReal x241=((0.000648000000000000)*(gconst3_6)*(r21));
IKReal x242=((0.160000000000000)*(gconst5_6)*(npz)*(pz));
IKReal x243=((0.0144000000000000)*(gconst7_6)*(rxp1_2));
IKReal x244=((0.0800000000000000)*(gconst3_6)*(pp)*(r21));
IKReal x245=((0.000648000000000000)*(gconst4_6)*(r20));
IKReal x246=((0.0800000000000000)*(gconst5_6)*(pp)*(r22));
IKReal x247=((0.0144000000000000)*(gconst6_6)*(rxp0_2));
IKReal x248=((0.000648000000000000)*(gconst5_6)*(r22));
IKReal x249=((0.160000000000000)*(gconst4_6)*(npx)*(pz));
IKReal x250=((0.00380700000000000)*(gconst7_5)*(r20));
IKReal x251=((0.470000000000000)*(gconst6_5)*(pp)*(r21));
IKReal x252=((0.940000000000000)*(gconst7_5)*(npx)*(pz));
IKReal x253=((gconst6_3)*(pp)*(r21));
IKReal x254=((0.170000000000000)*(gconst2_6)*(npz)*(pz));
IKReal x255=((0.170000000000000)*(gconst7_6)*(npx)*(pz));
IKReal x256=((2.00000000000000)*(gconst7_3)*(npx)*(pz));
IKReal x257=((2.00000000000000)*(gconst2_3)*(npz)*(pz));
IKReal x258=((0.940000000000000)*(gconst2_5)*(npz)*(pz));
IKReal x259=((0.0850000000000000)*(gconst6_6)*(pp)*(r21));
IKReal x260=((0.000688500000000000)*(gconst7_6)*(r20));
IKReal x261=((0.00810000000000000)*(gconst7_3)*(r20));
IKReal x262=((0.0846000000000000)*(gconst4_5)*(rxp1_2));
IKReal x263=((0.0153000000000000)*(gconst4_6)*(rxp1_2));
IKReal x264=((0.180000000000000)*(gconst3_3)*(rxp0_2));
IKReal x265=((0.0846000000000000)*(gconst3_5)*(rxp0_2));
IKReal x266=((2.00000000000000)*(gconst6_3)*(npy)*(pz));
IKReal x267=((0.00810000000000000)*(gconst6_3)*(r21));
IKReal x268=((0.000688500000000000)*(gconst2_6)*(r22));
IKReal x269=((0.180000000000000)*(gconst5_3)*(pz));
IKReal x270=((0.170000000000000)*(gconst6_6)*(npy)*(pz));
IKReal x271=((gconst2_3)*(pp)*(r22));
IKReal x272=((0.0850000000000000)*(gconst7_6)*(pp)*(r20));
IKReal x273=((0.0846000000000000)*(gconst5_5)*(pz));
IKReal x274=((0.000688500000000000)*(gconst6_6)*(r21));
IKReal x275=((0.470000000000000)*(gconst2_5)*(pp)*(r22));
IKReal x276=((0.180000000000000)*(gconst4_3)*(rxp1_2));
IKReal x277=((gconst7_3)*(pp)*(r20));
IKReal x278=((0.0153000000000000)*(gconst3_6)*(rxp0_2));
IKReal x279=((0.940000000000000)*(gconst6_5)*(npy)*(pz));
IKReal x280=((0.00380700000000000)*(gconst6_5)*(r21));
IKReal x281=((0.0850000000000000)*(gconst2_6)*(pp)*(r22));
IKReal x282=((0.0153000000000000)*(gconst5_6)*(pz));
IKReal x283=((0.00380700000000000)*(gconst2_5)*(r22));
IKReal x284=((0.470000000000000)*(gconst7_5)*(pp)*(r20));
IKReal x285=((0.00810000000000000)*(gconst2_3)*(r22));
IKReal x286=((0.00137700000000000)*(gconst2_4)*(r22));
IKReal x287=((0.170000000000000)*(gconst7_4)*(pp)*(r20));
IKReal x288=((0.0306000000000000)*(gconst3_4)*(rxp0_2));
IKReal x289=((0.340000000000000)*(gconst6_4)*(npy)*(pz));
IKReal x290=((0.0306000000000000)*(gconst4_4)*(rxp1_2));
IKReal x291=((0.0306000000000000)*(gconst5_4)*(pz));
IKReal x292=((0.170000000000000)*(gconst2_4)*(pp)*(r22));
IKReal x293=((0.00137700000000000)*(gconst6_4)*(r21));
IKReal x294=((x290)+(x291)+(x292)+(x293)+(x289)+(x288)+(x287)+(x286));
IKReal x295=((0.170000000000000)*(gconst6_4)*(pp)*(r21));
IKReal x296=((0.340000000000000)*(gconst7_4)*(npx)*(pz));
IKReal x297=((0.340000000000000)*(gconst2_4)*(npz)*(pz));
IKReal x298=((0.00137700000000000)*(gconst7_4)*(r20));
IKReal x299=((x298)+(x295)+(x296)+(x297));
IKReal x300=((((-1.00000000000000)*(x299)))+(x294));
IKReal x301=((0.340000000000000)*(gconst7_7)*(npx)*(pz));
IKReal x302=((0.00137700000000000)*(gconst7_7)*(r20));
IKReal x303=((4.00000000000000)*(gconst2_2)*(npz)*(pz));
IKReal x304=((0.0162000000000000)*(gconst7_2)*(r20));
IKReal x305=((0.340000000000000)*(gconst2_7)*(npz)*(pz));
IKReal x306=((0.170000000000000)*(gconst6_7)*(pp)*(r21));
IKReal x307=((2.00000000000000)*(gconst6_2)*(pp)*(r21));
IKReal x308=((4.00000000000000)*(gconst7_2)*(npx)*(pz));
IKReal x309=((2.00000000000000)*(gconst2_2)*(pp)*(r22));
IKReal x310=((0.360000000000000)*(gconst5_2)*(pz));
IKReal x311=((4.00000000000000)*(gconst6_2)*(npy)*(pz));
IKReal x312=((0.0306000000000000)*(gconst3_7)*(rxp0_2));
IKReal x313=((0.0162000000000000)*(gconst6_2)*(r21));
IKReal x314=((0.170000000000000)*(gconst2_7)*(pp)*(r22));
IKReal x315=((2.00000000000000)*(gconst7_2)*(pp)*(r20));
IKReal x316=((0.360000000000000)*(gconst3_2)*(rxp0_2));
IKReal x317=((0.170000000000000)*(gconst7_7)*(pp)*(r20));
IKReal x318=((0.0162000000000000)*(gconst2_2)*(r22));
IKReal x319=((0.0306000000000000)*(gconst4_7)*(rxp1_2));
IKReal x320=((0.00137700000000000)*(gconst6_7)*(r21));
IKReal x321=((0.0306000000000000)*(gconst5_7)*(pz));
IKReal x322=((0.00137700000000000)*(gconst2_7)*(r22));
IKReal x323=((0.340000000000000)*(gconst6_7)*(npy)*(pz));
IKReal x324=((0.360000000000000)*(gconst4_2)*(rxp1_2));
IKReal x325=((0.0800000000000000)*(gconst6_5)*(npy)*(pz));
IKReal x326=((gconst2_4)*(npz)*(pz));
IKReal x327=((0.00720000000000000)*(gconst3_5)*(rxp0_2));
IKReal x328=((0.00720000000000000)*(gconst4_5)*(rxp1_2));
IKReal x329=((0.000324000000000000)*(gconst2_5)*(r22));
IKReal x330=((0.00720000000000000)*(gconst5_5)*(pz));
IKReal x331=((0.0400000000000000)*(gconst7_5)*(pp)*(r20));
IKReal x332=((gconst7_4)*(npx)*(pz));
IKReal x333=((0.000324000000000000)*(gconst6_5)*(r21));
IKReal x334=((0.500000000000000)*(gconst6_4)*(pp)*(r21));
IKReal x335=((0.00405000000000000)*(gconst7_4)*(r20));
IKReal x336=((0.0400000000000000)*(gconst2_5)*(pp)*(r22));
IKReal x337=((0.0400000000000000)*(gconst6_5)*(pp)*(r21));
IKReal x338=((gconst6_4)*(npy)*(pz));
IKReal x339=((0.0900000000000000)*(gconst3_4)*(rxp0_2));
IKReal x340=((0.00405000000000000)*(gconst6_4)*(r21));
IKReal x341=((0.0800000000000000)*(gconst2_5)*(npz)*(pz));
IKReal x342=((0.0900000000000000)*(gconst4_4)*(rxp1_2));
IKReal x343=((0.000324000000000000)*(gconst7_5)*(r20));
IKReal x344=((0.0900000000000000)*(gconst5_4)*(pz));
IKReal x345=((0.00405000000000000)*(gconst2_4)*(r22));
IKReal x346=((0.500000000000000)*(gconst7_4)*(pp)*(r20));
IKReal x347=((0.0800000000000000)*(gconst7_5)*(npx)*(pz));
IKReal x348=((0.500000000000000)*(gconst2_4)*(pp)*(r22));
IKReal x349=((0.158400000000000)*(gconst5_6)*(pz));
IKReal x350=((0.00712800000000000)*(gconst2_6)*(r22));
IKReal x351=((0.880000000000000)*(gconst7_6)*(pp)*(r20));
IKReal x352=((0.158400000000000)*(gconst3_6)*(rxp0_2));
IKReal x353=((0.880000000000000)*(gconst2_6)*(pp)*(r22));
IKReal x354=((1.76000000000000)*(gconst6_6)*(npy)*(pz));
IKReal x355=((0.158400000000000)*(gconst4_6)*(rxp1_2));
IKReal x356=((0.00712800000000000)*(gconst6_6)*(r21));
IKReal x357=((x351)+(x350)+(x353)+(x352)+(x355)+(x354)+(x356)+(x349));
IKReal x358=((0.00712800000000000)*(gconst7_6)*(r20));
IKReal x359=((1.76000000000000)*(gconst7_6)*(npx)*(pz));
IKReal x360=((1.76000000000000)*(gconst2_6)*(npz)*(pz));
IKReal x361=((0.880000000000000)*(gconst6_6)*(pp)*(r21));
IKReal x362=((x359)+(x358)+(x360)+(x361));
IKReal x363=((0.0324000000000000)*(gconst7_3)*(r20));
IKReal x364=((8.00000000000000)*(gconst2_3)*(npz)*(pz));
IKReal x365=((0.340000000000000)*(gconst2_6)*(pp)*(r22));
IKReal x366=((0.680000000000000)*(gconst6_6)*(npy)*(pz));
IKReal x367=((0.0612000000000000)*(gconst5_6)*(pz));
IKReal x368=((0.00275400000000000)*(gconst6_6)*(r21));
IKReal x369=((0.340000000000000)*(gconst7_6)*(pp)*(r20));
IKReal x370=((8.00000000000000)*(gconst7_3)*(npx)*(pz));
IKReal x371=((0.00275400000000000)*(gconst2_6)*(r22));
IKReal x372=((0.0612000000000000)*(gconst4_6)*(rxp1_2));
IKReal x373=((4.00000000000000)*(x253));
IKReal x374=((0.0612000000000000)*(gconst3_6)*(rxp0_2));
IKReal x375=((4.00000000000000)*(x277));
IKReal x376=((0.720000000000000)*(gconst3_3)*(rxp0_2));
IKReal x377=((0.00275400000000000)*(gconst7_6)*(r20));
IKReal x378=((0.340000000000000)*(gconst6_6)*(pp)*(r21));
IKReal x379=((0.720000000000000)*(gconst5_3)*(pz));
IKReal x380=((0.0324000000000000)*(gconst2_3)*(r22));
IKReal x381=((0.0324000000000000)*(gconst6_3)*(r21));
IKReal x382=((0.680000000000000)*(gconst2_6)*(npz)*(pz));
IKReal x383=((8.00000000000000)*(gconst6_3)*(npy)*(pz));
IKReal x384=((4.00000000000000)*(x271));
IKReal x385=((0.720000000000000)*(gconst4_3)*(rxp1_2));
IKReal x386=((0.680000000000000)*(gconst7_6)*(npx)*(pz));
IKReal x387=((x309)+(x306)+(x305)+(x302)+(x301)+(x324)+(x318)+(x315)+(x316)+(x311)+(x310)+(x313));
IKReal x388=((0.00720000000000000)*(gconst3_4)*(rxp0_2));
IKReal x389=((0.00540000000000000)*(gconst5_5)*(pz));
IKReal x390=((0.0300000000000000)*(gconst2_5)*(pp)*(r22));
IKReal x391=((0.0600000000000000)*(gconst6_5)*(npy)*(pz));
IKReal x392=((0.00540000000000000)*(gconst4_5)*(rxp1_2));
IKReal x393=((0.00720000000000000)*(gconst5_4)*(pz));
IKReal x394=((0.0400000000000000)*(gconst7_4)*(pp)*(r20));
IKReal x395=((0.00720000000000000)*(gconst4_4)*(rxp1_2));
IKReal x396=((0.0400000000000000)*(gconst2_4)*(pp)*(r22));
IKReal x397=((0.00540000000000000)*(gconst3_5)*(rxp0_2));
IKReal x398=((0.000243000000000000)*(gconst2_5)*(r22));
IKReal x399=((0.000324000000000000)*(gconst2_4)*(r22));
IKReal x400=((0.0300000000000000)*(gconst7_5)*(pp)*(r20));
IKReal x401=((0.0800000000000000)*(x338));
IKReal x402=((0.000324000000000000)*(gconst6_4)*(r21));
IKReal x403=((0.000243000000000000)*(gconst6_5)*(r21));
IKReal x404=((0.0300000000000000)*(gconst6_5)*(pp)*(r21));
IKReal x405=((0.0400000000000000)*(gconst6_4)*(pp)*(r21));
IKReal x406=((0.0800000000000000)*(x326));
IKReal x407=((0.0600000000000000)*(gconst2_5)*(npz)*(pz));
IKReal x408=((0.000243000000000000)*(gconst7_5)*(r20));
IKReal x409=((0.000324000000000000)*(gconst7_4)*(r20));
IKReal x410=((0.0800000000000000)*(x332));
IKReal x411=((0.0600000000000000)*(gconst7_5)*(npx)*(pz));
IKReal x412=((0.0800000000000000)*(gconst6_6)*(pp)*(r21));
IKReal x413=((0.160000000000000)*(gconst2_6)*(npz)*(pz));
IKReal x414=((0.000648000000000000)*(gconst7_6)*(r20));
IKReal x415=((0.160000000000000)*(gconst7_6)*(npx)*(pz));
IKReal x416=((0.0800000000000000)*(gconst2_6)*(pp)*(r22));
IKReal x417=((0.0144000000000000)*(gconst3_6)*(rxp0_2));
IKReal x418=((0.000648000000000000)*(gconst6_6)*(r21));
IKReal x419=((0.0800000000000000)*(gconst7_6)*(pp)*(r20));
IKReal x420=((0.000648000000000000)*(gconst2_6)*(r22));
IKReal x421=((0.160000000000000)*(gconst6_6)*(npy)*(pz));
IKReal x422=((0.0144000000000000)*(gconst5_6)*(pz));
IKReal x423=((0.0144000000000000)*(gconst4_6)*(rxp1_2));
IKReal x424=((x308)+(x306)+(x307)+(x304)+(x305)+(x302)+(x303)+(x301));
op[0]=x13;
op[1]=0;
op[2]=x13;
op[3]=0;
op[4]=((((-1.00000000000000)*(x18)))+(x17));
op[5]=0;
op[6]=x16;
op[7]=0;
op[8]=x16;
op[9]=-0.0376000000000000;
op[10]=0;
op[11]=-0.0376000000000000;
op[12]=((((-1.00000000000000)*(x18)))+(((-1.00000000000000)*(x20)))+(x17)+(x19));
op[13]=0;
op[14]=((((-1.00000000000000)*(x17)))+(((-1.00000000000000)*(x20)))+(x19)+(x18));
op[15]=-0.0376000000000000;
op[16]=0;
op[17]=-0.0376000000000000;
op[18]=x22;
op[19]=0;
op[20]=x22;
op[21]=x25;
op[22]=((((-1.00000000000000)*(x17)))+(x18));
op[23]=x25;
op[24]=x27;
op[25]=0;
op[26]=x27;
op[27]=((-0.470000000000000)+(((-1.00000000000000)*(x30)))+(x28));
op[28]=0;
op[29]=((0.470000000000000)+(((-1.00000000000000)*(x30)))+(x28));
op[30]=0;
op[31]=((((-1.00000000000000)*(x33)))+(x32));
op[32]=0;
op[33]=((-0.470000000000000)+(((-1.00000000000000)*(x31)))+(x29));
op[34]=0;
op[35]=((0.470000000000000)+(((-1.00000000000000)*(x31)))+(x29));
op[36]=0.0400000000000000;
op[37]=0.880000000000000;
op[38]=-0.0400000000000000;
op[39]=((((-1.00000000000000)*(x35)))+(((-1.00000000000000)*(x33)))+(x32)+(x34));
op[40]=0;
op[41]=((((-1.00000000000000)*(x35)))+(((-1.00000000000000)*(x32)))+(x33)+(x34));
op[42]=0.0400000000000000;
op[43]=0.880000000000000;
op[44]=-0.0400000000000000;
op[45]=((-0.0300000000000000)+(((-1.00000000000000)*(x30)))+(x28));
op[46]=-0.0800000000000000;
op[47]=((0.0300000000000000)+(((-1.00000000000000)*(x30)))+(x28));
op[48]=x38;
op[49]=((((-1.00000000000000)*(x32)))+(x33));
op[50]=x38;
op[51]=((-0.0300000000000000)+(((-1.00000000000000)*(x31)))+(x29));
op[52]=-0.0800000000000000;
op[53]=((0.0300000000000000)+(((-1.00000000000000)*(x31)))+(x29));
op[54]=x42;
op[55]=-0.940000000000000;
op[56]=x42;
op[57]=-0.170000000000000;
op[58]=((-1.00000000000000)*(x47));
op[59]=0.170000000000000;
op[60]=x44;
op[61]=0.940000000000000;
op[62]=x44;
op[63]=-0.440000000000000;
op[64]=0.0800000000000000;
op[65]=0.440000000000000;
op[66]=((((-1.00000000000000)*(x47)))+(x48)+(x49));
op[67]=0.680000000000000;
op[68]=((x48)+(x49)+(x47));
op[69]=0.440000000000000;
op[70]=-0.0800000000000000;
op[71]=-0.440000000000000;
op[72]=((0.0400000000000000)+(x42));
op[73]=-0.0600000000000000;
op[74]=((-0.0400000000000000)+(x42));
op[75]=((0.170000000000000)+(((-1.00000000000000)*(x52))));
op[76]=x47;
op[77]=((-0.170000000000000)+(((-1.00000000000000)*(x52))));
op[78]=((-0.0400000000000000)+(((-1.00000000000000)*(x43)))+(x41));
op[79]=0.0600000000000000;
op[80]=((0.0400000000000000)+(((-1.00000000000000)*(x43)))+(x41));
op[81]=((0.0799000000000000)+(x55)+(x54)+(x56)+(x53)+(((-1.00000000000000)*(x60))));
op[82]=0;
op[83]=((-0.0799000000000000)+(x55)+(x54)+(x56)+(x53)+(((-1.00000000000000)*(x60))));
op[84]=0;
op[85]=((-0.912500000000000)+(x62)+(x63)+(((-1.00000000000000)*(x67)))+(((-1.00000000000000)*(x66)))+(((-1.00000000000000)*(x65)))+(((-1.00000000000000)*(x64))));
op[86]=0;
op[87]=((-0.0799000000000000)+(x59)+(x57)+(((-1.00000000000000)*(x61))));
op[88]=0;
op[89]=((0.0799000000000000)+(x59)+(x57)+(((-1.00000000000000)*(x61))));
op[90]=-0.00680000000000000;
op[91]=-0.149600000000000;
op[92]=0.00680000000000000;
op[93]=((0.0275000000000000)+(((-1.00000000000000)*(x72)))+(((-1.00000000000000)*(x73)))+(x71)+(x70)+(x62)+(x63)+(x68)+(x69)+(((-1.00000000000000)*(x67)))+(((-1.00000000000000)*(x66)))+(((-1.00000000000000)*(x65)))+(((-1.00000000000000)*(x64))));
op[94]=0.150400000000000;
op[95]=((-0.0275000000000000)+(((-1.00000000000000)*(x72)))+(((-1.00000000000000)*(x73)))+(x71)+(x70)+(x64)+(x65)+(x66)+(x67)+(x68)+(x69)+(((-1.00000000000000)*(x63)))+(((-1.00000000000000)*(x62))));
op[96]=0.00680000000000000;
op[97]=0.149600000000000;
op[98]=-0.00680000000000000;
op[99]=((0.00510000000000000)+(x55)+(x54)+(x56)+(x53)+(((-1.00000000000000)*(x60))));
op[100]=0.0136000000000000;
op[101]=((-0.00510000000000000)+(x55)+(x54)+(x56)+(x53)+(((-1.00000000000000)*(x60))));
op[102]=((-0.00480000000000000)+(x75)+(x74)+(((-1.00000000000000)*(x80))));
op[103]=((0.0261000000000000)+(x64)+(x65)+(x66)+(x67)+(((-1.00000000000000)*(x63)))+(((-1.00000000000000)*(x62))));
op[104]=((0.00480000000000000)+(x75)+(x74)+(((-1.00000000000000)*(x80))));
op[105]=((-0.00510000000000000)+(x59)+(x57)+(((-1.00000000000000)*(x61))));
op[106]=-0.0136000000000000;
op[107]=((0.00510000000000000)+(x59)+(x57)+(((-1.00000000000000)*(x61))));
op[108]=((((-1.00000000000000)*(x108)))+(((-1.00000000000000)*(x100)))+(((-1.00000000000000)*(x107)))+(((-1.00000000000000)*(x106)))+(((-1.00000000000000)*(x111)))+(((-1.00000000000000)*(x113)))+(x112)+(x110)+(x116)+(x115)+(x114)+(x109)+(x104)+(x105)+(x101)+(x102)+(x103)+(x88)+(x87)+(x84)+(x99)+(x98)+(x91)+(x93)+(x96)+(((-1.00000000000000)*(x90)))+(((-1.00000000000000)*(x97)))+(((-1.00000000000000)*(x94)))+(((-1.00000000000000)*(x95)))+(((-1.00000000000000)*(x92)))+(((-1.00000000000000)*(x89)))+(((-1.00000000000000)*(x86)))+(((-1.00000000000000)*(x81)))+(((-1.00000000000000)*(x83)))+(((-1.00000000000000)*(x82)))+(((-1.00000000000000)*(x85))));
op[109]=((0.456250000000000)+(((-1.00000000000000)*(x143)))+(((-1.00000000000000)*(x142)))+(((-1.00000000000000)*(x141)))+(((-1.00000000000000)*(x140)))+(((-1.00000000000000)*(x149)))+(((-1.00000000000000)*(x151)))+(((-1.00000000000000)*(x153)))+(x152)+(x150)+(x144)+(x145)+(x146)+(x147)+(x148)+(x134)+(x136)+(x131)+(x130)+(x139)+(((-1.00000000000000)*(x137)))+(((-1.00000000000000)*(x135)))+(((-1.00000000000000)*(x132)))+(((-1.00000000000000)*(x133)))+(((-1.00000000000000)*(x138))));
op[110]=((((-1.00000000000000)*(x109)))+(((-1.00000000000000)*(x108)))+(((-1.00000000000000)*(x101)))+(((-1.00000000000000)*(x100)))+(((-1.00000000000000)*(x107)))+(((-1.00000000000000)*(x106)))+(((-1.00000000000000)*(x105)))+(((-1.00000000000000)*(x104)))+(((-1.00000000000000)*(x103)))+(((-1.00000000000000)*(x102)))+(((-1.00000000000000)*(x111)))+(((-1.00000000000000)*(x112)))+(((-1.00000000000000)*(x113)))+(((-1.00000000000000)*(x114)))+(((-1.00000000000000)*(x115)))+(((-1.00000000000000)*(x116)))+(((-1.00000000000000)*(x110)))+(x88)+(x89)+(x82)+(x83)+(x81)+(x86)+(x87)+(x84)+(x85)+(x91)+(x90)+(x93)+(x92)+(x95)+(x94)+(((-1.00000000000000)*(x96)))+(((-1.00000000000000)*(x97)))+(((-1.00000000000000)*(x98)))+(((-1.00000000000000)*(x99))));
op[111]=((0.159800000000000)+(((-1.00000000000000)*(x129)))+(x122)+(x123)+(x120)+(x121)+(x117)+(x119)+(x118));
op[112]=((((-1.88000000000000)*(gconst3_6)*(pp)*(r21)))+(((3.76000000000000)*(gconst3_6)*(npy)*(pz)))+(((0.338400000000000)*(gconst2_6)*(pz)))+(((-0.338400000000000)*(gconst6_6)*(rxp0_2)))+(((0.0152280000000000)*(gconst3_6)*(r21)))+(((-0.0152280000000000)*(gconst4_6)*(r20)))+(((-1.88000000000000)*(gconst5_6)*(pp)*(r22)))+(((-0.0152280000000000)*(gconst5_6)*(r22)))+(((-3.76000000000000)*(gconst4_6)*(npx)*(pz)))+(((3.76000000000000)*(gconst5_6)*(npz)*(pz)))+(((1.88000000000000)*(gconst4_6)*(pp)*(r20)))+(((-0.338400000000000)*(gconst7_6)*(rxp1_2))));
op[113]=((-0.159800000000000)+(((-1.00000000000000)*(x129)))+(x122)+(x123)+(x120)+(x121)+(x117)+(x119)+(x118));
op[114]=((((-1.00000000000000)*(x109)))+(((-1.00000000000000)*(x108)))+(((-1.00000000000000)*(x100)))+(((-1.00000000000000)*(x107)))+(((-1.00000000000000)*(x106)))+(((-1.00000000000000)*(x102)))+(((-1.00000000000000)*(x111)))+(((-1.00000000000000)*(x112)))+(((-1.00000000000000)*(x113)))+(((-1.00000000000000)*(x115)))+(((-1.00000000000000)*(x116)))+(x110)+(x114)+(x104)+(x105)+(x101)+(x103)+(x88)+(x83)+(x81)+(x87)+(x84)+(x85)+(x91)+(x93)+(x92)+(x95)+(x96)+(((-1.00000000000000)*(x90)))+(((-1.00000000000000)*(x97)))+(((-1.00000000000000)*(x94)))+(((-1.00000000000000)*(x98)))+(((-1.00000000000000)*(x99)))+(((-1.00000000000000)*(x89)))+(((-1.00000000000000)*(x86)))+(((-1.00000000000000)*(x82))));
op[115]=((-0.456250000000000)+(((-1.00000000000000)*(x144)))+(((-1.00000000000000)*(x143)))+(((-1.00000000000000)*(x142)))+(((-1.00000000000000)*(x141)))+(((-1.00000000000000)*(x140)))+(((-1.00000000000000)*(x149)))+(((-1.00000000000000)*(x148)))+(((-1.00000000000000)*(x147)))+(((-1.00000000000000)*(x146)))+(((-1.00000000000000)*(x145)))+(((-1.00000000000000)*(x150)))+(((-1.00000000000000)*(x151)))+(((-1.00000000000000)*(x152)))+(((-1.00000000000000)*(x153)))+(x135)+(x134)+(x137)+(x136)+(x131)+(x130)+(x133)+(x132)+(x139)+(x138));
op[116]=((((-1.00000000000000)*(x108)))+(((-1.00000000000000)*(x101)))+(((-1.00000000000000)*(x100)))+(((-1.00000000000000)*(x107)))+(((-1.00000000000000)*(x106)))+(((-1.00000000000000)*(x105)))+(((-1.00000000000000)*(x104)))+(((-1.00000000000000)*(x103)))+(((-1.00000000000000)*(x111)))+(((-1.00000000000000)*(x113)))+(((-1.00000000000000)*(x114)))+(((-1.00000000000000)*(x110)))+(x112)+(x116)+(x115)+(x109)+(x102)+(x88)+(x89)+(x82)+(x86)+(x87)+(x84)+(x99)+(x98)+(x91)+(x90)+(x93)+(x94)+(((-1.00000000000000)*(x96)))+(((-1.00000000000000)*(x97)))+(((-1.00000000000000)*(x95)))+(((-1.00000000000000)*(x92)))+(((-1.00000000000000)*(x81)))+(((-1.00000000000000)*(x83)))+(((-1.00000000000000)*(x85))));
op[117]=((-0.0137500000000000)+(((-1.00000000000000)*(x143)))+(((-1.00000000000000)*(x142)))+(((-1.00000000000000)*(x141)))+(((-1.00000000000000)*(x140)))+(((-1.00000000000000)*(x149)))+(((-1.00000000000000)*(x151)))+(((-1.00000000000000)*(x153)))+(((-1.00000000000000)*(x169)))+(((-1.00000000000000)*(x168)))+(((-1.00000000000000)*(x167)))+(((-1.00000000000000)*(x166)))+(((-1.00000000000000)*(x170)))+(((-1.00000000000000)*(x171)))+(((-1.00000000000000)*(x176)))+(((-1.00000000000000)*(x177)))+(((-1.00000000000000)*(x174)))+(((-1.00000000000000)*(x175)))+(((-1.00000000000000)*(x172)))+(((-1.00000000000000)*(x173)))+(x162)+(x163)+(x160)+(x161)+(x164)+(x165)+(x157)+(x156)+(x155)+(x154)+(x152)+(x150)+(x159)+(x158)+(x144)+(x145)+(x146)+(x147)+(x148)+(x134)+(x136)+(x131)+(x130)+(x139)+(((-1.00000000000000)*(x137)))+(((-1.00000000000000)*(x135)))+(((-1.00000000000000)*(x132)))+(((-1.00000000000000)*(x133)))+(((-1.00000000000000)*(x138))));
op[118]=((-0.0752000000000000)+(((-1.00000000000000)*(x198)))+(((-1.00000000000000)*(x199)))+(((-1.00000000000000)*(x194)))+(((-1.00000000000000)*(x195)))+(((-1.00000000000000)*(x192)))+(x193)+(x191)+(x190)+(x197)+(x196)+(((-1.00000000000000)*(x206)))+(((-1.00000000000000)*(x207)))+(((-1.00000000000000)*(x200)))+(((-1.00000000000000)*(x201)))+(((-1.00000000000000)*(x202)))+(((-1.00000000000000)*(x208)))+(x210)+(x205)+(x204)+(x203)+(x209)+(((-1.00000000000000)*(x212)))+(((-1.00000000000000)*(x211)))+(((-1.00000000000000)*(x213))));
op[119]=((0.0137500000000000)+(((-1.00000000000000)*(x144)))+(((-1.00000000000000)*(x148)))+(((-1.00000000000000)*(x147)))+(((-1.00000000000000)*(x146)))+(((-1.00000000000000)*(x145)))+(((-1.00000000000000)*(x150)))+(((-1.00000000000000)*(x152)))+(((-1.00000000000000)*(x169)))+(((-1.00000000000000)*(x168)))+(((-1.00000000000000)*(x167)))+(((-1.00000000000000)*(x166)))+(((-1.00000000000000)*(x170)))+(((-1.00000000000000)*(x171)))+(((-1.00000000000000)*(x176)))+(((-1.00000000000000)*(x177)))+(((-1.00000000000000)*(x174)))+(((-1.00000000000000)*(x175)))+(((-1.00000000000000)*(x172)))+(((-1.00000000000000)*(x173)))+(x162)+(x163)+(x160)+(x161)+(x164)+(x165)+(x157)+(x156)+(x155)+(x154)+(x153)+(x151)+(x159)+(x158)+(x140)+(x141)+(x142)+(x143)+(x149)+(x135)+(x137)+(x133)+(x132)+(x138)+(((-1.00000000000000)*(x136)))+(((-1.00000000000000)*(x134)))+(((-1.00000000000000)*(x130)))+(((-1.00000000000000)*(x131)))+(((-1.00000000000000)*(x139))));
op[120]=((-0.0136000000000000)+(((-1.00000000000000)*(x178)))+(((-1.00000000000000)*(x179)))+(((-1.00000000000000)*(x180)))+(((-1.00000000000000)*(x184)))+(((-1.00000000000000)*(x183)))+(((-1.00000000000000)*(x182)))+(((-1.00000000000000)*(x181)))+(x185)+(x186)+(x187)+(x188)+(x189));
op[121]=((-0.299200000000000)+(((0.0288000000000000)*(gconst7_6)*(rxp1_2)))+(((-0.0288000000000000)*(gconst2_6)*(pz)))+(((0.00129600000000000)*(gconst5_6)*(r22)))+(((0.160000000000000)*(gconst5_6)*(pp)*(r22)))+(((-0.00129600000000000)*(gconst3_6)*(r21)))+(((-0.160000000000000)*(gconst4_6)*(pp)*(r20)))+(((0.320000000000000)*(gconst4_6)*(npx)*(pz)))+(((0.0288000000000000)*(gconst6_6)*(rxp0_2)))+(((0.160000000000000)*(gconst3_6)*(pp)*(r21)))+(((0.00129600000000000)*(gconst4_6)*(r20)))+(((-0.320000000000000)*(gconst5_6)*(npz)*(pz)))+(((-0.320000000000000)*(gconst3_6)*(npy)*(pz))));
op[122]=((0.0136000000000000)+(((-1.00000000000000)*(x187)))+(((-1.00000000000000)*(x186)))+(((-1.00000000000000)*(x185)))+(((-1.00000000000000)*(x189)))+(((-1.00000000000000)*(x188)))+(x179)+(x178)+(x184)+(x180)+(x181)+(x182)+(x183));
op[123]=((0.0137500000000000)+(((-1.00000000000000)*(x144)))+(((-1.00000000000000)*(x143)))+(((-1.00000000000000)*(x142)))+(((-1.00000000000000)*(x141)))+(((-1.00000000000000)*(x140)))+(((-1.00000000000000)*(x149)))+(((-1.00000000000000)*(x148)))+(((-1.00000000000000)*(x147)))+(((-1.00000000000000)*(x146)))+(((-1.00000000000000)*(x145)))+(((-1.00000000000000)*(x157)))+(((-1.00000000000000)*(x150)))+(((-1.00000000000000)*(x151)))+(((-1.00000000000000)*(x152)))+(((-1.00000000000000)*(x153)))+(((-1.00000000000000)*(x154)))+(((-1.00000000000000)*(x164)))+(((-1.00000000000000)*(x167)))+(((-1.00000000000000)*(x161)))+(((-1.00000000000000)*(x163)))+(((-1.00000000000000)*(x171)))+(((-1.00000000000000)*(x176)))+(((-1.00000000000000)*(x174)))+(((-1.00000000000000)*(x173)))+(x170)+(x172)+(x175)+(x177)+(x168)+(x169)+(x162)+(x160)+(x166)+(x165)+(x156)+(x155)+(x159)+(x158)+(x135)+(x134)+(x137)+(x136)+(x131)+(x130)+(x133)+(x132)+(x139)+(x138));
op[124]=((0.0752000000000000)+(x199)+(x198)+(x193)+(x192)+(x191)+(x190)+(x197)+(x196)+(x195)+(x194)+(((-1.00000000000000)*(x205)))+(((-1.00000000000000)*(x206)))+(((-1.00000000000000)*(x207)))+(((-1.00000000000000)*(x202)))+(((-1.00000000000000)*(x203)))+(((-1.00000000000000)*(x204)))+(((-1.00000000000000)*(x208)))+(((-1.00000000000000)*(x209)))+(x201)+(x200)+(((-1.00000000000000)*(x212)))+(((-1.00000000000000)*(x211)))+(((-1.00000000000000)*(x210)))+(((-1.00000000000000)*(x213))));
op[125]=((-0.0137500000000000)+(((-1.00000000000000)*(x157)))+(((-1.00000000000000)*(x154)))+(((-1.00000000000000)*(x164)))+(((-1.00000000000000)*(x167)))+(((-1.00000000000000)*(x161)))+(((-1.00000000000000)*(x163)))+(((-1.00000000000000)*(x171)))+(((-1.00000000000000)*(x176)))+(((-1.00000000000000)*(x174)))+(((-1.00000000000000)*(x173)))+(x170)+(x172)+(x175)+(x177)+(x168)+(x169)+(x162)+(x160)+(x166)+(x165)+(x156)+(x155)+(x153)+(x152)+(x151)+(x150)+(x159)+(x158)+(x140)+(x141)+(x142)+(x143)+(x144)+(x145)+(x146)+(x147)+(x148)+(x149)+(((-1.00000000000000)*(x136)))+(((-1.00000000000000)*(x137)))+(((-1.00000000000000)*(x134)))+(((-1.00000000000000)*(x135)))+(((-1.00000000000000)*(x132)))+(((-1.00000000000000)*(x133)))+(((-1.00000000000000)*(x130)))+(((-1.00000000000000)*(x131)))+(((-1.00000000000000)*(x138)))+(((-1.00000000000000)*(x139))));
op[126]=((0.00240000000000000)+(((-1.00000000000000)*(x109)))+(((-1.00000000000000)*(x101)))+(((-1.00000000000000)*(x105)))+(((-1.00000000000000)*(x104)))+(((-1.00000000000000)*(x103)))+(((-1.00000000000000)*(x102)))+(((-1.00000000000000)*(x112)))+(((-1.00000000000000)*(x114)))+(((-1.00000000000000)*(x115)))+(((-1.00000000000000)*(x116)))+(((-1.00000000000000)*(x110)))+(((-1.00000000000000)*(x230)))+(((-1.00000000000000)*(x233)))+(((-1.00000000000000)*(x232)))+(((-1.00000000000000)*(x235)))+(((-1.00000000000000)*(x234)))+(((-1.00000000000000)*(x237)))+(((-1.00000000000000)*(x236)))+(((-1.00000000000000)*(x231)))+(x214)+(x215)+(x216)+(x217)+(x218)+(x219)+(x221)+(x220)+(x223)+(x222)+(x225)+(x224)+(x227)+(x226)+(x89)+(x82)+(x83)+(x81)+(x86)+(x85)+(x90)+(x92)+(x95)+(x94)+(((-1.00000000000000)*(x96)))+(((-1.00000000000000)*(x98)))+(((-1.00000000000000)*(x99)))+(((-1.00000000000000)*(x228)))+(((-1.00000000000000)*(x229))));
op[127]=((-0.0130500000000000)+(((-1.00000000000000)*(x144)))+(((-1.00000000000000)*(x148)))+(((-1.00000000000000)*(x147)))+(((-1.00000000000000)*(x146)))+(((-1.00000000000000)*(x145)))+(((-1.00000000000000)*(x150)))+(((-1.00000000000000)*(x152)))+(x153)+(x151)+(x140)+(x141)+(x142)+(x143)+(x149)+(x135)+(x137)+(x133)+(x132)+(x138)+(((-1.00000000000000)*(x136)))+(((-1.00000000000000)*(x134)))+(((-1.00000000000000)*(x130)))+(((-1.00000000000000)*(x131)))+(((-1.00000000000000)*(x139))));
op[128]=((-0.00240000000000000)+(x112)+(x110)+(x116)+(x115)+(x114)+(x109)+(x104)+(x105)+(x101)+(x102)+(x103)+(((-1.00000000000000)*(x230)))+(((-1.00000000000000)*(x233)))+(((-1.00000000000000)*(x232)))+(((-1.00000000000000)*(x235)))+(((-1.00000000000000)*(x234)))+(((-1.00000000000000)*(x237)))+(((-1.00000000000000)*(x236)))+(((-1.00000000000000)*(x231)))+(x214)+(x215)+(x216)+(x217)+(x218)+(x219)+(x221)+(x220)+(x223)+(x222)+(x225)+(x224)+(x227)+(x226)+(x99)+(x98)+(x96)+(((-1.00000000000000)*(x90)))+(((-1.00000000000000)*(x94)))+(((-1.00000000000000)*(x95)))+(((-1.00000000000000)*(x92)))+(((-1.00000000000000)*(x89)))+(((-1.00000000000000)*(x86)))+(((-1.00000000000000)*(x81)))+(((-1.00000000000000)*(x83)))+(((-1.00000000000000)*(x82)))+(((-1.00000000000000)*(x85)))+(((-1.00000000000000)*(x228)))+(((-1.00000000000000)*(x229))));
op[129]=((0.0102000000000000)+(((-1.00000000000000)*(x129)))+(x122)+(x123)+(x120)+(x121)+(x117)+(x119)+(x118)+(((-1.00000000000000)*(x239)))+(((-1.00000000000000)*(x238)))+(x243)+(x247)+(x246)+(x245)+(x244)+(x249)+(x248)+(((-1.00000000000000)*(x240)))+(((-1.00000000000000)*(x241)))+(((-1.00000000000000)*(x242))));
op[130]=((0.0272000000000000)+(((-0.000972000000000000)*(gconst4_6)*(r20)))+(((0.120000000000000)*(gconst4_6)*(pp)*(r20)))+(((0.240000000000000)*(gconst5_6)*(npz)*(pz)))+(((-0.0216000000000000)*(gconst7_6)*(rxp1_2)))+(((-0.240000000000000)*(gconst4_6)*(npx)*(pz)))+(((-0.0216000000000000)*(gconst6_6)*(rxp0_2)))+(((-0.120000000000000)*(gconst5_6)*(pp)*(r22)))+(((0.0216000000000000)*(gconst2_6)*(pz)))+(((-0.120000000000000)*(gconst3_6)*(pp)*(r21)))+(((0.000972000000000000)*(gconst3_6)*(r21)))+(((-0.000972000000000000)*(gconst5_6)*(r22)))+(((0.240000000000000)*(gconst3_6)*(npy)*(pz))));
op[131]=((-0.0102000000000000)+(((-1.00000000000000)*(x129)))+(x122)+(x123)+(x120)+(x121)+(x117)+(x119)+(x118)+(x238)+(x239)+(x242)+(x241)+(x240)+(((-1.00000000000000)*(x243)))+(((-1.00000000000000)*(x249)))+(((-1.00000000000000)*(x244)))+(((-1.00000000000000)*(x245)))+(((-1.00000000000000)*(x246)))+(((-1.00000000000000)*(x247)))+(((-1.00000000000000)*(x248))));
op[132]=((-0.00240000000000000)+(((-1.00000000000000)*(x101)))+(((-1.00000000000000)*(x105)))+(((-1.00000000000000)*(x104)))+(((-1.00000000000000)*(x103)))+(((-1.00000000000000)*(x114)))+(((-1.00000000000000)*(x110)))+(x112)+(x116)+(x115)+(x109)+(x102)+(((-1.00000000000000)*(x230)))+(((-1.00000000000000)*(x234)))+(((-1.00000000000000)*(x236)))+(((-1.00000000000000)*(x231)))+(x214)+(x215)+(x229)+(x221)+(x220)+(x223)+(x222)+(x227)+(x232)+(x233)+(x237)+(x235)+(x89)+(x82)+(x86)+(x99)+(x98)+(x90)+(x94)+(((-1.00000000000000)*(x96)))+(((-1.00000000000000)*(x95)))+(((-1.00000000000000)*(x92)))+(((-1.00000000000000)*(x219)))+(((-1.00000000000000)*(x218)))+(((-1.00000000000000)*(x217)))+(((-1.00000000000000)*(x216)))+(((-1.00000000000000)*(x81)))+(((-1.00000000000000)*(x83)))+(((-1.00000000000000)*(x85)))+(((-1.00000000000000)*(x228)))+(((-1.00000000000000)*(x226)))+(((-1.00000000000000)*(x224)))+(((-1.00000000000000)*(x225))));
op[133]=((0.0130500000000000)+(x153)+(x152)+(x151)+(x150)+(x140)+(x141)+(x142)+(x143)+(x144)+(x145)+(x146)+(x147)+(x148)+(x149)+(((-1.00000000000000)*(x136)))+(((-1.00000000000000)*(x137)))+(((-1.00000000000000)*(x134)))+(((-1.00000000000000)*(x135)))+(((-1.00000000000000)*(x132)))+(((-1.00000000000000)*(x133)))+(((-1.00000000000000)*(x130)))+(((-1.00000000000000)*(x131)))+(((-1.00000000000000)*(x138)))+(((-1.00000000000000)*(x139))));
op[134]=((0.00240000000000000)+(((-1.00000000000000)*(x109)))+(((-1.00000000000000)*(x102)))+(((-1.00000000000000)*(x112)))+(((-1.00000000000000)*(x115)))+(((-1.00000000000000)*(x116)))+(x110)+(x114)+(x104)+(x105)+(x101)+(x103)+(((-1.00000000000000)*(x230)))+(((-1.00000000000000)*(x234)))+(((-1.00000000000000)*(x236)))+(((-1.00000000000000)*(x231)))+(x214)+(x215)+(x229)+(x221)+(x220)+(x223)+(x222)+(x227)+(x232)+(x233)+(x237)+(x235)+(x83)+(x81)+(x85)+(x92)+(x95)+(x96)+(((-1.00000000000000)*(x90)))+(((-1.00000000000000)*(x94)))+(((-1.00000000000000)*(x98)))+(((-1.00000000000000)*(x99)))+(((-1.00000000000000)*(x219)))+(((-1.00000000000000)*(x218)))+(((-1.00000000000000)*(x217)))+(((-1.00000000000000)*(x216)))+(((-1.00000000000000)*(x89)))+(((-1.00000000000000)*(x86)))+(((-1.00000000000000)*(x82)))+(((-1.00000000000000)*(x228)))+(((-1.00000000000000)*(x226)))+(((-1.00000000000000)*(x224)))+(((-1.00000000000000)*(x225))));
op[135]=((-0.213675000000000)+(x258)+(x250)+(x251)+(x252)+(x264)+(x267)+(x266)+(x263)+(x269)+(x268)+(x276)+(x277)+(x274)+(x272)+(x270)+(x271)+(x278)+(x285)+(x282)+(x281)+(((-1.00000000000000)*(x273)))+(((-1.00000000000000)*(x275)))+(((-1.00000000000000)*(x279)))+(((-1.00000000000000)*(x280)))+(((-1.00000000000000)*(x283)))+(((-1.00000000000000)*(x284)))+(((-1.00000000000000)*(x265)))+(((-1.00000000000000)*(x262)))+(((-1.00000000000000)*(x260)))+(((-1.00000000000000)*(x261)))+(((-1.00000000000000)*(x259)))+(((-1.00000000000000)*(x257)))+(((-1.00000000000000)*(x256)))+(((-1.00000000000000)*(x255)))+(((-1.00000000000000)*(x254)))+(((-1.00000000000000)*(x253))));
op[136]=((((-1.00000000000000)*(x320)))+(((-1.00000000000000)*(x323)))+(((-1.00000000000000)*(x322)))+(((-1.00000000000000)*(x321)))+(x387)+(((-1.00000000000000)*(x319)))+(((-1.00000000000000)*(x312)))+(((-1.00000000000000)*(x317)))+(((-1.00000000000000)*(x314)))+(((-1.00000000000000)*(x307)))+(((-1.00000000000000)*(x308)))+(((-1.00000000000000)*(x303)))+(((-1.00000000000000)*(x304))));
op[137]=((0.213675000000000)+(x258)+(x259)+(x254)+(x255)+(x256)+(x257)+(x250)+(x251)+(x252)+(x253)+(x261)+(x260)+(((-1.00000000000000)*(x274)))+(((-1.00000000000000)*(x277)))+(((-1.00000000000000)*(x276)))+(((-1.00000000000000)*(x271)))+(((-1.00000000000000)*(x270)))+(((-1.00000000000000)*(x273)))+(((-1.00000000000000)*(x272)))+(((-1.00000000000000)*(x275)))+(((-1.00000000000000)*(x279)))+(((-1.00000000000000)*(x278)))+(((-1.00000000000000)*(x280)))+(((-1.00000000000000)*(x281)))+(((-1.00000000000000)*(x282)))+(((-1.00000000000000)*(x283)))+(((-1.00000000000000)*(x284)))+(((-1.00000000000000)*(x285)))+(((-1.00000000000000)*(x264)))+(((-1.00000000000000)*(x265)))+(((-1.00000000000000)*(x262)))+(((-1.00000000000000)*(x263)))+(((-1.00000000000000)*(x266)))+(((-1.00000000000000)*(x267)))+(((-1.00000000000000)*(x268)))+(((-1.00000000000000)*(x269))));
op[138]=x300;
op[139]=((((-3.76000000000000)*(gconst6_6)*(npy)*(pz)))+(((-1.88000000000000)*(gconst7_6)*(pp)*(r20)))+(((-0.0152280000000000)*(gconst6_6)*(r21)))+(((1.88000000000000)*(gconst6_6)*(pp)*(r21)))+(((3.76000000000000)*(gconst7_6)*(npx)*(pz)))+(((-0.0152280000000000)*(gconst2_6)*(r22)))+(((0.0152280000000000)*(gconst7_6)*(r20)))+(((3.76000000000000)*(gconst2_6)*(npz)*(pz)))+(((-0.338400000000000)*(gconst5_6)*(pz)))+(((-0.338400000000000)*(gconst4_6)*(rxp1_2)))+(((-0.338400000000000)*(gconst3_6)*(rxp0_2)))+(((-1.88000000000000)*(gconst2_6)*(pp)*(r22))));
op[140]=x300;
op[141]=((-0.213675000000000)+(x258)+(x259)+(x254)+(x255)+(x250)+(x251)+(x252)+(x264)+(x267)+(x266)+(x260)+(x269)+(x276)+(x277)+(x271)+(x285)+(((-1.00000000000000)*(x274)))+(((-1.00000000000000)*(x270)))+(((-1.00000000000000)*(x273)))+(((-1.00000000000000)*(x272)))+(((-1.00000000000000)*(x275)))+(((-1.00000000000000)*(x279)))+(((-1.00000000000000)*(x278)))+(((-1.00000000000000)*(x280)))+(((-1.00000000000000)*(x281)))+(((-1.00000000000000)*(x282)))+(((-1.00000000000000)*(x283)))+(((-1.00000000000000)*(x284)))+(((-1.00000000000000)*(x265)))+(((-1.00000000000000)*(x262)))+(((-1.00000000000000)*(x263)))+(((-1.00000000000000)*(x261)))+(((-1.00000000000000)*(x268)))+(((-1.00000000000000)*(x257)))+(((-1.00000000000000)*(x256)))+(((-1.00000000000000)*(x253))));
op[142]=((((-1.00000000000000)*(x320)))+(((-1.00000000000000)*(x324)))+(((-1.00000000000000)*(x323)))+(((-1.00000000000000)*(x322)))+(((-1.00000000000000)*(x321)))+(((-1.00000000000000)*(x315)))+(((-1.00000000000000)*(x318)))+(((-1.00000000000000)*(x319)))+(((-1.00000000000000)*(x312)))+(((-1.00000000000000)*(x313)))+(((-1.00000000000000)*(x310)))+(((-1.00000000000000)*(x311)))+(((-1.00000000000000)*(x316)))+(((-1.00000000000000)*(x317)))+(((-1.00000000000000)*(x314)))+(x424)+(((-1.00000000000000)*(x309))));
op[143]=((0.213675000000000)+(x258)+(x256)+(x257)+(x250)+(x251)+(x252)+(x253)+(x261)+(x263)+(x268)+(x274)+(x272)+(x270)+(x278)+(x282)+(x281)+(((-1.00000000000000)*(x277)))+(((-1.00000000000000)*(x276)))+(((-1.00000000000000)*(x271)))+(((-1.00000000000000)*(x273)))+(((-1.00000000000000)*(x275)))+(((-1.00000000000000)*(x279)))+(((-1.00000000000000)*(x280)))+(((-1.00000000000000)*(x283)))+(((-1.00000000000000)*(x284)))+(((-1.00000000000000)*(x285)))+(((-1.00000000000000)*(x264)))+(((-1.00000000000000)*(x265)))+(((-1.00000000000000)*(x262)))+(((-1.00000000000000)*(x260)))+(((-1.00000000000000)*(x266)))+(((-1.00000000000000)*(x267)))+(((-1.00000000000000)*(x269)))+(((-1.00000000000000)*(x259)))+(((-1.00000000000000)*(x255)))+(((-1.00000000000000)*(x254))));
op[144]=((0.0376000000000000)+(((-1.00000000000000)*(x320)))+(((-1.00000000000000)*(x323)))+(((-1.00000000000000)*(x322)))+(((-1.00000000000000)*(x321)))+(x333)+(x332)+(x331)+(x330)+(x336)+(x335)+(x334)+(x325)+(x326)+(x327)+(x328)+(x329)+(x387)+(((-1.00000000000000)*(x319)))+(((-1.00000000000000)*(x312)))+(((-1.00000000000000)*(x317)))+(((-1.00000000000000)*(x314)))+(((-1.00000000000000)*(x338)))+(((-1.00000000000000)*(x339)))+(((-1.00000000000000)*(x337)))+(((-1.00000000000000)*(x340)))+(((-1.00000000000000)*(x343)))+(((-1.00000000000000)*(x342)))+(((-1.00000000000000)*(x345)))+(((-1.00000000000000)*(x344)))+(((-1.00000000000000)*(x347)))+(((-1.00000000000000)*(x346)))+(((-1.00000000000000)*(x341)))+(((-1.00000000000000)*(x348)))+(((-1.00000000000000)*(x307)))+(((-1.00000000000000)*(x308)))+(((-1.00000000000000)*(x303)))+(((-1.00000000000000)*(x304))));
op[145]=((-0.0853000000000000)+(((-1.00000000000000)*(x367)))+(((-1.00000000000000)*(x366)))+(((-1.00000000000000)*(x365)))+(((-1.00000000000000)*(x369)))+(((-1.00000000000000)*(x368)))+(((-1.00000000000000)*(x379)))+(((-1.00000000000000)*(x372)))+(((-1.00000000000000)*(x374)))+(((-1.00000000000000)*(x375)))+(((-1.00000000000000)*(x376)))+(((-1.00000000000000)*(x371)))+(x386)+(x382)+(x378)+(x377)+(x373)+(x370)+(x363)+(x364)+(((-1.00000000000000)*(x383)))+(((-1.00000000000000)*(x385)))+(((-1.00000000000000)*(x384)))+(((-1.00000000000000)*(x381)))+(((-1.00000000000000)*(x380))));
op[146]=((-0.0376000000000000)+(x308)+(x307)+(x304)+(x303)+(x333)+(x332)+(x331)+(x330)+(x336)+(x335)+(x334)+(x325)+(x326)+(x327)+(x320)+(x321)+(x322)+(x323)+(x328)+(x329)+(x319)+(x314)+(x317)+(x312)+(((-1.00000000000000)*(x387)))+(((-1.00000000000000)*(x338)))+(((-1.00000000000000)*(x339)))+(((-1.00000000000000)*(x337)))+(((-1.00000000000000)*(x340)))+(((-1.00000000000000)*(x343)))+(((-1.00000000000000)*(x342)))+(((-1.00000000000000)*(x345)))+(((-1.00000000000000)*(x344)))+(((-1.00000000000000)*(x347)))+(((-1.00000000000000)*(x346)))+(((-1.00000000000000)*(x341)))+(((-1.00000000000000)*(x348))));
op[147]=((((-1.00000000000000)*(x357)))+(x362));
op[148]=((((-0.160000000000000)*(gconst6_6)*(pp)*(r21)))+(((-0.320000000000000)*(gconst7_6)*(npx)*(pz)))+(((-0.320000000000000)*(gconst2_6)*(npz)*(pz)))+(((0.160000000000000)*(gconst2_6)*(pp)*(r22)))+(((-0.00129600000000000)*(gconst7_6)*(r20)))+(((0.160000000000000)*(gconst7_6)*(pp)*(r20)))+(((0.0288000000000000)*(gconst4_6)*(rxp1_2)))+(((0.0288000000000000)*(gconst3_6)*(rxp0_2)))+(((0.0288000000000000)*(gconst5_6)*(pz)))+(((0.00129600000000000)*(gconst2_6)*(r22)))+(((0.00129600000000000)*(gconst6_6)*(r21)))+(((0.320000000000000)*(gconst6_6)*(npy)*(pz))));
op[149]=((((-1.00000000000000)*(x362)))+(x357));
op[150]=((0.0376000000000000)+(((-1.00000000000000)*(x320)))+(((-1.00000000000000)*(x326)))+(((-1.00000000000000)*(x324)))+(((-1.00000000000000)*(x323)))+(((-1.00000000000000)*(x322)))+(((-1.00000000000000)*(x321)))+(x339)+(x338)+(x333)+(x331)+(x330)+(x336)+(x325)+(x327)+(x328)+(x329)+(x342)+(x340)+(x346)+(x344)+(x345)+(x348)+(((-1.00000000000000)*(x315)))+(((-1.00000000000000)*(x318)))+(((-1.00000000000000)*(x319)))+(((-1.00000000000000)*(x312)))+(((-1.00000000000000)*(x313)))+(((-1.00000000000000)*(x310)))+(((-1.00000000000000)*(x311)))+(((-1.00000000000000)*(x316)))+(((-1.00000000000000)*(x317)))+(((-1.00000000000000)*(x314)))+(x424)+(((-1.00000000000000)*(x334)))+(((-1.00000000000000)*(x335)))+(((-1.00000000000000)*(x337)))+(((-1.00000000000000)*(x332)))+(((-1.00000000000000)*(x343)))+(((-1.00000000000000)*(x347)))+(((-1.00000000000000)*(x341)))+(((-1.00000000000000)*(x309))));
op[151]=((-0.0853000000000000)+(((-1.00000000000000)*(x379)))+(((-1.00000000000000)*(x375)))+(((-1.00000000000000)*(x376)))+(((-1.00000000000000)*(x377)))+(((-1.00000000000000)*(x378)))+(x374)+(x373)+(x372)+(x371)+(x370)+(x368)+(x369)+(x363)+(x364)+(x365)+(x366)+(x367)+(((-1.00000000000000)*(x383)))+(((-1.00000000000000)*(x382)))+(((-1.00000000000000)*(x385)))+(((-1.00000000000000)*(x384)))+(((-1.00000000000000)*(x386)))+(((-1.00000000000000)*(x381)))+(((-1.00000000000000)*(x380))));
op[152]=((-0.0376000000000000)+(((-1.00000000000000)*(x424)))+(((-1.00000000000000)*(x326)))+(x309)+(x339)+(x338)+(x333)+(x331)+(x330)+(x336)+(x324)+(x325)+(x327)+(x320)+(x321)+(x322)+(x323)+(x328)+(x329)+(x319)+(x318)+(x315)+(x314)+(x317)+(x316)+(x311)+(x310)+(x313)+(x312)+(x342)+(x340)+(x346)+(x344)+(x345)+(x348)+(((-1.00000000000000)*(x334)))+(((-1.00000000000000)*(x335)))+(((-1.00000000000000)*(x337)))+(((-1.00000000000000)*(x332)))+(((-1.00000000000000)*(x343)))+(((-1.00000000000000)*(x347)))+(((-1.00000000000000)*(x341))));
op[153]=((-0.00792500000000000)+(x388)+(x389)+(x395)+(x394)+(x397)+(x396)+(x391)+(x390)+(x393)+(x392)+(x399)+(x398)+(x259)+(x254)+(x255)+(x256)+(x257)+(x253)+(x261)+(x260)+(x401)+(x400)+(x403)+(x402)+(((-1.00000000000000)*(x274)))+(((-1.00000000000000)*(x277)))+(((-1.00000000000000)*(x276)))+(((-1.00000000000000)*(x271)))+(((-1.00000000000000)*(x270)))+(((-1.00000000000000)*(x272)))+(((-1.00000000000000)*(x278)))+(((-1.00000000000000)*(x281)))+(((-1.00000000000000)*(x282)))+(((-1.00000000000000)*(x285)))+(((-1.00000000000000)*(x264)))+(((-1.00000000000000)*(x263)))+(((-1.00000000000000)*(x266)))+(((-1.00000000000000)*(x267)))+(((-1.00000000000000)*(x268)))+(((-1.00000000000000)*(x269)))+(((-1.00000000000000)*(x411)))+(((-1.00000000000000)*(x410)))+(((-1.00000000000000)*(x407)))+(((-1.00000000000000)*(x404)))+(((-1.00000000000000)*(x405)))+(((-1.00000000000000)*(x408)))+(((-1.00000000000000)*(x409)))+(((-1.00000000000000)*(x406))));
op[154]=((0.00480000000000000)+(x308)+(x307)+(x304)+(x303)+(x320)+(x321)+(x322)+(x323)+(x319)+(x314)+(x317)+(x312)+(((-1.00000000000000)*(x387))));
op[155]=((0.00792500000000000)+(x388)+(x389)+(x395)+(x394)+(x397)+(x396)+(x391)+(x390)+(x393)+(x392)+(x399)+(x398)+(x264)+(x267)+(x266)+(x263)+(x269)+(x268)+(x276)+(x277)+(x274)+(x272)+(x270)+(x271)+(x278)+(x285)+(x282)+(x281)+(x401)+(x400)+(x403)+(x402)+(((-1.00000000000000)*(x260)))+(((-1.00000000000000)*(x261)))+(((-1.00000000000000)*(x411)))+(((-1.00000000000000)*(x410)))+(((-1.00000000000000)*(x407)))+(((-1.00000000000000)*(x404)))+(((-1.00000000000000)*(x405)))+(((-1.00000000000000)*(x408)))+(((-1.00000000000000)*(x409)))+(((-1.00000000000000)*(x406)))+(((-1.00000000000000)*(x259)))+(((-1.00000000000000)*(x257)))+(((-1.00000000000000)*(x256)))+(((-1.00000000000000)*(x255)))+(((-1.00000000000000)*(x254)))+(((-1.00000000000000)*(x253))));
op[156]=((((-1.00000000000000)*(x299)))+(x294)+(x416)+(x417)+(x418)+(x419)+(x423)+(x422)+(x421)+(x420)+(((-1.00000000000000)*(x412)))+(((-1.00000000000000)*(x415)))+(((-1.00000000000000)*(x414)))+(((-1.00000000000000)*(x413))));
op[157]=((((-0.120000000000000)*(gconst7_6)*(pp)*(r20)))+(((-0.0216000000000000)*(gconst5_6)*(pz)))+(((-0.000972000000000000)*(gconst6_6)*(r21)))+(((-0.120000000000000)*(gconst2_6)*(pp)*(r22)))+(((-0.0216000000000000)*(gconst3_6)*(rxp0_2)))+(((0.240000000000000)*(gconst2_6)*(npz)*(pz)))+(((0.240000000000000)*(gconst7_6)*(npx)*(pz)))+(((-0.240000000000000)*(gconst6_6)*(npy)*(pz)))+(((-0.000972000000000000)*(gconst2_6)*(r22)))+(((-0.0216000000000000)*(gconst4_6)*(rxp1_2)))+(((0.120000000000000)*(gconst6_6)*(pp)*(r21)))+(((0.000972000000000000)*(gconst7_6)*(r20))));
op[158]=((((-1.00000000000000)*(x420)))+(((-1.00000000000000)*(x421)))+(((-1.00000000000000)*(x422)))+(((-1.00000000000000)*(x423)))+(((-1.00000000000000)*(x299)))+(x294)+(x412)+(x413)+(x414)+(x415)+(((-1.00000000000000)*(x419)))+(((-1.00000000000000)*(x418)))+(((-1.00000000000000)*(x417)))+(((-1.00000000000000)*(x416))));
op[159]=((-0.00792500000000000)+(((-1.00000000000000)*(x394)))+(((-1.00000000000000)*(x395)))+(((-1.00000000000000)*(x393)))+(((-1.00000000000000)*(x396)))+(((-1.00000000000000)*(x399)))+(x389)+(x397)+(x391)+(x390)+(x392)+(x398)+(x256)+(x257)+(x253)+(x261)+(x263)+(x268)+(x274)+(x272)+(x270)+(x278)+(x282)+(x281)+(x400)+(x403)+(x405)+(x406)+(x409)+(x410)+(((-1.00000000000000)*(x388)))+(((-1.00000000000000)*(x277)))+(((-1.00000000000000)*(x276)))+(((-1.00000000000000)*(x271)))+(((-1.00000000000000)*(x285)))+(((-1.00000000000000)*(x264)))+(((-1.00000000000000)*(x260)))+(((-1.00000000000000)*(x266)))+(((-1.00000000000000)*(x267)))+(((-1.00000000000000)*(x269)))+(((-1.00000000000000)*(x411)))+(((-1.00000000000000)*(x407)))+(((-1.00000000000000)*(x404)))+(((-1.00000000000000)*(x402)))+(((-1.00000000000000)*(x401)))+(((-1.00000000000000)*(x408)))+(((-1.00000000000000)*(x259)))+(((-1.00000000000000)*(x255)))+(((-1.00000000000000)*(x254))));
op[160]=((0.00480000000000000)+(((-1.00000000000000)*(x424)))+(x309)+(x324)+(x320)+(x321)+(x322)+(x323)+(x319)+(x318)+(x315)+(x314)+(x317)+(x316)+(x311)+(x310)+(x313)+(x312));
op[161]=((0.00792500000000000)+(((-1.00000000000000)*(x394)))+(((-1.00000000000000)*(x395)))+(((-1.00000000000000)*(x393)))+(((-1.00000000000000)*(x396)))+(((-1.00000000000000)*(x399)))+(x389)+(x397)+(x391)+(x390)+(x392)+(x398)+(x259)+(x254)+(x255)+(x264)+(x267)+(x266)+(x260)+(x269)+(x276)+(x277)+(x271)+(x285)+(x400)+(x403)+(x405)+(x406)+(x409)+(x410)+(((-1.00000000000000)*(x388)))+(((-1.00000000000000)*(x274)))+(((-1.00000000000000)*(x270)))+(((-1.00000000000000)*(x272)))+(((-1.00000000000000)*(x278)))+(((-1.00000000000000)*(x281)))+(((-1.00000000000000)*(x282)))+(((-1.00000000000000)*(x263)))+(((-1.00000000000000)*(x261)))+(((-1.00000000000000)*(x268)))+(((-1.00000000000000)*(x411)))+(((-1.00000000000000)*(x407)))+(((-1.00000000000000)*(x404)))+(((-1.00000000000000)*(x402)))+(((-1.00000000000000)*(x401)))+(((-1.00000000000000)*(x408)))+(((-1.00000000000000)*(x257)))+(((-1.00000000000000)*(x256)))+(((-1.00000000000000)*(x253))));
solvedetdialyticpoly12(op,zeror,numroots);
IKReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IKReal dummy0 = zeror[ij1+0], dummy2 = zeror[ij1+1], dummy4 = zeror[ij1+2];
j1array[numsolutions]=((2.00000000000000)*(atan(dummy0)));
j2array[numsolutions]=((2.00000000000000)*(atan(dummy2)));
j3array[numsolutions]=((2.00000000000000)*(atan(dummy4)));
IKReal x425=(dummy0)*(dummy0);
IKReal x426=(dummy2)*(dummy2);
IKReal x427=(dummy4)*(dummy4);
cj1array[numsolutions]=((((IKabs(((1.00000000000000)+(x425))) != 0)?((IKReal)1/(((1.00000000000000)+(x425)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x425))))));
cj2array[numsolutions]=((((IKabs(((1.00000000000000)+(x426))) != 0)?((IKReal)1/(((1.00000000000000)+(x426)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x426))))));
cj3array[numsolutions]=((((IKabs(((1.00000000000000)+(x427))) != 0)?((IKReal)1/(((1.00000000000000)+(x427)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x427))))));
sj1array[numsolutions]=((2.00000000000000)*(dummy0)*(((IKabs(((1.00000000000000)+((dummy0)*(dummy0)))) != 0)?((IKReal)1/(((1.00000000000000)+((dummy0)*(dummy0))))):(IKReal)1.0e30)));
sj2array[numsolutions]=((2.00000000000000)*(dummy2)*(((IKabs(((1.00000000000000)+((dummy2)*(dummy2)))) != 0)?((IKReal)1/(((1.00000000000000)+((dummy2)*(dummy2))))):(IKReal)1.0e30)));
sj3array[numsolutions]=((2.00000000000000)*(dummy4)*(((IKabs(((1.00000000000000)+((dummy4)*(dummy4)))) != 0)?((IKReal)1/(((1.00000000000000)+((dummy4)*(dummy4))))):(IKReal)1.0e30)));
if( j1array[numsolutions] > IKPI )
    j1array[numsolutions]-=IK2PI;
else if( j1array[numsolutions] < -IKPI )
    j1array[numsolutions]+=IK2PI;
if( j2array[numsolutions] > IKPI )
    j2array[numsolutions]-=IK2PI;
else if( j2array[numsolutions] < -IKPI )
    j2array[numsolutions]+=IK2PI;
if( j3array[numsolutions] > IKPI )
    j3array[numsolutions]-=IK2PI;
else if( j3array[numsolutions] < -IKPI )
    j3array[numsolutions]+=IK2PI;
bool valid = true;
for( int kj1 = 0; kj1 < numsolutions; ++kj1)
{
    if( IKabs(cj1array[kj1]-cj1array[numsolutions]) < 0.00001 && IKabs(sj1array[kj1]-sj1array[numsolutions]) < 0.00001 &&IKabs(cj2array[kj1]-cj2array[numsolutions]) < 0.00001 && IKabs(sj2array[kj1]-sj2array[numsolutions]) < 0.00001 &&IKabs(cj3array[kj1]-cj3array[numsolutions]) < 0.00001 && IKabs(sj3array[kj1]-sj3array[numsolutions]) < 0.00001 && 1 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

{
IKReal dummyeval[1];
dummyeval[0]=((((px)*(r01)*(r20)))+(((-1.00000000000000)*(py)*(r10)*(r21)))+(((py)*(r11)*(r20)))+(((-1.00000000000000)*(px)*(r00)*(r21))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
IKReal x428=((cj1)*(sj2)*(sj3));
IKReal x429=((cj2)*(sj1)*(sj3));
IKReal x430=((x429)+(x428));
IKReal x431=((0.0200000000000000)*(sj3));
IKReal x432=((cj2)*(x431));
IKReal x433=((0.0850000000000000)*(cj3));
IKReal x434=((0.250000000000000)*(sj2)*(sj3));
IKReal x435=((x432)+(x433)+(x434));
IKReal x436=((((-1.00000000000000)*(x435)))+(x431));
IKReal x437=((px)*(r01)*(r20));
IKReal x438=((py)*(r11)*(r20));
IKReal x439=((x438)+(x437));
IKReal x440=((px)*(r00)*(r21));
IKReal x441=((py)*(r10)*(r21));
IKReal x442=((x441)+(x440));
IKReal x443=((((-1.00000000000000)*(x442)))+(x439));
IKReal x444=((IKabs(x443) != 0)?((IKReal)1/(x443)):(IKReal)1.0e30);
j5array[0]=IKatan2(((-1.00000000000000)*(x444)*(((((x430)*(((((-1.00000000000000)*(px)*(r01)))+(((-1.00000000000000)*(pz)*(r21)))+(((-1.00000000000000)*(py)*(r11)))))))+(((r21)*(x436)))))), ((x444)*(((((x430)*(((((-1.00000000000000)*(px)*(r00)))+(((-1.00000000000000)*(pz)*(r20)))+(((-1.00000000000000)*(py)*(r10)))))))+(((r20)*(x436)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
    j5array[0]-=IK2PI;
else if( j5array[0] < -IKPI )
    j5array[0]+=IK2PI;
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] ) { continue; }
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
dummyeval[0]=((((-2.00000000000000)*(cj5)*(r20)*(r21)*(sj5)))+((r22)*(r22))+((((cj5)*(cj5))*((r20)*(r20))))+((((r21)*(r21))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
IKReal x445=(cj5)*(cj5);
IKReal x446=(sj5)*(sj5);
dummyeval[0]=((((-1.00000000000000)*(x445)*((r11)*(r11))))+(((-1.00000000000000)*(x446)*((r00)*(r00))))+(((-1.00000000000000)*(x445)*((r01)*(r01))))+(((-2.00000000000000)*(cj5)*(r00)*(r01)*(sj5)))+(((-1.00000000000000)*(x446)*((r10)*(r10))))+(((-2.00000000000000)*(cj5)*(r10)*(r11)*(sj5))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((py)*(r12)*(r21)*(sj5)))+(((cj5)*(px)*(r00)*(r22)))+(((px)*(r02)*(r21)*(sj5)))+(((-1.00000000000000)*(px)*(r01)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(px)*(r02)*(r20)))+(((-1.00000000000000)*(py)*(r11)*(r22)*(sj5)))+(((-0.0900000000000000)*(r22)))+(((-1.00000000000000)*(cj5)*(py)*(r12)*(r20)))+(((cj5)*(py)*(r10)*(r22))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x447=((0.250000000000000)*(cj2));
IKReal x448=((0.220000000000000)+(x447));
IKReal x449=((0.0200000000000000)*(sj2));
IKReal x450=((((-1.00000000000000)*(x449)))+(x448));
IKReal x451=((sj1)*(sj2));
IKReal x452=((cj1)*(cj2));
IKReal x453=((py)*(r12)*(r21)*(sj5));
IKReal x454=((cj5)*(px)*(r00)*(r22));
IKReal x455=((px)*(r02)*(r21)*(sj5));
IKReal x456=((cj5)*(py)*(r10)*(r22));
IKReal x457=((x456)+(x454)+(x455)+(x453));
IKReal x458=((cj5)*(py)*(r12)*(r20));
IKReal x459=((cj5)*(px)*(r02)*(r20));
IKReal x460=x41;
IKReal x461=((py)*(r11)*(r22)*(sj5));
IKReal x462=((px)*(r01)*(r22)*(sj5));
IKReal x463=((x458)+(x459)+(x462)+(x461)+(x460));
IKReal x464=((((-1.00000000000000)*(x463)))+(x457));
IKReal x465=((IKabs(x464) != 0)?((IKReal)1/(x464)):(IKReal)1.0e30);
j4array[0]=IKatan2(((x465)*(((((x450)*(((((r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r20)))))))+(((((((-1.00000000000000)*(x451)))+(x452)))*(((0.0900000000000000)+(((-1.00000000000000)*(cj5)*(px)*(r00)))+(((px)*(r01)*(sj5)))+(((-1.00000000000000)*(cj5)*(pz)*(r20)))+(((pz)*(r21)*(sj5)))+(((py)*(r11)*(sj5)))+(((-1.00000000000000)*(cj5)*(py)*(r10)))))))))), ((x465)*(((((((((-1.00000000000000)*(x452)))+(x451)))*(((((-1.00000000000000)*(px)*(r02)))+(((-1.00000000000000)*(pz)*(r22)))+(((-1.00000000000000)*(py)*(r12)))))))+(((r22)*(x450)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
IKReal x466=(cj5)*(cj5);
IKReal x467=(sj5)*(sj5);
dummyeval[0]=((((-1.00000000000000)*(cj5)*(r02)*(r11)*(sj4)))+(((-1.00000000000000)*(cj4)*(r00)*(r11)*(x466)))+(((-1.00000000000000)*(cj4)*(r00)*(r11)*(x467)))+(((cj5)*(r01)*(r12)*(sj4)))+(((-1.00000000000000)*(r02)*(r10)*(sj4)*(sj5)))+(((r00)*(r12)*(sj4)*(sj5)))+(((cj4)*(r01)*(r10)*(x467)))+(((cj4)*(r01)*(r10)*(x466))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
IKReal x468=(cj5)*(cj5);
IKReal x469=(sj5)*(sj5);
dummyeval[0]=((((-1.00000000000000)*(x468)*((r01)*(r01))))+(((-1.00000000000000)*(x468)*((r11)*(r11))))+(((-2.00000000000000)*(cj5)*(r00)*(r01)*(sj5)))+(((-1.00000000000000)*(x469)*((r00)*(r00))))+(((-2.00000000000000)*(cj5)*(r10)*(r11)*(sj5)))+(((-1.00000000000000)*(x469)*((r10)*(r10)))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
IKReal x470=(cj5)*(cj5);
IKReal x471=(sj5)*(sj5);
dummyeval[0]=((((cj4)*(r02)*(r10)*(sj5)))+(((-1.00000000000000)*(cj4)*(r00)*(r12)*(sj5)))+(((-1.00000000000000)*(r00)*(r11)*(sj4)*(x470)))+(((-1.00000000000000)*(r00)*(r11)*(sj4)*(x471)))+(((r01)*(r10)*(sj4)*(x471)))+(((r01)*(r10)*(sj4)*(x470)))+(((-1.00000000000000)*(cj4)*(cj5)*(r01)*(r12)))+(((cj4)*(cj5)*(r02)*(r11))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x472=(cj5)*(cj5);
IKReal x473=(sj5)*(sj5);
IKReal x474=((cj4)*(r02)*(r10)*(sj5));
IKReal x475=((r01)*(r10)*(sj4)*(x472));
IKReal x476=((r01)*(r10)*(sj4)*(x473));
IKReal x477=((cj4)*(cj5)*(r02)*(r11));
IKReal x478=((x474)+(x475)+(x476)+(x477));
IKReal x479=((r00)*(r11)*(sj4)*(x472));
IKReal x480=((r00)*(r11)*(sj4)*(x473));
IKReal x481=((cj4)*(r00)*(r12)*(sj5));
IKReal x482=((cj4)*(cj5)*(r01)*(r12));
IKReal x483=((x481)+(x480)+(x482)+(x479));
IKReal x484=((((-1.00000000000000)*(x483)))+(x478));
IKReal x485=((IKabs(x484) != 0)?((IKReal)1/(x484)):(IKReal)1.0e30);
j0array[0]=IKatan2(((x485)*(((((cj3)*(((((r11)*(sj4)*(sj5)))+(((cj4)*(r12)))+(((-1.00000000000000)*(cj5)*(r10)*(sj4)))))))+(((-1.00000000000000)*(sj3)*(((((cj5)*(r11)))+(((r10)*(sj5)))))))))), ((x485)*(((((sj3)*(((((-1.00000000000000)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r01)))))))+(((-1.00000000000000)*(cj3)*(((((-1.00000000000000)*(r01)*(sj4)*(sj5)))+(((cj5)*(r00)*(sj4)))+(((-1.00000000000000)*(cj4)*(r02)))))))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
    j0array[0]-=IK2PI;
else if( j0array[0] < -IKPI )
    j0array[0]+=IK2PI;
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] ) { continue; }
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x486=(cj5)*(cj5);
IKReal x487=(sj5)*(sj5);
IKReal x488=((r00)*(sj5));
IKReal x489=((cj5)*(r01));
IKReal x490=((x489)+(x488));
IKReal x491=((cj1)*(cj2)*(sj3));
IKReal x492=((sj1)*(sj2)*(sj3));
IKReal x493=((((-1.00000000000000)*(x492)))+(x491));
IKReal x494=((cj5)*(r11));
IKReal x495=((r10)*(sj5));
IKReal x496=((x494)+(x495));
IKReal x497=((2.00000000000000)*(x488)*(x489));
IKReal x498=((2.00000000000000)*(x494)*(x495));
IKReal x499=(r01)*(r01);
IKReal x500=((x486)*(x499));
IKReal x501=(r10)*(r10);
IKReal x502=((x487)*(x501));
IKReal x503=(r11)*(r11);
IKReal x504=((x486)*(x503));
IKReal x505=(r00)*(r00);
IKReal x506=((x487)*(x505));
IKReal x507=((x498)+(x497)+(x500)+(x502)+(x504)+(x506));
IKReal x508=((-1.00000000000000)*(x507));
IKReal x509=((IKabs(x508) != 0)?((IKReal)1/(x508)):(IKReal)1.0e30);
j0array[0]=IKatan2(((x509)*(((((x493)*(x496)))+(((cj3)*(x490)))))), ((x509)*(((((-1.00000000000000)*(cj3)*(x496)))+(((x490)*(x493)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
    j0array[0]-=IK2PI;
else if( j0array[0] < -IKPI )
    j0array[0]+=IK2PI;
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] ) { continue; }
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x510=(cj5)*(cj5);
IKReal x511=(sj5)*(sj5);
IKReal x512=((r02)*(r10)*(sj4)*(sj5));
IKReal x513=((cj4)*(r00)*(r11)*(x510));
IKReal x514=((cj4)*(r00)*(r11)*(x511));
IKReal x515=((cj5)*(r02)*(r11)*(sj4));
IKReal x516=((x515)+(x514)+(x513)+(x512));
IKReal x517=((cj5)*(r01)*(r12)*(sj4));
IKReal x518=((cj4)*(r01)*(r10)*(x510));
IKReal x519=((cj4)*(r01)*(r10)*(x511));
IKReal x520=((r00)*(r12)*(sj4)*(sj5));
IKReal x521=((x520)+(x519)+(x518)+(x517));
j0array[0]=IKatan2(((-1.00000000000000)*(cj3)*(((IKabs(((x521)+(((-1.00000000000000)*(x516))))) != 0)?((IKReal)1/(((x521)+(((-1.00000000000000)*(x516)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj4)*(r11)*(sj5)))+(((cj4)*(cj5)*(r10)))+(((r12)*(sj4)))))), ((-1.00000000000000)*(cj3)*(((IKabs(((((-1.00000000000000)*(x521)))+(x516))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x521)))+(x516)))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj4)*(cj5)*(r00)))+(((cj4)*(r01)*(sj5)))+(((-1.00000000000000)*(r02)*(sj4)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
    j0array[0]-=IK2PI;
else if( j0array[0] < -IKPI )
    j0array[0]+=IK2PI;
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] ) { continue; }
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x522=(cj5)*(cj5);
IKReal x523=(sj5)*(sj5);
IKReal x524=((r00)*(sj5));
IKReal x525=((cj5)*(r01));
IKReal x526=((x524)+(x525));
IKReal x527=((cj1)*(cj2)*(sj3));
IKReal x528=((sj1)*(sj2)*(sj3));
IKReal x529=((((-1.00000000000000)*(x528)))+(x527));
IKReal x530=((cj5)*(r11));
IKReal x531=((r10)*(sj5));
IKReal x532=((x531)+(x530));
IKReal x533=((2.00000000000000)*(x524)*(x525));
IKReal x534=((2.00000000000000)*(x530)*(x531));
IKReal x535=(r01)*(r01);
IKReal x536=((x522)*(x535));
IKReal x537=(r10)*(r10);
IKReal x538=((x523)*(x537));
IKReal x539=(r11)*(r11);
IKReal x540=((x522)*(x539));
IKReal x541=(r00)*(r00);
IKReal x542=((x523)*(x541));
IKReal x543=((x540)+(x542)+(x533)+(x534)+(x536)+(x538));
IKReal x544=((-1.00000000000000)*(x543));
IKReal x545=((IKabs(x544) != 0)?((IKReal)1/(x544)):(IKReal)1.0e30);
j0array[0]=IKatan2(((x545)*(((((cj3)*(x526)))+(((x529)*(x532)))))), ((x545)*(((((-1.00000000000000)*(cj3)*(x532)))+(((x526)*(x529)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
    j0array[0]-=IK2PI;
else if( j0array[0] < -IKPI )
    j0array[0]+=IK2PI;
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] ) { continue; }
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IKReal dummyeval[1];
dummyeval[0]=((((-2.00000000000000)*(cj5)*(r20)*(r21)*(sj5)))+((r22)*(r22))+((((cj5)*(cj5))*((r20)*(r20))))+((((r21)*(r21))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((r01)*(r22)*(sj0)*(sj5)))+(((-1.00000000000000)*(r02)*(r21)*(sj0)*(sj5)))+(((cj5)*(r02)*(r20)*(sj0)))+(((-1.00000000000000)*(cj5)*(r00)*(r22)*(sj0)))+(((cj0)*(cj5)*(r10)*(r22)))+(((cj0)*(r12)*(r21)*(sj5)))+(((-1.00000000000000)*(cj0)*(r11)*(r22)*(sj5)))+(((-1.00000000000000)*(cj0)*(cj5)*(r12)*(r20))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
IKReal x546=x523;
IKReal x547=x522;
dummyeval[0]=((((r00)*(r20)*(sj0)*(x547)))+(((-1.00000000000000)*(cj0)*(r11)*(r21)*(x546)))+(((r01)*(r21)*(sj0)*(x546)))+(((-1.00000000000000)*(cj0)*(r10)*(r20)*(x547)))+(((-1.00000000000000)*(cj5)*(r01)*(r20)*(sj0)*(sj5)))+(((cj0)*(cj5)*(r11)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(sj0)*(sj5)))+(((-1.00000000000000)*(cj0)*(r12)*(r22)))+(((cj0)*(cj5)*(r10)*(r21)*(sj5)))+(((r02)*(r22)*(sj0))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x548=x523;
IKReal x549=x522;
IKReal x550=((cj5)*(r01)*(r20)*(sj0)*(sj5));
IKReal x551=((cj0)*(r11)*(r21)*(x548));
IKReal x552=((cj0)*(r12)*(r22));
IKReal x553=((cj5)*(r00)*(r21)*(sj0)*(sj5));
IKReal x554=((cj0)*(r10)*(r20)*(x549));
IKReal x555=((x553)+(x552)+(x551)+(x550)+(x554));
IKReal x556=((cj0)*(cj5)*(r11)*(r20)*(sj5));
IKReal x557=((cj0)*(cj5)*(r10)*(r21)*(sj5));
IKReal x558=((r02)*(r22)*(sj0));
IKReal x559=((r01)*(r21)*(sj0)*(x548));
IKReal x560=((r00)*(r20)*(sj0)*(x549));
IKReal x561=((x559)+(x558)+(x557)+(x556)+(x560));
IKReal x562=((cj1)*(cj3)*(sj2));
IKReal x563=((cj2)*(cj3)*(sj1));
IKReal x564=((x562)+(x563));
IKReal x565=((-1.00000000000000)*(x564));
j4array[0]=IKatan2(((x565)*(((IKabs(((((-1.00000000000000)*(x555)))+(x561))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x555)))+(x561)))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj0)*(r11)*(sj5)))+(((cj0)*(cj5)*(r10)))+(((-1.00000000000000)*(cj5)*(r00)*(sj0)))+(((r01)*(sj0)*(sj5)))))), ((x565)*(((IKabs(((x555)+(((-1.00000000000000)*(x561))))) != 0)?((IKReal)1/(((x555)+(((-1.00000000000000)*(x561)))))):(IKReal)1.0e30))*(((((cj0)*(r12)))+(((-1.00000000000000)*(r02)*(sj0)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x566=((r02)*(r21)*(sj0)*(sj5));
IKReal x567=((cj5)*(r00)*(r22)*(sj0));
IKReal x568=((cj0)*(cj5)*(r12)*(r20));
IKReal x569=((cj0)*(r11)*(r22)*(sj5));
IKReal x570=((x568)+(x569)+(x566)+(x567));
IKReal x571=((r01)*(r22)*(sj0)*(sj5));
IKReal x572=((cj5)*(r02)*(r20)*(sj0));
IKReal x573=((cj0)*(cj5)*(r10)*(r22));
IKReal x574=((cj0)*(r12)*(r21)*(sj5));
IKReal x575=((x574)+(x571)+(x573)+(x572));
IKReal x576=((sj1)*(sj2));
IKReal x577=((cj1)*(cj2));
IKReal x578=((((-1.00000000000000)*(x577)))+(x576));
j4array[0]=IKatan2(((x578)*(((IKabs(((((-1.00000000000000)*(x570)))+(x575))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x570)))+(x575)))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj0)*(r11)*(sj5)))+(((cj0)*(cj5)*(r10)))+(((-1.00000000000000)*(cj5)*(r00)*(sj0)))+(((r01)*(sj0)*(sj5)))))), ((x578)*(((IKabs(((((-1.00000000000000)*(x575)))+(x570))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x575)))+(x570)))):(IKReal)1.0e30))*(((((cj0)*(r12)))+(((-1.00000000000000)*(r02)*(sj0)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x579=((cj1)*(cj3)*(sj2));
IKReal x580=((cj2)*(cj3)*(sj1));
IKReal x581=((x579)+(x580));
IKReal x582=((-1.00000000000000)*(x581));
IKReal x583=((cj5)*(r20));
IKReal x584=((r21)*(sj5));
IKReal x585=((sj1)*(sj2));
IKReal x586=((cj1)*(cj2));
IKReal x587=((x585)+(((-1.00000000000000)*(x586))));
IKReal x588=(r22)*(r22);
IKReal x589=x522;
IKReal x590=(r20)*(r20);
IKReal x591=(x583)*(x583);
IKReal x592=(r21)*(r21);
IKReal x593=x523;
IKReal x594=(x584)*(x584);
IKReal x595=((x588)+(x594)+(x591));
IKReal x596=((2.00000000000000)*(x583)*(x584));
IKReal x597=((((-1.00000000000000)*(x596)))+(x595));
IKReal x598=((IKabs(x597) != 0)?((IKReal)1/(x597)):(IKReal)1.0e30);
j4array[0]=IKatan2(((x598)*(((((x582)*(((x584)+(((-1.00000000000000)*(x583)))))))+(((r22)*(x587)))))), ((x598)*(((((x587)*(((x583)+(((-1.00000000000000)*(x584)))))))+(((r22)*(x582)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x599=((cj1)*(cj3)*(sj2));
IKReal x600=((cj2)*(cj3)*(sj1));
IKReal x601=((x599)+(x600));
IKReal x602=((-1.00000000000000)*(x601));
IKReal x603=((cj5)*(r20));
IKReal x604=((r21)*(sj5));
IKReal x605=((sj1)*(sj2));
IKReal x606=((cj1)*(cj2));
IKReal x607=((x605)+(((-1.00000000000000)*(x606))));
IKReal x608=(r22)*(r22);
IKReal x609=(cj5)*(cj5);
IKReal x610=(r20)*(r20);
IKReal x611=(x603)*(x603);
IKReal x612=(r21)*(r21);
IKReal x613=(sj5)*(sj5);
IKReal x614=(x604)*(x604);
IKReal x615=((x608)+(x614)+(x611));
IKReal x616=((2.00000000000000)*(x603)*(x604));
IKReal x617=((((-1.00000000000000)*(x616)))+(x615));
IKReal x618=((IKabs(x617) != 0)?((IKReal)1/(x617)):(IKReal)1.0e30);
j4array[0]=IKatan2(((x618)*(((((x602)*(((x604)+(((-1.00000000000000)*(x603)))))))+(((r22)*(x607)))))), ((x618)*(((((x607)*(((x603)+(((-1.00000000000000)*(x604)))))))+(((r22)*(x602)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
    j4array[0]-=IK2PI;
else if( j4array[0] < -IKPI )
    j4array[0]+=IK2PI;
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] ) { continue; }
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
IKReal x619=x609;
IKReal x620=x613;
dummyeval[0]=((((-1.00000000000000)*(cj5)*(r02)*(r11)*(sj4)))+(((cj5)*(r01)*(r12)*(sj4)))+(((cj4)*(r01)*(r10)*(x619)))+(((cj4)*(r01)*(r10)*(x620)))+(((-1.00000000000000)*(r02)*(r10)*(sj4)*(sj5)))+(((-1.00000000000000)*(cj4)*(r00)*(r11)*(x620)))+(((r00)*(r12)*(sj4)*(sj5)))+(((-1.00000000000000)*(cj4)*(r00)*(r11)*(x619))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
IKReal x621=x609;
IKReal x622=x613;
dummyeval[0]=((((-1.00000000000000)*(x622)*((r00)*(r00))))+(((-2.00000000000000)*(cj5)*(r00)*(r01)*(sj5)))+(((-1.00000000000000)*(x621)*((r11)*(r11))))+(((-1.00000000000000)*(x622)*((r10)*(r10))))+(((-2.00000000000000)*(cj5)*(r10)*(r11)*(sj5)))+(((-1.00000000000000)*(x621)*((r01)*(r01)))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
{
IKReal dummyeval[1];
IKReal x623=x609;
IKReal x624=x613;
dummyeval[0]=((((r01)*(r10)*(sj4)*(x623)))+(((r01)*(r10)*(sj4)*(x624)))+(((cj4)*(r02)*(r10)*(sj5)))+(((-1.00000000000000)*(r00)*(r11)*(sj4)*(x623)))+(((-1.00000000000000)*(r00)*(r11)*(sj4)*(x624)))+(((-1.00000000000000)*(cj4)*(r00)*(r12)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(r01)*(r12)))+(((cj4)*(cj5)*(r02)*(r11))));
if( IKabs(dummyeval[0]) < 0.000001  )
{
continue;

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x625=x609;
IKReal x626=x613;
IKReal x627=((cj4)*(r02)*(r10)*(sj5));
IKReal x628=((r01)*(r10)*(sj4)*(x625));
IKReal x629=((r01)*(r10)*(sj4)*(x626));
IKReal x630=((cj4)*(cj5)*(r02)*(r11));
IKReal x631=((x627)+(x629)+(x628)+(x630));
IKReal x632=((r00)*(r11)*(sj4)*(x625));
IKReal x633=((r00)*(r11)*(sj4)*(x626));
IKReal x634=((cj4)*(r00)*(r12)*(sj5));
IKReal x635=((cj4)*(cj5)*(r01)*(r12));
IKReal x636=((x634)+(x635)+(x632)+(x633));
IKReal x637=((((-1.00000000000000)*(x636)))+(x631));
IKReal x638=((IKabs(x637) != 0)?((IKReal)1/(x637)):(IKReal)1.0e30);
j0array[0]=IKatan2(((x638)*(((((cj3)*(((((r11)*(sj4)*(sj5)))+(((cj4)*(r12)))+(((-1.00000000000000)*(cj5)*(r10)*(sj4)))))))+(((-1.00000000000000)*(sj3)*(((((cj5)*(r11)))+(((r10)*(sj5)))))))))), ((x638)*(((((sj3)*(((((-1.00000000000000)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r01)))))))+(((-1.00000000000000)*(cj3)*(((((-1.00000000000000)*(r01)*(sj4)*(sj5)))+(((cj5)*(r00)*(sj4)))+(((-1.00000000000000)*(cj4)*(r02)))))))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
    j0array[0]-=IK2PI;
else if( j0array[0] < -IKPI )
    j0array[0]+=IK2PI;
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] ) { continue; }
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x639=x609;
IKReal x640=x613;
IKReal x641=((r00)*(sj5));
IKReal x642=((cj5)*(r01));
IKReal x643=((x642)+(x641));
IKReal x644=((cj1)*(cj2)*(sj3));
IKReal x645=((sj1)*(sj2)*(sj3));
IKReal x646=((((-1.00000000000000)*(x645)))+(x644));
IKReal x647=((cj5)*(r11));
IKReal x648=((r10)*(sj5));
IKReal x649=((x647)+(x648));
IKReal x650=((2.00000000000000)*(x641)*(x642));
IKReal x651=((2.00000000000000)*(x647)*(x648));
IKReal x652=(r01)*(r01);
IKReal x653=((x639)*(x652));
IKReal x654=(r10)*(r10);
IKReal x655=((x640)*(x654));
IKReal x656=(r11)*(r11);
IKReal x657=((x639)*(x656));
IKReal x658=(r00)*(r00);
IKReal x659=((x640)*(x658));
IKReal x660=((x650)+(x651)+(x653)+(x655)+(x657)+(x659));
IKReal x661=((-1.00000000000000)*(x660));
IKReal x662=((IKabs(x661) != 0)?((IKReal)1/(x661)):(IKReal)1.0e30);
j0array[0]=IKatan2(((x662)*(((((cj3)*(x643)))+(((x646)*(x649)))))), ((x662)*(((((x643)*(x646)))+(((-1.00000000000000)*(cj3)*(x649)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
    j0array[0]-=IK2PI;
else if( j0array[0] < -IKPI )
    j0array[0]+=IK2PI;
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] ) { continue; }
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
IKReal x663=x609;
IKReal x664=x613;
IKReal x665=((r02)*(r10)*(sj4)*(sj5));
IKReal x666=((cj4)*(r00)*(r11)*(x663));
IKReal x667=((cj4)*(r00)*(r11)*(x664));
IKReal x668=((cj5)*(r02)*(r11)*(sj4));
IKReal x669=((x668)+(x665)+(x667)+(x666));
IKReal x670=((cj5)*(r01)*(r12)*(sj4));
IKReal x671=((cj4)*(r01)*(r10)*(x663));
IKReal x672=((cj4)*(r01)*(r10)*(x664));
IKReal x673=((r00)*(r12)*(sj4)*(sj5));
IKReal x674=((x672)+(x673)+(x670)+(x671));
j0array[0]=IKatan2(((-1.00000000000000)*(cj3)*(((IKabs(((((-1.00000000000000)*(x669)))+(x674))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x669)))+(x674)))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj4)*(r11)*(sj5)))+(((cj4)*(cj5)*(r10)))+(((r12)*(sj4)))))), ((-1.00000000000000)*(cj3)*(((IKabs(((x669)+(((-1.00000000000000)*(x674))))) != 0)?((IKReal)1/(((x669)+(((-1.00000000000000)*(x674)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj4)*(cj5)*(r00)))+(((cj4)*(r01)*(sj5)))+(((-1.00000000000000)*(r02)*(sj4)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
    j0array[0]-=IK2PI;
else if( j0array[0] < -IKPI )
    j0array[0]+=IK2PI;
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] ) { continue; }
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j0;
solution.basesol[1].foffset = j1;
solution.basesol[2].foffset = j2;
solution.basesol[3].foffset = j3;
solution.basesol[4].foffset = j4;
solution.basesol[5].foffset = j5;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}
}
}

}

}
    }
}
return vsolutions.size()>0;
}

static inline bool matrixinverse(double* A, int n)
{
    int info;
    static std::vector<double> work;
    static std::vector<int> ipiv;
    if( ipiv.size() != n ) {
        ipiv.resize(n);
    }
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    if( work.size() == 0 ) {
        int optimalwork=-1;
        work.resize(1);
        dgetri_(&n, A, &n, &ipiv[0], &work[0], &optimalwork, &info);
        work.resize(work[0]);
    }
    int worksize=(int)work.size();
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

static inline bool checkconsistency12(const double* Breal)
{
    const double tol = 1e-5; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[0]-Breal[1]) < tol && IKabs(Breal[0]*Breal[2]-Breal[3]) < tol && IKabs(Breal[1]*Breal[2]-Breal[4]) < tol && IKabs(Breal[2]*Breal[2]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol && IKabs(Breal[1]*Breal[5]-Breal[7]) < tol && IKabs(Breal[2]*Breal[5]-Breal[8]) < tol && IKabs(Breal[0]*Breal[8]-Breal[9]) < tol && IKabs(Breal[1]*Breal[8]-Breal[10]) < tol;
}

/// \brief Solves a polynomial given its evaluation is the determinant of a matrix / (1+x^2)^4
///
/// matcoeffs is a 3*9*6 = 162 length vector
/// every 18 coeffs describe one equation in the following order:
/// [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]
/// let A have 
static inline void solvedetdialyticpoly12(const IKReal* matcoeffs, IKReal* rawroots, int& numroots)
{
    using std::complex;
    //assert(rawcoeffs[0] != 0);
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    const int maxsteps = 300;
    const int D = 24;
    const int matrixdim = 12;
    complex<IKReal> roots[D];
    complex<IKReal> A[matrixdim*matrixdim];
    IKReal Areal[matrixdim*matrixdim], Breal[matrixdim];
    int ipiv[matrixdim]={0};
    numroots = 0;
    IKReal err[D];
    roots[0] = complex<IKReal>(1,0);
    roots[1] = complex<IKReal>(0.4,0.9); // any complex number not a root of unity is works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < D; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    int info, coeffindex;
    IKReal polymultiplier=1; // should be 1/lead coeff. Needed or otherwise convergence will be slow
    {     
        coeffindex = 0;
        for(int j = 0; j < 6; ++j) {
            for(int k = 0; k < 9; ++k) {
                Areal[j*matrixdim+k+3] = matcoeffs[coeffindex+2];
                Areal[(j+6)*matrixdim+k] = Areal[j*matrixdim+k+3];
                coeffindex += 3;
            }
            // fill the rest with 0s!
            for(int k = 0; k < 3; ++k) {
                Areal[j*matrixdim+k] = Areal[(j+6)*matrixdim+k+9] = 0;
            }
        }
        dgetrf_ (&matrixdim, &matrixdim, Areal, &matrixdim, &ipiv[0], &info);
        if( info != 0 ) {
            return; // failed
        }
        polymultiplier = ipiv[0] != 1 ? -Areal[0] : Areal[0];
        for(int j = 1; j < matrixdim; ++j) {
            polymultiplier *= Areal[j*matrixdim+j];
            if (ipiv[j] != (j+1)) {
                polymultiplier = -polymultiplier;
            }
        }
        if( isnan(polymultiplier) || polymultiplier == 0 ) {
            return;
        }
        polymultiplier = 1/polymultiplier;
        //polymultiplier = 4829636.6096225977;
    }

    //roots[D-1] = complex<IKReal>(0,0);
    int step;
    for(step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < D; ++i) {
            if ( err[i] >= tol && !isinf(real(roots[i])) && !isinf(imag(roots[i])) ) {
                changed = true;
                // evaluate the determinant
                complex<IKReal> x = roots[i], x2 = roots[i]*roots[i];
                coeffindex = 0;
                for(int j = 0; j < 6; ++j) {
                    for(int k = 0; k < 9; ++k) {
                        A[j*matrixdim+k+3] = matcoeffs[coeffindex]+matcoeffs[coeffindex+1]*x+matcoeffs[coeffindex+2]*x2;
                        A[(j+6)*matrixdim+k] = A[j*matrixdim+k+3];
                        coeffindex += 3;
                    }
                    // fill the rest with 0s!
                    A[j*matrixdim+0] = A[(j+6)*matrixdim+0+9] = 0;
                    A[j*matrixdim+1] = A[(j+6)*matrixdim+1+9] = 0;
                    A[j*matrixdim+2] = A[(j+6)*matrixdim+2+9] = 0;
                }
                zgetrf_ (&matrixdim, &matrixdim, A, &matrixdim, &ipiv[0], &info);
                if( info != 0 ) {
                    continue; // failed
                }
                complex<IKReal> det = ipiv[0] != 1 ? -A[0] : A[0];
                for(int j = 1; j < matrixdim; ++j) {
                    det *= A[j*matrixdim+j];
                    if (ipiv[j] != (j+1)) {
                        det = -det;
                    }
                }
                if( isnan(real(det)) ) {
                    continue; // failed;
                }
                // have to divide by (1+roots[i]^2)^4 to get a 16th degree polynomial
                det *= polymultiplier;
                //complex<IKReal> denom = complex<IKReal>(1,0)+x2;
                //denom *= denom;
                //denom *= denom;
                //det /= denom;
                for(int j = 0; j < D; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] && !isinf(real(roots[j])) ) {
                            det /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= det;
                err[i] = abs(det);
            }
        }
        if( !changed ) {
            break;
        }
    }
    numroots = 0;
    for(int i = 0; i < D; ++i) {
        if( IKabs(imag(roots[i])) < 100*tol && IKabs(err[i]) < 100*tol ) {
            // found a real solution!, now solve the linear system
            IKReal curroot = real(roots[i]);
            IKReal curroot2 = curroot*curroot;
            coeffindex = 0;
            for(int j = 0; j < 6; ++j) {
                for(int k = 0; k < 9; ++k) {
                    IKReal x = matcoeffs[coeffindex]+matcoeffs[coeffindex+1]*curroot+matcoeffs[coeffindex+2]*curroot2;
                    Areal[j+matrixdim*(k+3-1)] = x;
                    if( k == 0 ) {
                        Breal[j+6] = -x;
                    }
                    else {
                        Areal[j+6+matrixdim*(k-1)] = x;
                    }
                    coeffindex += 3;
                }
                // fill the rest with 0s!
                Breal[j] = 0;
                Areal[j] = Areal[j+matrixdim*1] = 0;
                Areal[(j+6)+matrixdim*8] = Areal[(j+6)+matrixdim*9] = Areal[(j+6)+matrixdim*10] = 0;
            }
            // perform LU decomposition to solve for null space and solution simultaneously
            int n = matrixdim-1, nrhs=1;
            dgetrf_(&matrixdim, &n, Areal, &matrixdim, &ipiv[0], &info);
            if( info != 0 ) {
                continue;
            }
//            for(int j = matrixdim-1; j >=0; --j) {
//                std::swap(Breal[j],Breal[ipiv[j]-1]);
//                ipiv[j] = j+1;
//            }
            dgetrs_("No transpose", &n, &nrhs, Areal, &matrixdim, &ipiv[0], Breal, &matrixdim, &info);
            if( info != 0 ) {
                continue;
            }
            //int nrhs = 1, n=matrixdim-1;
            //dgesv_(&n, &nrhs, Areal, &matrixdim, ipiv, Breal, &matrixdim, &info);
            if(info == 0) {
                // because Areal might have a null space, have to solve for it
                int nullspacedim = 0;
                for(int j = 0; j < matrixdim-1; ++j) {
                    if( IKabs(Areal[j+matrixdim*j]) < 1000*tol ) {
                        nullspacedim++;
                    }
                }
                if( nullspacedim >= 2 ) {
                    // have two nullspace vectors!
                    IKReal ns[2][matrixdim-1];
                    for(int ins = 0; ins < 2; ++ins) {
                        IKReal nsnum=1;
                        for(int j = matrixdim-2; j >= 0; --j) {
                            if( IKabs(Areal[j+matrixdim*j]) < 1000*tol ) {
                                ns[ins][j] = nsnum;
                                if( ins > 0 ) {
                                    nsnum += 1;
                                }
                            }
                            else {
                                IKReal accum = 0;
                                for(int k = j+1; k < matrixdim-1; ++k) {
                                    accum += ns[ins][k] * Areal[j+matrixdim*k];
                                }
                                ns[ins][j] = -accum/Areal[j+matrixdim*j];
                            }
                        }
                    }
                    // have to solve this with another least squares....
                    // [ns0_0**2,       2*ns1_0*ns0_0,             ns1_0**2,    -ns0_1 + 2*ns0_0*x0,          -ns1_1 + 2*ns1_0*x0]              [x1 - x0**2]
                    // [ns0_0*ns0_2,    ns1_0*ns0_2 + ns1_2*ns0_0, ns1_0*ns1_2, -ns0_3 + ns0_0*x2 + ns0_2*x0, -ns1_3 + ns1_0*x2 + ns1_2*x0]     [x3 - x0*x2]
                    // [ns0_1*ns0_2,    ns1_1*ns0_2 + ns1_2*ns0_1, ns1_1*ns1_2, -ns0_4 + ns0_1*x2 + ns0_2*x1, -ns1_4 + ns1_1*x2 + ns1_2*x1] X = [x4 - x1*x2]
                    // [ns0_2**2,       2*ns1_2*ns0_2,             ns1_2**2,    -ns0_5 + 2*ns0_2*x2,          -ns1_5 + 2*ns1_2*x2]              [x5 - x2**2]
                    // [ns0_0*ns0_5,    ns1_0*ns0_5 + ns1_5*ns0_0, ns1_0*ns1_5, -ns0_6 + ns0_0*x5 + ns0_5*x0, -ns1_6 + ns1_0*x5 + ns1_5*x0]     [x6 - x0*x5]
                    Areal[0] = ns[0][0]*ns[0][0];
                    Areal[1] = ns[0][0]*ns[0][2];
                    Areal[2] = ns[0][1]*ns[0][2];
                    Areal[3] = ns[0][2]*ns[0][2];
                    Areal[4] = ns[0][0]*ns[0][5];
                    Areal[5] = 2*ns[1][0]*ns[0][0];
                    Areal[6] = ns[1][0]*ns[0][2] + ns[1][2]*ns[0][0];
                    Areal[7] = ns[1][1]*ns[0][2] + ns[1][2]*ns[0][1];
                    Areal[8] = 2*ns[1][2]*ns[0][2];
                    Areal[9] = ns[1][0]*ns[0][5] + ns[1][5]*ns[0][0];
                    Areal[10] = ns[1][0]*ns[1][0];
                    Areal[11] = ns[1][0]*ns[1][2];
                    Areal[12] = ns[1][1]*ns[1][2];
                    Areal[13] = ns[1][2]*ns[1][2];
                    Areal[14] = ns[1][0]*ns[1][5];
                    Areal[15] = -ns[0][1] + 2*ns[0][0]*Breal[0];
                    Areal[16] = -ns[0][3] + ns[0][0]*Breal[2] + ns[0][2]*Breal[0];
                    Areal[17] = -ns[0][4] + ns[0][1]*Breal[2] + ns[0][2]*Breal[1];
                    Areal[18] = -ns[0][5] + 2*ns[0][2]*Breal[2];
                    Areal[19] = -ns[0][6] + ns[0][0]*Breal[5] + ns[0][5]*Breal[0];
                    Areal[20] = -ns[1][1] + 2*ns[1][0]+Breal[0];
                    Areal[21] = -ns[1][3] + ns[1][0]*Breal[2] + ns[1][2]*Breal[0];
                    Areal[22] = -ns[1][4] + ns[1][1]*Breal[2] + ns[1][2]*Breal[1];
                    Areal[23] = -ns[1][5] + 2*ns[1][2]*Breal[2];
                    Areal[24] = -ns[1][6] + ns[1][0]*Breal[5] + ns[1][5]*Breal[0];
                    int startindex = 25;
                    Areal[startindex] = Breal[1]-Breal[0]*Breal[0];
                    Areal[startindex+1] = Breal[3]-Breal[0]*Breal[2];
                    Areal[startindex+2] = Breal[4]-Breal[1]*Breal[2];
                    Areal[startindex+3] = Breal[5]-Breal[2]*Breal[2];
                    Areal[startindex+4] = Breal[6]-Breal[0]*Breal[5];
                    int nn=5;
                    dgesv_(&nn, &nrhs, Areal, &nn, ipiv, &Areal[startindex], &nn, &info);
                    if( info == 0 ) {
                        if( 1 ) {//IKabs(Areal[startindex]-Areal[startindex+3]*Areal[startindex+3]) < 1000*tol && IKabs(Areal[startindex+2]-Areal[startindex+4]*Areal[startindex+4]) < 1000*tol ) {
                            for(int k = 0; k < matrixdim-1; ++k) {
                                Breal[k] += Areal[startindex+3]*ns[0][k]+Areal[startindex+4]*ns[1][k];
                            }
                            if( checkconsistency12(Breal) ) {
                                rawroots[numroots++] = curroot;
                                rawroots[numroots++] = Breal[2];
                                rawroots[numroots++] = Breal[0];
                            }
                        }
                    }
                }
                else if( nullspacedim == 1 ) {
                    // solve an angle with quadratic equation
                    IKReal nullspace[matrixdim-1];
                    for(int j = matrixdim-2; j >= 0; --j) {
                        if( IKabs(Areal[j+matrixdim*j]) < 1000*tol ) {
                            nullspace[j] = 1;
                        }
                        else {
                            IKReal accum = 0;
                            for(int k = j+1; k < matrixdim-1; ++k) {
                                accum += nullspace[k] * Areal[j+matrixdim*k];
                            }
                            nullspace[j] = -accum/Areal[j+matrixdim*j];
                        }
                    }
                    // take the biggest abs value between [0],[1] and [2],[5]
                    IKReal f0 = IKabs(nullspace[0])+IKabs(nullspace[1]);
                    IKReal f1 = IKabs(nullspace[2])+IKabs(nullspace[5]);
                    int nsnumroots;
                    IKReal nsroots[2], nscoeffs[3];
                    if( f0 == 0 && f1 == 0 ) {
                        if( checkconsistency12(Breal) ) {
                            rawroots[numroots++] = curroot;
                            rawroots[numroots++] = Breal[2];
                            rawroots[numroots++] = Breal[0];
                        }
                    }
                    else {
                        if( f0 > f1 ) {
                            nscoeffs[0] = nullspace[0]*nullspace[0];
                            nscoeffs[1] = 2*nullspace[0]*Breal[0]-nullspace[1];
                            nscoeffs[2] = Breal[0]*Breal[0]-Breal[1];
                        }
                        else if( f1 > 0 ) {
                            nscoeffs[0] = nullspace[2]*nullspace[2];
                            nscoeffs[1] = 2*nullspace[2]*Breal[2]-nullspace[5];
                            nscoeffs[2] = Breal[2]*Breal[2]-Breal[5];
                        }
                        polyroots2(nscoeffs,nsroots,nsnumroots);
                        nsroots[1] -= nsroots[0];
                        for(int j = 0; j < nsnumroots; ++j) {
                            for(int k = 0; k < matrixdim-1; ++k) {
                                Breal[k] += nsroots[j]*nullspace[k];
                            }
                            if( checkconsistency12(Breal) ) {
                                rawroots[numroots++] = curroot;
                                rawroots[numroots++] = Breal[2];
                                rawroots[numroots++] = Breal[0];
                            }
                        }
                    }
                }
                else {
                    if( checkconsistency12(Breal) ) {
                        rawroots[numroots++] = curroot;
                        rawroots[numroots++] = Breal[2];
                        rawroots[numroots++] = Breal[0];
                    }
                }
            }
        }
    }
}
static inline void polyroots2(IKReal rawcoeffs[2+1], IKReal rawroots[2], int& numroots) {
    IKReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return ""; }

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%f, ", (float)sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
