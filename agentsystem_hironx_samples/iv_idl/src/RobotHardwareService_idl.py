# Python stubs generated by omniidl from RobotHardwareService.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)


#
# Start of module "_GlobalIDL"
#
__name__ = "_GlobalIDL"
_0__GlobalIDL = omniORB.openModule("_GlobalIDL", r"RobotHardwareService.idl")
_0__GlobalIDL__POA = omniORB.openModule("_GlobalIDL__POA", r"RobotHardwareService.idl")


# interface RobotHardwareService
_0__GlobalIDL._d_RobotHardwareService = (omniORB.tcInternal.tv_objref, "IDL:RobotHardwareService:1.0", "RobotHardwareService")
omniORB.typeMapping["IDL:RobotHardwareService:1.0"] = _0__GlobalIDL._d_RobotHardwareService
_0__GlobalIDL.RobotHardwareService = omniORB.newEmptyClass()
class RobotHardwareService :
    _NP_RepositoryId = _0__GlobalIDL._d_RobotHardwareService[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil

    CALIB_STATE_MASK = 1
    CALIB_STATE_SHIFT = 0
    SERVO_STATE_MASK = 2
    SERVO_STATE_SHIFT = 1
    POWER_STATE_MASK = 4
    POWER_STATE_SHIFT = 2
    SERVO_ALARM_MASK = 524280
    SERVO_ALARM_SHIFT = 3
    DRIVER_TEMP_MASK = 4278190080
    DRIVER_TEMP_SHIFT = 24
    
    # typedef ... DblSequence
    class DblSequence:
        _NP_RepositoryId = "IDL:RobotHardwareService/DblSequence:1.0"
        def __init__(self, *args, **kw):
            raise RuntimeError("Cannot construct objects of this type.")
    _d_DblSequence  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 0)
    _ad_DblSequence = (omniORB.tcInternal.tv_alias, DblSequence._NP_RepositoryId, "DblSequence", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 0))
    _tc_DblSequence = omniORB.tcInternal.createTypeCode(_ad_DblSequence)
    omniORB.registerType(DblSequence._NP_RepositoryId, _ad_DblSequence, _tc_DblSequence)
    
    # typedef ... LongSequence
    class LongSequence:
        _NP_RepositoryId = "IDL:RobotHardwareService/LongSequence:1.0"
        def __init__(self, *args, **kw):
            raise RuntimeError("Cannot construct objects of this type.")
    _d_LongSequence  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_long, 0)
    _ad_LongSequence = (omniORB.tcInternal.tv_alias, LongSequence._NP_RepositoryId, "LongSequence", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_long, 0))
    _tc_LongSequence = omniORB.tcInternal.createTypeCode(_ad_LongSequence)
    omniORB.registerType(LongSequence._NP_RepositoryId, _ad_LongSequence, _tc_LongSequence)
    
    # typedef ... StrSequence
    class StrSequence:
        _NP_RepositoryId = "IDL:RobotHardwareService/StrSequence:1.0"
        def __init__(self, *args, **kw):
            raise RuntimeError("Cannot construct objects of this type.")
    _d_StrSequence  = (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0)
    _ad_StrSequence = (omniORB.tcInternal.tv_alias, StrSequence._NP_RepositoryId, "StrSequence", (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0))
    _tc_StrSequence = omniORB.tcInternal.createTypeCode(_ad_StrSequence)
    omniORB.registerType(StrSequence._NP_RepositoryId, _ad_StrSequence, _tc_StrSequence)
    
    # typedef ... DblArray3
    class DblArray3:
        _NP_RepositoryId = "IDL:RobotHardwareService/DblArray3:1.0"
        def __init__(self, *args, **kw):
            raise RuntimeError("Cannot construct objects of this type.")
    _d_DblArray3  = (omniORB.tcInternal.tv_array, omniORB.tcInternal.tv_double, 3)
    _ad_DblArray3 = (omniORB.tcInternal.tv_alias, DblArray3._NP_RepositoryId, "DblArray3", (omniORB.tcInternal.tv_array, omniORB.tcInternal.tv_double, 3))
    _tc_DblArray3 = omniORB.tcInternal.createTypeCode(_ad_DblArray3)
    omniORB.registerType(DblArray3._NP_RepositoryId, _ad_DblArray3, _tc_DblArray3)
    
    # typedef ... DblArray6
    class DblArray6:
        _NP_RepositoryId = "IDL:RobotHardwareService/DblArray6:1.0"
        def __init__(self, *args, **kw):
            raise RuntimeError("Cannot construct objects of this type.")
    _d_DblArray6  = (omniORB.tcInternal.tv_array, omniORB.tcInternal.tv_double, 6)
    _ad_DblArray6 = (omniORB.tcInternal.tv_alias, DblArray6._NP_RepositoryId, "DblArray6", (omniORB.tcInternal.tv_array, omniORB.tcInternal.tv_double, 6))
    _tc_DblArray6 = omniORB.tcInternal.createTypeCode(_ad_DblArray6)
    omniORB.registerType(DblArray6._NP_RepositoryId, _ad_DblArray6, _tc_DblArray6)
    
    # typedef ... DblSequence3
    class DblSequence3:
        _NP_RepositoryId = "IDL:RobotHardwareService/DblSequence3:1.0"
        def __init__(self, *args, **kw):
            raise RuntimeError("Cannot construct objects of this type.")
    _d_DblSequence3  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 3)
    _ad_DblSequence3 = (omniORB.tcInternal.tv_alias, DblSequence3._NP_RepositoryId, "DblSequence3", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 3))
    _tc_DblSequence3 = omniORB.tcInternal.createTypeCode(_ad_DblSequence3)
    omniORB.registerType(DblSequence3._NP_RepositoryId, _ad_DblSequence3, _tc_DblSequence3)
    
    # typedef ... DblSequence6
    class DblSequence6:
        _NP_RepositoryId = "IDL:RobotHardwareService/DblSequence6:1.0"
        def __init__(self, *args, **kw):
            raise RuntimeError("Cannot construct objects of this type.")
    _d_DblSequence6  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 6)
    _ad_DblSequence6 = (omniORB.tcInternal.tv_alias, DblSequence6._NP_RepositoryId, "DblSequence6", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 6))
    _tc_DblSequence6 = omniORB.tcInternal.createTypeCode(_ad_DblSequence6)
    omniORB.registerType(DblSequence6._NP_RepositoryId, _ad_DblSequence6, _tc_DblSequence6)
    
    # struct RobotState
    _0__GlobalIDL.RobotHardwareService.RobotState = omniORB.newEmptyClass()
    class RobotState (omniORB.StructBase):
        _NP_RepositoryId = "IDL:RobotHardwareService/RobotState:1.0"

        _NP_ClassName = "_GlobalIDL.RobotHardwareService.RobotState"

        def __init__(self, angle, command, torque, servoState, force, rateGyro, accel, voltage, current):
            self.angle = angle
            self.command = command
            self.torque = torque
            self.servoState = servoState
            self.force = force
            self.rateGyro = rateGyro
            self.accel = accel
            self.voltage = voltage
            self.current = current
    
    _d_RobotState  = _0__GlobalIDL.RobotHardwareService._d_RobotState = (omniORB.tcInternal.tv_struct, RobotState, RobotState._NP_RepositoryId, "RobotState", "angle", omniORB.typeMapping["IDL:RobotHardwareService/DblSequence:1.0"], "command", omniORB.typeMapping["IDL:RobotHardwareService/DblSequence:1.0"], "torque", omniORB.typeMapping["IDL:RobotHardwareService/DblSequence:1.0"], "servoState", omniORB.typeMapping["IDL:RobotHardwareService/LongSequence:1.0"], "force", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RobotHardwareService/DblSequence6:1.0"], 0), "rateGyro", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RobotHardwareService/DblSequence3:1.0"], 0), "accel", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:RobotHardwareService/DblSequence3:1.0"], 0), "voltage", omniORB.tcInternal.tv_double, "current", omniORB.tcInternal.tv_double)
    _tc_RobotState = omniORB.tcInternal.createTypeCode(_d_RobotState)
    omniORB.registerType(RobotState._NP_RepositoryId, _d_RobotState, _tc_RobotState)
    
    # enum SwitchStatus
    SWITCH_ON = omniORB.EnumItem("SWITCH_ON", 0)
    SWITCH_OFF = omniORB.EnumItem("SWITCH_OFF", 1)
    SwitchStatus = omniORB.Enum("IDL:RobotHardwareService/SwitchStatus:1.0", (SWITCH_ON, SWITCH_OFF,))

    _d_SwitchStatus  = (omniORB.tcInternal.tv_enum, SwitchStatus._NP_RepositoryId, "SwitchStatus", SwitchStatus._items)
    _tc_SwitchStatus = omniORB.tcInternal.createTypeCode(_d_SwitchStatus)
    omniORB.registerType(SwitchStatus._NP_RepositoryId, _d_SwitchStatus, _tc_SwitchStatus)


_0__GlobalIDL.RobotHardwareService = RobotHardwareService
_0__GlobalIDL._tc_RobotHardwareService = omniORB.tcInternal.createTypeCode(_0__GlobalIDL._d_RobotHardwareService)
omniORB.registerType(RobotHardwareService._NP_RepositoryId, _0__GlobalIDL._d_RobotHardwareService, _0__GlobalIDL._tc_RobotHardwareService)

# RobotHardwareService operations and attributes
RobotHardwareService._d_getStatus = ((), (omniORB.typeMapping["IDL:RobotHardwareService/RobotState:1.0"], ), None)
RobotHardwareService._d_power = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:RobotHardwareService/SwitchStatus:1.0"]), (omniORB.tcInternal.tv_boolean, ), None)
RobotHardwareService._d_servo = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:RobotHardwareService/SwitchStatus:1.0"]), (omniORB.tcInternal.tv_boolean, ), None)
RobotHardwareService._d_calibrateJoint = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_ulong, ), None)
RobotHardwareService._d_calibrateSensor = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_ulong, ), None)
RobotHardwareService._d_engageProtectiveStop = ((), (omniORB.tcInternal.tv_ulong, ), None)
RobotHardwareService._d_disengageProtectiveStop = ((), (omniORB.tcInternal.tv_ulong, ), None)
RobotHardwareService._d_getJointPartNames = ((), (omniORB.tcInternal.tv_ulong, omniORB.typeMapping["IDL:RobotHardwareService/StrSequence:1.0"]), None)
RobotHardwareService._d_getJointNamesInPart = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_ulong, omniORB.typeMapping["IDL:RobotHardwareService/StrSequence:1.0"]), None)

# RobotHardwareService object reference
class _objref_RobotHardwareService (CORBA.Object):
    _NP_RepositoryId = RobotHardwareService._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def getStatus(self, *args):
        return _omnipy.invoke(self, "getStatus", _0__GlobalIDL.RobotHardwareService._d_getStatus, args)

    def power(self, *args):
        return _omnipy.invoke(self, "power", _0__GlobalIDL.RobotHardwareService._d_power, args)

    def servo(self, *args):
        return _omnipy.invoke(self, "servo", _0__GlobalIDL.RobotHardwareService._d_servo, args)

    def calibrateJoint(self, *args):
        return _omnipy.invoke(self, "calibrateJoint", _0__GlobalIDL.RobotHardwareService._d_calibrateJoint, args)

    def calibrateSensor(self, *args):
        return _omnipy.invoke(self, "calibrateSensor", _0__GlobalIDL.RobotHardwareService._d_calibrateSensor, args)

    def engageProtectiveStop(self, *args):
        return _omnipy.invoke(self, "engageProtectiveStop", _0__GlobalIDL.RobotHardwareService._d_engageProtectiveStop, args)

    def disengageProtectiveStop(self, *args):
        return _omnipy.invoke(self, "disengageProtectiveStop", _0__GlobalIDL.RobotHardwareService._d_disengageProtectiveStop, args)

    def getJointPartNames(self, *args):
        return _omnipy.invoke(self, "getJointPartNames", _0__GlobalIDL.RobotHardwareService._d_getJointPartNames, args)

    def getJointNamesInPart(self, *args):
        return _omnipy.invoke(self, "getJointNamesInPart", _0__GlobalIDL.RobotHardwareService._d_getJointNamesInPart, args)

    __methods__ = ["getStatus", "power", "servo", "calibrateJoint", "calibrateSensor", "engageProtectiveStop", "disengageProtectiveStop", "getJointPartNames", "getJointNamesInPart"] + CORBA.Object.__methods__

omniORB.registerObjref(RobotHardwareService._NP_RepositoryId, _objref_RobotHardwareService)
_0__GlobalIDL._objref_RobotHardwareService = _objref_RobotHardwareService
del RobotHardwareService, _objref_RobotHardwareService

# RobotHardwareService skeleton
__name__ = "_GlobalIDL__POA"
class RobotHardwareService (PortableServer.Servant):
    _NP_RepositoryId = _0__GlobalIDL.RobotHardwareService._NP_RepositoryId


    _omni_op_d = {"getStatus": _0__GlobalIDL.RobotHardwareService._d_getStatus, "power": _0__GlobalIDL.RobotHardwareService._d_power, "servo": _0__GlobalIDL.RobotHardwareService._d_servo, "calibrateJoint": _0__GlobalIDL.RobotHardwareService._d_calibrateJoint, "calibrateSensor": _0__GlobalIDL.RobotHardwareService._d_calibrateSensor, "engageProtectiveStop": _0__GlobalIDL.RobotHardwareService._d_engageProtectiveStop, "disengageProtectiveStop": _0__GlobalIDL.RobotHardwareService._d_disengageProtectiveStop, "getJointPartNames": _0__GlobalIDL.RobotHardwareService._d_getJointPartNames, "getJointNamesInPart": _0__GlobalIDL.RobotHardwareService._d_getJointNamesInPart}

RobotHardwareService._omni_skeleton = RobotHardwareService
_0__GlobalIDL__POA.RobotHardwareService = RobotHardwareService
omniORB.registerSkeleton(RobotHardwareService._NP_RepositoryId, RobotHardwareService)
del RobotHardwareService
__name__ = "_GlobalIDL"

#
# End of module "_GlobalIDL"
#
__name__ = "RobotHardwareService_idl"

_exported_modules = ( "_GlobalIDL", )

# The end.
