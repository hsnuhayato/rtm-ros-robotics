# Python stubs generated by omniidl from SequencePlayerService.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)


#
# Start of module "_GlobalIDL"
#
__name__ = "_GlobalIDL"
_0__GlobalIDL = omniORB.openModule("_GlobalIDL", r"SequencePlayerService.idl")
_0__GlobalIDL__POA = omniORB.openModule("_GlobalIDL__POA", r"SequencePlayerService.idl")


# typedef ... dSequence
class dSequence:
    _NP_RepositoryId = "IDL:dSequence:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0__GlobalIDL.dSequence = dSequence
_0__GlobalIDL._d_dSequence  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 0)
_0__GlobalIDL._ad_dSequence = (omniORB.tcInternal.tv_alias, dSequence._NP_RepositoryId, "dSequence", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 0))
_0__GlobalIDL._tc_dSequence = omniORB.tcInternal.createTypeCode(_0__GlobalIDL._ad_dSequence)
omniORB.registerType(dSequence._NP_RepositoryId, _0__GlobalIDL._ad_dSequence, _0__GlobalIDL._tc_dSequence)
del dSequence

# interface SequencePlayerService
_0__GlobalIDL._d_SequencePlayerService = (omniORB.tcInternal.tv_objref, "IDL:SequencePlayerService:1.0", "SequencePlayerService")
omniORB.typeMapping["IDL:SequencePlayerService:1.0"] = _0__GlobalIDL._d_SequencePlayerService
_0__GlobalIDL.SequencePlayerService = omniORB.newEmptyClass()
class SequencePlayerService :
    _NP_RepositoryId = _0__GlobalIDL._d_SequencePlayerService[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0__GlobalIDL.SequencePlayerService = SequencePlayerService
_0__GlobalIDL._tc_SequencePlayerService = omniORB.tcInternal.createTypeCode(_0__GlobalIDL._d_SequencePlayerService)
omniORB.registerType(SequencePlayerService._NP_RepositoryId, _0__GlobalIDL._d_SequencePlayerService, _0__GlobalIDL._tc_SequencePlayerService)

# SequencePlayerService operations and attributes
SequencePlayerService._d_waitInterpolation = ((), (), None)
SequencePlayerService._d_setJointAngles = ((omniORB.typeMapping["IDL:dSequence:1.0"], omniORB.tcInternal.tv_double), (omniORB.tcInternal.tv_boolean, ), None)
SequencePlayerService._d_setJointAngle = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_double, omniORB.tcInternal.tv_double), (omniORB.tcInternal.tv_boolean, ), None)
SequencePlayerService._d_setBasePos = ((omniORB.typeMapping["IDL:dSequence:1.0"], omniORB.tcInternal.tv_double), (omniORB.tcInternal.tv_boolean, ), None)
SequencePlayerService._d_setBaseRpy = ((omniORB.typeMapping["IDL:dSequence:1.0"], omniORB.tcInternal.tv_double), (omniORB.tcInternal.tv_boolean, ), None)
SequencePlayerService._d_setZmp = ((omniORB.typeMapping["IDL:dSequence:1.0"], omniORB.tcInternal.tv_double), (omniORB.tcInternal.tv_boolean, ), None)
SequencePlayerService._d_isEmpty = ((), (omniORB.tcInternal.tv_boolean, ), None)
SequencePlayerService._d_loadPattern = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_double), (), None)
SequencePlayerService._d_clear = ((), (), None)
SequencePlayerService._d_clearNoWait = ((), (), None)

# SequencePlayerService object reference
class _objref_SequencePlayerService (CORBA.Object):
    _NP_RepositoryId = SequencePlayerService._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def waitInterpolation(self, *args):
        return _omnipy.invoke(self, "waitInterpolation", _0__GlobalIDL.SequencePlayerService._d_waitInterpolation, args)

    def setJointAngles(self, *args):
        return _omnipy.invoke(self, "setJointAngles", _0__GlobalIDL.SequencePlayerService._d_setJointAngles, args)

    def setJointAngle(self, *args):
        return _omnipy.invoke(self, "setJointAngle", _0__GlobalIDL.SequencePlayerService._d_setJointAngle, args)

    def setBasePos(self, *args):
        return _omnipy.invoke(self, "setBasePos", _0__GlobalIDL.SequencePlayerService._d_setBasePos, args)

    def setBaseRpy(self, *args):
        return _omnipy.invoke(self, "setBaseRpy", _0__GlobalIDL.SequencePlayerService._d_setBaseRpy, args)

    def setZmp(self, *args):
        return _omnipy.invoke(self, "setZmp", _0__GlobalIDL.SequencePlayerService._d_setZmp, args)

    def isEmpty(self, *args):
        return _omnipy.invoke(self, "isEmpty", _0__GlobalIDL.SequencePlayerService._d_isEmpty, args)

    def loadPattern(self, *args):
        return _omnipy.invoke(self, "loadPattern", _0__GlobalIDL.SequencePlayerService._d_loadPattern, args)

    def clear(self, *args):
        return _omnipy.invoke(self, "clear", _0__GlobalIDL.SequencePlayerService._d_clear, args)

    def clearNoWait(self, *args):
        return _omnipy.invoke(self, "clearNoWait", _0__GlobalIDL.SequencePlayerService._d_clearNoWait, args)

    __methods__ = ["waitInterpolation", "setJointAngles", "setJointAngle", "setBasePos", "setBaseRpy", "setZmp", "isEmpty", "loadPattern", "clear", "clearNoWait"] + CORBA.Object.__methods__

omniORB.registerObjref(SequencePlayerService._NP_RepositoryId, _objref_SequencePlayerService)
_0__GlobalIDL._objref_SequencePlayerService = _objref_SequencePlayerService
del SequencePlayerService, _objref_SequencePlayerService

# SequencePlayerService skeleton
__name__ = "_GlobalIDL__POA"
class SequencePlayerService (PortableServer.Servant):
    _NP_RepositoryId = _0__GlobalIDL.SequencePlayerService._NP_RepositoryId


    _omni_op_d = {"waitInterpolation": _0__GlobalIDL.SequencePlayerService._d_waitInterpolation, "setJointAngles": _0__GlobalIDL.SequencePlayerService._d_setJointAngles, "setJointAngle": _0__GlobalIDL.SequencePlayerService._d_setJointAngle, "setBasePos": _0__GlobalIDL.SequencePlayerService._d_setBasePos, "setBaseRpy": _0__GlobalIDL.SequencePlayerService._d_setBaseRpy, "setZmp": _0__GlobalIDL.SequencePlayerService._d_setZmp, "isEmpty": _0__GlobalIDL.SequencePlayerService._d_isEmpty, "loadPattern": _0__GlobalIDL.SequencePlayerService._d_loadPattern, "clear": _0__GlobalIDL.SequencePlayerService._d_clear, "clearNoWait": _0__GlobalIDL.SequencePlayerService._d_clearNoWait}

SequencePlayerService._omni_skeleton = SequencePlayerService
_0__GlobalIDL__POA.SequencePlayerService = SequencePlayerService
omniORB.registerSkeleton(SequencePlayerService._NP_RepositoryId, SequencePlayerService)
del SequencePlayerService
__name__ = "_GlobalIDL"

#
# End of module "_GlobalIDL"
#
__name__ = "SequencePlayerService_idl"

_exported_modules = ( "_GlobalIDL", )

# The end.
