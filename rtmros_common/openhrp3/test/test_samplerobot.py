#!/usr/bin/env python

from  test_modelloader import testModelLoader
import rospkg, math

class TestSampleRobot(testModelLoader):

    def setUp(self):
        self.loadModel(rospkg.RosPack().get_path("openhrp3")+"/share/OpenHRP-3.1/sample/model/sample1.wrl")

    def test_av0(self):
        self.check_link("WAIST_P", [0.0, 0.0, 0.8995], [1.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0, 0.0, 1.0])
        self.check_link("WAIST_R", [0.0, 0.0, 0.8995], [1.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0, 0.0, 1.0])
        self.check_link("CHEST", [0.0, 0.0, 1.2495], [1.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0, 0.0, 1.0])
        self.check_link("LARM_SHOULDER_P", [0.0, 0.21, 1.2495], [1.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0, 0.0, 1.0])
        self.check_link("LARM_SHOULDER_R", [0.0, 0.21, 1.2495], [1.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0, 0.0, 1.0])
        self.check_link("LARM_SHOULDER_Y", [0.0, 0.21, 0.9865], [1.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0, 0.0, 1.0])
        self.check_link("LARM_ELBOW", [0.0, 0.21, 0.9865], [1.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0, 0.0, 1.0])
        self.check_link("LARM_WRIST_Y", [0.0, 0.21, 0.7395], [1.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0, 0.0, 1.0])
        self.check_link("LARM_WRIST_P", [0.0, 0.21, 0.7395], [1.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0, 0.0, 1.0])
        self.check_link("LARM_WRIST_R", [0.0, 0.21, 0.7395], [1.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0, 0.0, 1.0])
        self.check_link("RARM_SHOULDER_P", [0.0, -0.21, 1.2495], [1.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0, 0.0, 1.0])
        self.check_link("RARM_SHOULDER_R", [0.0, -0.21, 1.2495], [1.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0, 0.0, 1.0])
        self.check_link("RARM_SHOULDER_Y", [0.0, -0.21, 0.9865], [1.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0, 0.0, 1.0])
        self.check_link("RARM_ELBOW", [0.0, -0.21, 0.9865], [1.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0, 0.0, 1.0])
        self.check_link("RARM_WRIST_Y", [0.0, -0.21, 0.7395], [1.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0, 0.0, 1.0])
        self.check_link("RARM_WRIST_P", [0.0, -0.21, 0.7395], [1.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0, 0.0, 1.0])
        self.check_link("RARM_WRIST_R", [0.0, -0.21, 0.7395], [1.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0, 0.0, 1.0])
        self.check_link("LLEG_HIP_R", [0.0, 0.09, 0.7235], [1.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0, 0.0, 1.0])
        self.check_link("LLEG_HIP_P", [0.0, 0.09, 0.7235], [1.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0, 0.0, 1.0])
        self.check_link("LLEG_HIP_Y", [0.0, 0.09, 0.37], [1.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0, 0.0, 1.0])
        self.check_link("LLEG_KNEE", [0.0, 0.09, 0.37], [1.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0, 0.0, 1.0])
        self.check_link("LLEG_ANKLE_P", [0.0, 0.09, 0.07], [1.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0, 0.0, 1.0])
        self.check_link("LLEG_ANKLE_R", [0.0, 0.09, 0.07], [1.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0, 0.0, 1.0])
        self.check_link("RLEG_HIP_R", [0.0, -0.09, 0.7235], [1.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0, 0.0, 1.0])
        self.check_link("RLEG_HIP_P", [0.0, -0.09, 0.7235], [1.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0, 0.0, 1.0])
        self.check_link("RLEG_HIP_Y", [0.0, -0.09, 0.37], [1.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0, 0.0, 1.0])
        self.check_link("RLEG_KNEE", [0.0, -0.09, 0.37], [1.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0, 0.0, 1.0])
        self.check_link("RLEG_ANKLE_P", [0.0, -0.09, 0.07], [1.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0, 0.0, 1.0])
        self.check_link("RLEG_ANKLE_R", [0.0, -0.09, 0.07], [1.0, 0.0, 0.0,  0.0, 1.0, 0.0, 0.0, 0.0, 1.0])

    def test_av30(self):
        self.angle_vector([math.pi * 30 / 180.0 for i in range(29)])
        self.check_link("WAIST_P", [0.0, 0.0, 0.8995], [0.866025, 0.0, 0.5,  0.0, 1.0, 0.0, -0.5, 0.0, 0.866025])
        self.check_link("WAIST_R", [0.0, 0.0, 0.8995], [0.866025, 0.25, 0.433013,  1.387779e-17, 0.866025, -0.5, -0.5, 0.433013, 0.75])
        self.check_link("CHEST", [0.151554, -0.175, 1.162], [0.875, -0.216506, 0.433013,  0.433013, 0.75, -0.5, -0.216506, 0.625, 0.75])
        self.check_link("LARM_SHOULDER_P", [0.106088, -0.0175, 1.29325], [0.541266, -0.216506, 0.8125,  0.625, 0.75, -0.216506, -0.5625, 0.625, 0.541266])
        self.check_link("LARM_SHOULDER_R", [0.106088, -0.0175, 1.29325], [0.541266, 0.21875, 0.811899,  0.625, 0.541266, -0.5625, -0.5625, 0.811899, 0.15625])
        self.check_link("LARM_SHOULDER_Y", [-0.107441, 0.130438, 1.25216], [0.578125, -0.08119, 0.811899,  0.811899, 0.15625, -0.5625, -0.08119, 0.984375, 0.15625])
        self.check_link("LARM_ELBOW", [-0.107441, 0.130438, 1.25216], [0.094722, -0.08119, 0.992188,  0.984375, 0.15625, -0.08119, -0.148438, 0.984375, 0.094722])
        self.check_link("LARM_WRIST_Y", [-0.352512, 0.150491, 1.22876], [0.041436, -0.117673, 0.992188,  0.930619, -0.356871, -0.08119, 0.363637, 0.926713, 0.094722])
        self.check_link("LARM_WRIST_P", [-0.352512, 0.150491, 1.22876], [-0.460209, -0.117673, 0.879978,  0.846534, -0.356871, 0.394997, 0.267558, 0.926713, 0.26385])
        self.check_link("LARM_WRIST_R", [-0.352512, 0.150491, 1.22876], [-0.460209, 0.338081, 0.82092,  0.846534, -0.111561, 0.520513, 0.267558, 0.934481, -0.234856])
        self.check_link("RARM_SHOULDER_P", [0.197021, -0.3325, 1.03075], [0.541266, -0.216506, 0.8125,  0.625, 0.75, -0.216506, -0.5625, 0.625, 0.541266])
        self.check_link("RARM_SHOULDER_R", [0.197021, -0.3325, 1.03075], [0.541266, 0.21875, 0.811899,  0.625, 0.541266, -0.5625, -0.5625, 0.811899, 0.15625])
        self.check_link("RARM_SHOULDER_Y", [-0.016509, -0.184562, 0.989656], [0.578125, -0.08119, 0.811899,  0.811899, 0.15625, -0.5625, -0.08119, 0.984375, 0.15625])
        self.check_link("RARM_ELBOW", [-0.016509, -0.184562, 0.989656], [0.094722, -0.08119, 0.992188,  0.984375, 0.15625, -0.08119, -0.148438, 0.984375, 0.094722])
        self.check_link("RARM_WRIST_Y", [-0.261579, -0.164509, 0.96626], [0.041436, -0.117673, 0.992188,  0.930619, -0.356871, -0.08119, 0.363637, 0.926713, 0.094722])
        self.check_link("RARM_WRIST_P", [-0.261579, -0.164509, 0.96626], [-0.460209, -0.117673, 0.879978,  0.846534, -0.356871, 0.394997, 0.267558, 0.926713, 0.26385])
        self.check_link("RARM_WRIST_R", [-0.261579, -0.164509, 0.96626], [-0.460209, 0.338081, 0.82092,  0.846534, -0.111561, 0.520513, 0.267558, 0.934481, -0.234856])
        self.check_link("LLEG_HIP_R", [0.0, 0.09, 0.7235], [1.0, 0.0, 0.0,  0.0, 0.866025, -0.5, 0.0, 0.5, 0.866025])
        self.check_link("LLEG_HIP_P", [0.0, 0.09, 0.7235], [0.866025, 1.387779e-17, 0.5,  0.25, 0.866025, -0.433013, -0.433013, 0.5, 0.75])
        self.check_link("LLEG_HIP_Y", [-0.17675, 0.24307, 0.458375], [0.75, -0.433013, 0.5,  0.649519, 0.625, -0.433013, -0.125, 0.649519, 0.75])
        self.check_link("LLEG_KNEE", [-0.17675, 0.24307, 0.458375], [0.399519, -0.433013, 0.808013,  0.779006, 0.625, -0.05024, -0.483253, 0.649519, 0.587019])
        self.check_link("LLEG_ANKLE_P", [-0.419154, 0.258142, 0.282269], [-0.058013, -0.433013, 0.899519,  0.69976, 0.625, 0.345994, -0.712019, 0.649519, 0.266747])
        self.check_link("LLEG_ANKLE_R", [-0.419154, 0.258142, 0.282269], [-0.058013, 0.07476, 0.995513,  0.69976, 0.714263, -0.012861, -0.712019, 0.695873, -0.09375])
        self.check_link("RLEG_HIP_R", [0.0, -0.09, 0.7235], [1.0, 0.0, 0.0,  0.0, 0.866025, -0.5, 0.0, 0.5, 0.866025])
        self.check_link("RLEG_HIP_P", [0.0, -0.09, 0.7235], [0.866025, 1.387779e-17, 0.5,  0.25, 0.866025, -0.433013, -0.433013, 0.5, 0.75])
        self.check_link("RLEG_HIP_Y", [-0.17675, 0.06307, 0.458375], [0.75, -0.433013, 0.5,  0.649519, 0.625, -0.433013, -0.125, 0.649519, 0.75])
        self.check_link("RLEG_KNEE", [-0.17675, 0.06307, 0.458375], [0.399519, -0.433013, 0.808013,  0.779006, 0.625, -0.05024, -0.483253, 0.649519, 0.587019])
        self.check_link("RLEG_ANKLE_P", [-0.419154, 0.078142, 0.282269], [-0.058013, -0.433013, 0.899519,  0.69976, 0.625, 0.345994, -0.712019, 0.649519, 0.266747])
        self.check_link("RLEG_ANKLE_R", [-0.419154, 0.078142, 0.282269], [-0.058013, 0.07476, 0.995513,  0.69976, 0.714263, -0.012861, -0.712019, 0.695873, -0.09375])



if __name__ == '__main__':
    import rostest
    rostest.rosrun("openhrp3", 'test_sample', TestSampleRobot)
