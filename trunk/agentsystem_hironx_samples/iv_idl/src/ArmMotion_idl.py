# Python stubs generated by omniidl from ArmMotion.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)


#
# Start of module "_GlobalIDL"
#
__name__ = "_GlobalIDL"
_0__GlobalIDL = omniORB.openModule("_GlobalIDL", r"ArmMotion.idl")
_0__GlobalIDL__POA = omniORB.openModule("_GlobalIDL__POA", r"ArmMotion.idl")

# #include "BasicDataType.idl"
import BasicDataType_idl
_0_RTC = omniORB.openModule("RTC")
_0_RTC__POA = omniORB.openModule("RTC__POA")
# #include "ExtendedDataTypes.idl"
import ExtendedDataTypes_idl
_0_RTC = omniORB.openModule("RTC")
_0_RTC__POA = omniORB.openModule("RTC__POA")

# interface ArmMotionService
_0__GlobalIDL._d_ArmMotionService = (omniORB.tcInternal.tv_objref, "IDL:ArmMotionService:1.0", "ArmMotionService")
omniORB.typeMapping["IDL:ArmMotionService:1.0"] = _0__GlobalIDL._d_ArmMotionService
_0__GlobalIDL.ArmMotionService = omniORB.newEmptyClass()
class ArmMotionService :
    _NP_RepositoryId = _0__GlobalIDL._d_ArmMotionService[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil

    
    # typedef ... DblSequence
    class DblSequence:
        _NP_RepositoryId = "IDL:ArmMotionService/DblSequence:1.0"
        def __init__(self, *args, **kw):
            raise RuntimeError("Cannot construct objects of this type.")
    _d_DblSequence  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 0)
    _ad_DblSequence = (omniORB.tcInternal.tv_alias, DblSequence._NP_RepositoryId, "DblSequence", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_double, 0))
    _tc_DblSequence = omniORB.tcInternal.createTypeCode(_ad_DblSequence)
    omniORB.registerType(DblSequence._NP_RepositoryId, _ad_DblSequence, _tc_DblSequence)


_0__GlobalIDL.ArmMotionService = ArmMotionService
_0__GlobalIDL._tc_ArmMotionService = omniORB.tcInternal.createTypeCode(_0__GlobalIDL._d_ArmMotionService)
omniORB.registerType(ArmMotionService._NP_RepositoryId, _0__GlobalIDL._d_ArmMotionService, _0__GlobalIDL._tc_ArmMotionService)

# ArmMotionService operations and attributes
ArmMotionService._d_MoveArm = ((omniORB.typeMapping["IDL:RTC/Pose3D:1.0"], omniORB.tcInternal.tv_double, (omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_boolean), (omniORB.tcInternal.tv_boolean, ), None)

# ArmMotionService object reference
class _objref_ArmMotionService (CORBA.Object):
    _NP_RepositoryId = ArmMotionService._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def MoveArm(self, *args):
        return _omnipy.invoke(self, "MoveArm", _0__GlobalIDL.ArmMotionService._d_MoveArm, args)

    __methods__ = ["MoveArm"] + CORBA.Object.__methods__

omniORB.registerObjref(ArmMotionService._NP_RepositoryId, _objref_ArmMotionService)
_0__GlobalIDL._objref_ArmMotionService = _objref_ArmMotionService
del ArmMotionService, _objref_ArmMotionService

# ArmMotionService skeleton
__name__ = "_GlobalIDL__POA"
class ArmMotionService (PortableServer.Servant):
    _NP_RepositoryId = _0__GlobalIDL.ArmMotionService._NP_RepositoryId


    _omni_op_d = {"MoveArm": _0__GlobalIDL.ArmMotionService._d_MoveArm}

ArmMotionService._omni_skeleton = ArmMotionService
_0__GlobalIDL__POA.ArmMotionService = ArmMotionService
omniORB.registerSkeleton(ArmMotionService._NP_RepositoryId, ArmMotionService)
del ArmMotionService
__name__ = "_GlobalIDL"

#
# End of module "_GlobalIDL"
#
__name__ = "ArmMotion_idl"

_exported_modules = ( "_GlobalIDL", )

# The end.
