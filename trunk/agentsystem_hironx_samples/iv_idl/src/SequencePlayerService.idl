  typedef sequence<double> dSequence;
  
  interface SequencePlayerService
  {
    
    /**
     * @brief Wait until the last goal posture is sent to the robot
     */
    void waitInterpolation();
    
    /**
     * @brief Interpolate all joint angles on robot using duration specified by "tm". Returns without waiting for whole sequence to be sent to robot.
     * @param jvs sequence of joint angles
     * @param tm duration
     * @return true joint angles are set successfully, false otherwise
     */
    boolean setJointAngles(in dSequence jvs, in double tm);
    
    /**
     * @brief Interpolate just one joint angle specified by "jname" using duration "tm". Function returns without waiting for interpolation to finish
     * @param jname joint name
     * @param jv joint angle
     * @param tm duration
     */
    boolean setJointAngle(in string jname, in double jv, in double tm);

    boolean setBasePos(in dSequence pos, in double tm);
    
    boolean setBaseRpy(in dSequence rpy, in double tm);
    
    boolean setZmp(in dSequence zmp, in double tm);
    
    /**
     * @brief Utility functions to check whether intepolation is going on. Functions return immediately
     * @return true if interpolation queue is empty, false otherwise
     */
    boolean isEmpty();

    /**
     * @brief load pattern files and start to playback.
     * @param basename basename of the pattern files. \<basename\>.pos, \<basename\>.zmp, \<basename\>.waist and \<basename\>.gsens are used. 
     * @param tm Duration to the initial posture in \<basename\>.pos
     */
    void loadPattern(in string basename, in double tm);

    /**
     * @brief clear pattern data in playback queue. This function returns after the queue becomes empty.
     */
    void clear();

    /**
     * @brief clear pattern data in playback queue. This function returns immediately
     */
    void clearNoWait();
  };
