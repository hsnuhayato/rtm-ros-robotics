/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 30 generated on 2011-02-13 11:18:41.295165
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef BOOST_ASSERT
#define IKFAST_ASSERT BOOST_ASSERT
#else

#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 0; }
IKFAST_API int* getFreeParameters() { return NULL; }
IKFAST_API int getNumJoints() { return 6; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 1610612737; }

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81,x82,x83,x84,x85,x86;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[0]);
x7=IKsin(j[3]);
x8=((x0)*(x1)*(x3));
x9=((x0)*(x2)*(x4));
x10=((x8)+(((-1.00000000000000)*(x9))));
x11=IKcos(j[4]);
x12=((x0)*(x1)*(x2));
x13=((x0)*(x3)*(x4));
x14=((x13)+(x12));
x15=((-1.00000000000000)*(x14));
x16=IKsin(j[4]);
x17=((x10)*(x5));
x18=((x6)*(x7));
x19=((((-1.00000000000000)*(x18)))+(x17));
x20=IKcos(j[5]);
x21=((x11)*(x15));
x22=((x16)*(x19));
x23=((((-1.00000000000000)*(x22)))+(x21));
x24=IKsin(j[5]);
x25=((-1.00000000000000)*(x5)*(x6));
x26=((-1.00000000000000)*(x10)*(x7));
x27=((x25)+(x26));
x28=499999724.506174;
x29=((x1)*(x3)*(x6));
x30=((x2)*(x4)*(x6));
x31=((((-1.00000000000000)*(x30)))+(x29));
x32=((x0)*(x7));
x33=((x31)*(x5));
x34=((x33)+(x32));
x35=((x1)*(x2)*(x6));
x36=((x3)*(x4)*(x6));
x37=((x36)+(x35));
x38=((-1.00000000000000)*(x37));
x39=((x1)*(x2));
x40=((x3)*(x4));
x41=((x39)+(x40));
x42=((-1.00000000000000)*(x41));
x43=((x2)*(x4));
x44=((x1)*(x3));
x45=((((-1.00000000000000)*(x44)))+(x43));
x46=((x11)*(x45));
x47=((x11)*(x38));
x48=((x0)*(x5));
x49=((x16)*(x45));
x50=((x11)*(x42)*(x5));
x51=((x49)+(x50));
x52=((x11)*(x34));
x53=((x16)*(x38));
x54=((x53)+(x52));
x55=((x20)*(x42)*(x7));
x56=((x16)*(x42)*(x5));
x57=((x46)+(((-1.00000000000000)*(x56))));
x58=((x24)*(x57));
x59=((x58)+(x55));
x60=((-1.00000000000000)*(x59));
x61=((x31)*(x7));
x62=((x48)+(((-1.00000000000000)*(x61))));
x63=((x20)*(x62));
x64=((-1.00000000000000)*(x16)*(x34));
x65=((x47)+(x64));
x66=((x24)*(x65));
x67=((x63)+(((-1.00000000000000)*(x66))));
x68=((-1.00000000000000)*(x56));
x69=((x46)+(x68));
x70=((x20)*(x69));
x71=((x24)*(x42)*(x7));
x72=((((-1.00000000000000)*(x71)))+(x70));
x73=((x16)*(x34));
x74=((((-1.00000000000000)*(x73)))+(x47));
x75=((x20)*(x74));
x76=((-1.00000000000000)*(x61));
x77=((x76)+(x48));
x78=((x24)*(x77));
x79=((x75)+(x78));
x80=((0.0200000000000000)*(x40));
x81=((0.220000000000000)*(x43));
x82=((0.0900000000000000)*(x46));
x83=((0.0200000000000000)*(x39));
x84=((0.0200000000000000)*(x30));
x85=((0.0200000000000000)*(x1)*(x6));
x86=((0.0900000000000000)*(x47));
eerot[0]=((((x11)*(x19)))+(((x15)*(x16))));
eerot[1]=((((-1.00000000000000)*(x23)*(x24)))+(((x20)*(x27))));
eerot[2]=((((-1.00000000000000)*(x20)*(x23)))+(((-1.00000000000000)*(x24)*(x27))));
eetrans[0]=((((0.0200000000000000)*(x0)*(x1)))+(((0.0850000000000000)*(x6)))+(((-0.220000000000000)*(x12)))+(((-0.220000000000000)*(x13)))+(((0.0900000000000000)*(x21)))+(((-0.0900000000000000)*(x22)))+(((-0.0200000000000000)*(x8)))+(((-0.0335000000000000)*(x11)*(x19)))+(((0.0200000000000000)*(x9)))+(((-0.250000000000000)*(x0)*(x4)))+(((-0.0335000000000000)*(x15)*(x16))));
eerot[3]=((((-5.17640570426968e-10)*(x28)*(x51)))+(((1.93185212885275e-9)*(x28)*(x54))));
eerot[4]=((((-5.17640570426968e-10)*(x28)*(x60)))+(((1.93185212885275e-9)*(x28)*(x67))));
eerot[5]=((((5.17640570426968e-10)*(x28)*(x72)))+(((-1.93185212885275e-9)*(x28)*(x79))));
eetrans[1]=((-0.145000000000000)+(((-6.47170463165671e-11)*(x28)*(x54)))+(((1.93185212885275e-9)*(x28)*(((x86)+(x84)+(x85)+(((-0.0850000000000000)*(x0)))+(((-0.250000000000000)*(x4)*(x6)))+(((-0.0900000000000000)*(x73)))+(((-0.220000000000000)*(x35)))+(((-0.220000000000000)*(x36)))+(((-0.0200000000000000)*(x29)))))))+(((-5.17640570426968e-10)*(x28)*(((((-0.0200000000000000)*(x4)))+(x82)+(x83)+(x80)+(x81)+(((-0.250000000000000)*(x1)))+(((-0.0900000000000000)*(x56)))+(((-0.220000000000000)*(x44)))))))+(((1.73409591093034e-11)*(x28)*(x51))));
eerot[6]=((((5.17640570426968e-10)*(x28)*(x54)))+(((1.93185212885275e-9)*(x28)*(x51))));
eerot[7]=((((5.17640570426968e-10)*(x28)*(x67)))+(((1.93185212885275e-9)*(x28)*(x60))));
eerot[8]=((((-1.93185212885275e-9)*(x28)*(x72)))+(((-5.17640570426968e-10)*(x28)*(x79))));
eetrans[2]=((0.380000000000000)+(((1.93185212885275e-9)*(x28)*(((((-0.0200000000000000)*(x4)))+(x82)+(x83)+(x80)+(x81)+(((-0.250000000000000)*(x1)))+(((-0.0900000000000000)*(x56)))+(((-0.220000000000000)*(x44)))))))+(((5.17640570426968e-10)*(x28)*(((x86)+(x84)+(x85)+(((-0.0850000000000000)*(x0)))+(((-0.250000000000000)*(x4)*(x6)))+(((-0.0900000000000000)*(x73)))+(((-0.220000000000000)*(x35)))+(((-0.220000000000000)*(x36)))+(((-0.0200000000000000)*(x29)))))))+(((-6.47170463165671e-11)*(x28)*(x51)))+(((-1.73409591093034e-11)*(x28)*(x54))));
}

class IKSolver {
public:
IKReal j3, cj3, sj3,
j4, cj4, sj4,
j5, cj5, sj5,
j6, cj6, sj6,
j7, cj7, sj7,
j8, cj8, sj8,
new_r00, r00, rxp0_0,
new_r01, r01, rxp0_1,
new_r02, r02, rxp0_2,
new_r10, r10, rxp1_0,
new_r11, r11, rxp1_1,
new_r12, r12, rxp1_2,
new_r20, r20, rxp2_0,
new_r21, r21, rxp2_1,
new_r22, r22, rxp2_2,
new_px, new_py, new_pz, px, py, pz, npx, npy, npz, pp;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.00000000000000)*(r02));
new_r01=r01;
new_r02=r00;
new_px=((px)+(((0.0335000000000000)*(r00))));
new_r10=((((-0.258820142606703)*(r22)))+(((-0.965925532213041)*(r12))));
new_r11=((((0.258820142606703)*(r21)))+(((0.965925532213041)*(r11))));
new_r12=((((0.258820142606703)*(r20)))+(((0.965925532213041)*(r10))));
new_py=((0.0417075479803439)+(((0.965925532213041)*(py)))+(((0.0323585053291369)*(r10)))+(((0.258820142606703)*(pz)))+(((0.00867047477732454)*(r20))));
new_r20=((((-0.965925532213041)*(r22)))+(((0.258820142606703)*(r12))));
new_r21=((((-0.258820142606703)*(r11)))+(((0.965925532213041)*(r21))));
new_r22=((((-0.258820142606703)*(r10)))+(((0.965925532213041)*(r20))));
new_pz=((-0.404580622918927)+(((-0.00867047477732454)*(r10)))+(((0.965925532213041)*(pz)))+(((-0.258820142606703)*(py)))+(((0.0323585053291369)*(r20))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
IKReal op[72], zeror[48];
int numroots;
IKReal x0=((0.0850000000000000)*(r22));
IKReal x1=((0.0850000000000000)*(r21));
IKReal x2=((0.170000000000000)*(r20));
IKReal x3=((2.00000000000000)*(rxp1_2));
IKReal x4=((-0.0850000000000000)*(r21));
IKReal x5=((x0)+(rxp0_2));
IKReal x6=((0.0400000000000000)*(npz));
IKReal x7=((0.620000000000000)*(npx));
IKReal x8=((0.0400000000000000)*(npy));
IKReal x9=((0.0800000000000000)*(npx));
IKReal x10=((-1.24000000000000)*(npy));
IKReal x11=((0.180000000000000)*(r21));
IKReal x12=((2.00000000000000)*(rxp2_2));
IKReal x13=((0.340000000000000)*(r21));
IKReal x14=((0.360000000000000)*(r20));
IKReal x15=((0.880000000000000)*(npz));
IKReal x16=((x0)+(((-1.00000000000000)*(rxp0_2))));
IKReal x17=((rxp0_2)+(((-1.00000000000000)*(x0))));
IKReal x18=((-2.00000000000000)*(rxp1_2));
IKReal x19=((-1.00000000000000)*(x5));
IKReal x20=((-0.00340000000000000)+(x8));
IKReal x21=((0.260000000000000)*(npx));
IKReal x22=((-0.00340000000000000)+(((-1.00000000000000)*(x8))));
IKReal x23=((0.00680000000000000)+(x20));
IKReal x24=((0.520000000000000)*(npy));
IKReal x25=((0.00340000000000000)+(((-1.00000000000000)*(x8))));
IKReal x26=((x6)+(pp));
op[0]=x19;
op[1]=x1;
op[2]=x3;
op[3]=x2;
op[4]=x17;
op[5]=x4;
op[6]=x1;
op[7]=x16;
op[8]=x2;
op[9]=x3;
op[10]=x4;
op[11]=x5;
op[12]=((-0.0263750000000000)+(((-1.00000000000000)*(x26)))+(x7));
op[13]=x20;
op[14]=x10;
op[15]=x9;
op[16]=((-0.0263750000000000)+(((-1.00000000000000)*(x26)))+(((-1.00000000000000)*(x7))));
op[17]=x22;
op[18]=x23;
op[19]=((-0.0263750000000000)+(x7)+(x6)+(((-1.00000000000000)*(pp))));
op[20]=x9;
op[21]=x10;
op[22]=x25;
op[23]=((-0.0263750000000000)+(x6)+(((-1.00000000000000)*(x7)))+(((-1.00000000000000)*(pp))));
op[24]=((((-1.00000000000000)*(x12)))+(x2)+(x11));
op[25]=0;
op[26]=((((-1.00000000000000)*(x13)))+(x14));
op[27]=0;
op[28]=((((-1.00000000000000)*(x12)))+(((-1.00000000000000)*(x11)))+(((-1.00000000000000)*(x2))));
op[29]=0;
op[30]=0;
op[31]=((((-1.00000000000000)*(x12)))+(x11)+(((-1.00000000000000)*(x2))));
op[32]=0;
op[33]=((x13)+(x14));
op[34]=0;
op[35]=((((-1.00000000000000)*(x12)))+(((-1.00000000000000)*(x11)))+(x2));
op[36]=((-0.00720000000000000)+(x9)+(x15));
op[37]=0;
op[38]=((-0.160000000000000)*(npy));
op[39]=0;
op[40]=((-0.00720000000000000)+(x15)+(((-1.00000000000000)*(x9))));
op[41]=0;
op[42]=0;
op[43]=((0.00720000000000000)+(x15)+(((-1.00000000000000)*(x9))));
op[44]=0;
op[45]=((0.160000000000000)*(npy));
op[46]=0;
op[47]=((0.00720000000000000)+(x9)+(x15));
op[48]=x5;
op[49]=x1;
op[50]=x18;
op[51]=x2;
op[52]=x16;
op[53]=x4;
op[54]=x1;
op[55]=x17;
op[56]=x2;
op[57]=x18;
op[58]=x4;
op[59]=x19;
op[60]=((0.0528250000000000)+(((-1.00000000000000)*(x21)))+(x6)+(((-1.00000000000000)*(pp))));
op[61]=x20;
op[62]=x24;
op[63]=x9;
op[64]=((0.0528250000000000)+(x6)+(x21)+(((-1.00000000000000)*(pp))));
op[65]=x22;
op[66]=x23;
op[67]=((0.0528250000000000)+(((-1.00000000000000)*(x26)))+(((-1.00000000000000)*(x21))));
op[68]=x9;
op[69]=x24;
op[70]=x25;
op[71]=((0.0528250000000000)+(((-1.00000000000000)*(x26)))+(x21));
solvedialyticpoly8qep(op,zeror,numroots);
IKReal j7array[16], cj7array[16], sj7array[16], j8array[16], cj8array[16], sj8array[16], j6array[16], cj6array[16], sj6array[16];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ij7 += 3)
{
IKReal htj7 = zeror[ij7+0], htj8 = zeror[ij7+1], htj6 = zeror[ij7+2];
j7array[numsolutions]=((2.00000000000000)*(atan(htj7)));
j8array[numsolutions]=((2.00000000000000)*(atan(htj8)));
j6array[numsolutions]=((2.00000000000000)*(atan(htj6)));
IKReal x27=(htj7)*(htj7);
IKReal x28=(htj8)*(htj8);
IKReal x29=(htj6)*(htj6);
cj7array[numsolutions]=((((IKabs(((1.00000000000000)+(x27))) != 0)?((IKReal)1/(((1.00000000000000)+(x27)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x27))))));
cj8array[numsolutions]=((((IKabs(((1.00000000000000)+(x28))) != 0)?((IKReal)1/(((1.00000000000000)+(x28)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x28))))));
cj6array[numsolutions]=((((IKabs(((1.00000000000000)+(x29))) != 0)?((IKReal)1/(((1.00000000000000)+(x29)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x29))))));
sj7array[numsolutions]=((2.00000000000000)*(htj7)*(((IKabs(((1.00000000000000)+((htj7)*(htj7)))) != 0)?((IKReal)1/(((1.00000000000000)+((htj7)*(htj7))))):(IKReal)1.0e30)));
sj8array[numsolutions]=((2.00000000000000)*(htj8)*(((IKabs(((1.00000000000000)+((htj8)*(htj8)))) != 0)?((IKReal)1/(((1.00000000000000)+((htj8)*(htj8))))):(IKReal)1.0e30)));
sj6array[numsolutions]=((2.00000000000000)*(htj6)*(((IKabs(((1.00000000000000)+((htj6)*(htj6)))) != 0)?((IKReal)1/(((1.00000000000000)+((htj6)*(htj6))))):(IKReal)1.0e30)));
if( j7array[numsolutions] > IKPI )
    j7array[numsolutions]-=IK2PI;
else if( j7array[numsolutions] < -IKPI )
    j7array[numsolutions]+=IK2PI;
if( j8array[numsolutions] > IKPI )
    j8array[numsolutions]-=IK2PI;
else if( j8array[numsolutions] < -IKPI )
    j8array[numsolutions]+=IK2PI;
if( j6array[numsolutions] > IKPI )
    j6array[numsolutions]-=IK2PI;
else if( j6array[numsolutions] < -IKPI )
    j6array[numsolutions]+=IK2PI;
bool valid = true;
for( int kj7 = 0; kj7 < numsolutions; ++kj7)
{
    if( IKabs(cj7array[kj7]-cj7array[numsolutions]) < 0.00001 && IKabs(sj7array[kj7]-sj7array[numsolutions]) < 0.00001 &&IKabs(cj8array[kj7]-cj8array[numsolutions]) < 0.00001 && IKabs(sj8array[kj7]-sj8array[numsolutions]) < 0.00001 &&IKabs(cj6array[kj7]-cj6array[numsolutions]) < 0.00001 && IKabs(sj6array[kj7]-sj6array[numsolutions]) < 0.00001 && 1 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

    j8 = j8array[ij7]; cj8 = cj8array[ij7]; sj8 = sj8array[ij7];

    j6 = j6array[ij7]; cj6 = cj6array[ij7]; sj6 = sj6array[ij7];

{
IKReal dummyeval[1];
dummyeval[0]=cj6;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
IKReal x30=(sj8)*(sj8);
IKReal x31=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((cj7)*(r00)*(r11)*(x31)))+(((cj7)*(r00)*(r11)*(x30)))+(((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x30)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x31)))+(((cj8)*(r02)*(r11)*(sj7)))+(((r02)*(r10)*(sj7)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
IKReal x32=(sj7)*(sj7);
IKReal x33=(cj7)*(cj7);
dummyeval[0]=((((-1.00000000000000)*(cj8)*(r02)*(r10)*(x32)))+(((-1.00000000000000)*(cj8)*(r02)*(r10)*(x33)))+(((cj8)*(r00)*(r12)*(x32)))+(((cj8)*(r00)*(r12)*(x33)))+(((-1.00000000000000)*(r01)*(r12)*(sj8)*(x32)))+(((-1.00000000000000)*(r01)*(r12)*(sj8)*(x33)))+(((r02)*(r11)*(sj8)*(x32)))+(((r02)*(r11)*(sj8)*(x33))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[3];
evalcond[0]=((-3.14159265358979)+(IKfmod(((-1.57079632679490)+(3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8))));
evalcond[2]=((0.0850000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
j5array[0]=IKatan2(((0.149443561208267)+(((0.317965023847377)*(cj7)*(npy)*(sj8)))+(((0.0286168521462639)*(cj7)))+(((-0.317965023847377)*(npz)*(sj7)))+(((-0.317965023847377)*(cj7)*(cj8)*(npx)))+(((-3.97456279809221)*(cj8)*(npy)))+(((-3.97456279809221)*(npx)*(sj8)))), ((-0.868044515103339)+(((-3.97456279809221)*(cj7)*(npy)*(sj8)))+(((-0.357710651828299)*(cj7)))+(((-0.317965023847377)*(npx)*(sj8)))+(((-0.317965023847377)*(cj8)*(npy)))+(((3.97456279809221)*(npz)*(sj7)))+(((3.97456279809221)*(cj7)*(cj8)*(npx)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
IKReal x34=(sj8)*(sj8);
IKReal x35=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x35)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x34)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8)))+(((r01)*(r10)*(sj7)*(x34)))+(((r01)*(r10)*(sj7)*(x35))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
IKReal x36=(sj7)*(sj7);
IKReal x37=(cj7)*(cj7);
dummyeval[0]=((((-1.00000000000000)*(cj8)*(r02)*(r10)*(x36)))+(((-1.00000000000000)*(cj8)*(r02)*(r10)*(x37)))+(((cj8)*(r00)*(r12)*(x36)))+(((cj8)*(r00)*(r12)*(x37)))+(((-1.00000000000000)*(r01)*(r12)*(sj8)*(x36)))+(((-1.00000000000000)*(r01)*(r12)*(sj8)*(x37)))+(((r02)*(r11)*(sj8)*(x36)))+(((r02)*(r11)*(sj8)*(x37))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x38=(sj7)*(sj7);
IKReal x39=(cj7)*(cj7);
IKReal x40=((cj8)*(r02)*(r10)*(x38));
IKReal x41=((cj8)*(r02)*(r10)*(x39));
IKReal x42=((r01)*(r12)*(sj8)*(x38));
IKReal x43=((r01)*(r12)*(sj8)*(x39));
IKReal x44=((x42)+(x43)+(x40)+(x41));
IKReal x45=((r02)*(r11)*(sj8)*(x38));
IKReal x46=((r02)*(r11)*(sj8)*(x39));
IKReal x47=((cj8)*(r00)*(r12)*(x38));
IKReal x48=((cj8)*(r00)*(r12)*(x39));
IKReal x49=((x48)+(x46)+(x47)+(x45));
j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x44)))+(x49))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x44)))+(x49)))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x49)))+(x44))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x49)))+(x44)))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x50=(cj5)*(cj5);
IKReal x51=(sj5)*(sj5);
IKReal x52=((x51)+(x50));
IKReal x53=((r12)*(sj3)*(sj7));
IKReal x54=((cj3)*(r02)*(sj7));
IKReal x55=((cj7)*(cj8)*(r10)*(sj3));
IKReal x56=((cj3)*(cj7)*(cj8)*(r00));
IKReal x57=((x55)+(x54)+(x56)+(x53));
IKReal x58=((cj3)*(cj7)*(r01)*(sj8));
IKReal x59=((cj7)*(r11)*(sj3)*(sj8));
IKReal x60=((x59)+(x58));
IKReal x61=((x57)+(((-1.00000000000000)*(x60))));
IKReal x62=((cj7)*(r21)*(sj8));
IKReal x63=((cj7)*(cj8)*(r20));
IKReal x64=((r22)*(sj7));
IKReal x65=((x63)+(x64));
IKReal x66=((x62)+(((-1.00000000000000)*(x65))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x52) != 0)?((IKReal)1/(x52)):(IKReal)1.0e30))*(((((cj5)*(x61)))+(((sj5)*(x66)))))), ((((IKabs(x52) != 0)?((IKReal)1/(x52)):(IKReal)1.0e30))*(((((-1.00000000000000)*(sj5)*(x61)))+(((cj5)*(x66)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x67=(cj5)*(cj5);
IKReal x68=(sj5)*(sj5);
IKReal x69=((x67)+(x68));
IKReal x70=((IKabs(x69) != 0)?((IKReal)1/(x69)):(IKReal)1.0e30);
IKReal x71=((cj3)*(cj8)*(r01));
IKReal x72=((cj8)*(r11)*(sj3));
IKReal x73=((cj3)*(r00)*(sj8));
IKReal x74=((r10)*(sj3)*(sj8));
IKReal x75=((x74)+(x73)+(x72)+(x71));
IKReal x76=((-1.00000000000000)*(x75));
IKReal x77=((cj8)*(r21));
IKReal x78=((r20)*(sj8));
IKReal x79=((x77)+(x78));
j4array[0]=IKatan2(((x70)*(((((cj5)*(x79)))+(((-1.00000000000000)*(sj5)*(x76)))))), ((x70)*(((((cj5)*(x76)))+(((sj5)*(x79)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x80=(cj5)*(cj5);
IKReal x81=(sj5)*(sj5);
IKReal x82=((x80)+(x81));
IKReal x83=((IKabs(x82) != 0)?((IKReal)1/(x82)):(IKReal)1.0e30);
IKReal x84=((cj7)*(r21)*(sj8));
IKReal x85=((cj7)*(cj8)*(r20));
IKReal x86=((r22)*(sj7));
IKReal x87=((x86)+(x85));
IKReal x88=((x84)+(((-1.00000000000000)*(x87))));
IKReal x89=((cj8)*(r21));
IKReal x90=((r20)*(sj8));
IKReal x91=((x89)+(x90));
j4array[0]=IKatan2(((x83)*(((((cj5)*(x91)))+(((-1.00000000000000)*(sj5)*(x88)))))), ((x83)*(((((cj5)*(x88)))+(((sj5)*(x91)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x92=(sj8)*(sj8);
IKReal x93=(cj8)*(cj8);
IKReal x94=((cj7)*(cj8)*(r01)*(r12));
IKReal x95=((cj7)*(r00)*(r12)*(sj8));
IKReal x96=((r00)*(r11)*(sj7)*(x92));
IKReal x97=((r00)*(r11)*(sj7)*(x93));
IKReal x98=((x95)+(x94)+(x97)+(x96));
IKReal x99=((cj7)*(cj8)*(r02)*(r11));
IKReal x100=((r01)*(r10)*(sj7)*(x93));
IKReal x101=((cj7)*(r02)*(r10)*(sj8));
IKReal x102=((r01)*(r10)*(sj7)*(x92));
IKReal x103=((x100)+(x101)+(x102)+(x99));
j3array[0]=IKatan2(((((IKabs(((x103)+(((-1.00000000000000)*(x98))))) != 0)?((IKReal)1/(((x103)+(((-1.00000000000000)*(x98)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x103)))+(x98))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x103)))+(x98)))):(IKReal)1.0e30))*(((((r00)*(sj8)))+(((cj8)*(r01)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x104=(cj5)*(cj5);
IKReal x105=(sj5)*(sj5);
IKReal x106=((x104)+(x105));
IKReal x107=((r12)*(sj3)*(sj7));
IKReal x108=((cj3)*(r02)*(sj7));
IKReal x109=((cj7)*(cj8)*(r10)*(sj3));
IKReal x110=((cj3)*(cj7)*(cj8)*(r00));
IKReal x111=((x110)+(x108)+(x109)+(x107));
IKReal x112=((cj3)*(cj7)*(r01)*(sj8));
IKReal x113=((cj7)*(r11)*(sj3)*(sj8));
IKReal x114=((x113)+(x112));
IKReal x115=((((-1.00000000000000)*(x114)))+(x111));
IKReal x116=((cj7)*(r21)*(sj8));
IKReal x117=((cj7)*(cj8)*(r20));
IKReal x118=((r22)*(sj7));
IKReal x119=((x117)+(x118));
IKReal x120=((((-1.00000000000000)*(x119)))+(x116));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x106) != 0)?((IKReal)1/(x106)):(IKReal)1.0e30))*(((((sj5)*(x120)))+(((cj5)*(x115)))))), ((((IKabs(x106) != 0)?((IKReal)1/(x106)):(IKReal)1.0e30))*(((((-1.00000000000000)*(sj5)*(x115)))+(((cj5)*(x120)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x121=(cj5)*(cj5);
IKReal x122=(sj5)*(sj5);
IKReal x123=((x122)+(x121));
IKReal x124=((IKabs(x123) != 0)?((IKReal)1/(x123)):(IKReal)1.0e30);
IKReal x125=((cj3)*(cj8)*(r01));
IKReal x126=((cj8)*(r11)*(sj3));
IKReal x127=((cj3)*(r00)*(sj8));
IKReal x128=((r10)*(sj3)*(sj8));
IKReal x129=((x126)+(x127)+(x125)+(x128));
IKReal x130=((-1.00000000000000)*(x129));
IKReal x131=((cj8)*(r21));
IKReal x132=((r20)*(sj8));
IKReal x133=((x131)+(x132));
j4array[0]=IKatan2(((x124)*(((((-1.00000000000000)*(sj5)*(x130)))+(((cj5)*(x133)))))), ((x124)*(((((sj5)*(x133)))+(((cj5)*(x130)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x134=(cj5)*(cj5);
IKReal x135=(sj5)*(sj5);
IKReal x136=((x135)+(x134));
IKReal x137=((IKabs(x136) != 0)?((IKReal)1/(x136)):(IKReal)1.0e30);
IKReal x138=((cj7)*(r21)*(sj8));
IKReal x139=((cj7)*(cj8)*(r20));
IKReal x140=((r22)*(sj7));
IKReal x141=((x140)+(x139));
IKReal x142=((((-1.00000000000000)*(x141)))+(x138));
IKReal x143=((cj8)*(r21));
IKReal x144=((r20)*(sj8));
IKReal x145=((x143)+(x144));
j4array[0]=IKatan2(((x137)*(((((cj5)*(x145)))+(((-1.00000000000000)*(sj5)*(x142)))))), ((x137)*(((((cj5)*(x142)))+(((sj5)*(x145)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x146=(cj5)*(cj5);
IKReal x147=(sj5)*(sj5);
IKReal x148=((x146)+(x147));
IKReal x149=((IKabs(x148) != 0)?((IKReal)1/(x148)):(IKReal)1.0e30);
IKReal x150=((cj7)*(r21)*(sj8));
IKReal x151=((cj7)*(cj8)*(r20));
IKReal x152=((r22)*(sj7));
IKReal x153=((x152)+(x151));
IKReal x154=((((-1.00000000000000)*(x153)))+(x150));
IKReal x155=((cj8)*(r21));
IKReal x156=((r20)*(sj8));
IKReal x157=((x156)+(x155));
j4array[0]=IKatan2(((x149)*(((((-1.00000000000000)*(sj5)*(x154)))+(((cj5)*(x157)))))), ((x149)*(((((sj5)*(x157)))+(((cj5)*(x154)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
IKReal x158=(sj8)*(sj8);
IKReal x159=(cj8)*(cj8);
dummyeval[0]=((((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-1.00000000000000)*(x158)*((r00)*(r00))))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))+(((-1.00000000000000)*(x159)*((r11)*(r11))))+(((-1.00000000000000)*(x158)*((r10)*(r10))))+(((-1.00000000000000)*(x159)*((r01)*(r01)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
IKReal x160=(sj8)*(sj8);
IKReal x161=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x160)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x161)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8)))+(((r01)*(r10)*(sj7)*(x161)))+(((r01)*(r10)*(sj7)*(x160))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
IKReal x162=(cj8)*(cj8);
IKReal x163=(sj8)*(sj8);
dummyeval[0]=((((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((cj7)*(r00)*(r01)*(x162)))+(((r10)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r10)*(r11)*(x163)))+(((cj8)*(r01)*(r02)*(sj7)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x163)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7)))+(((cj7)*(r10)*(r11)*(x162))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x164=(cj8)*(cj8);
IKReal x165=(sj8)*(sj8);
IKReal x166=((cj5)*(sj4));
IKReal x167=((cj4)*(sj5));
IKReal x168=((x166)+(x167));
IKReal x169=(r11)*(r11);
IKReal x170=((cj7)*(cj8)*(sj8)*(x169));
IKReal x171=((cj7)*(r10)*(r11)*(x165));
IKReal x172=(r01)*(r01);
IKReal x173=((cj7)*(cj8)*(sj8)*(x172));
IKReal x174=((cj7)*(r00)*(r01)*(x165));
IKReal x175=((x171)+(x170)+(x173)+(x174));
IKReal x176=(r10)*(r10);
IKReal x177=((cj7)*(cj8)*(sj8)*(x176));
IKReal x178=((r00)*(r02)*(sj7)*(sj8));
IKReal x179=((r10)*(r12)*(sj7)*(sj8));
IKReal x180=((cj7)*(r00)*(r01)*(x164));
IKReal x181=((cj8)*(r01)*(r02)*(sj7));
IKReal x182=(r00)*(r00);
IKReal x183=((cj7)*(cj8)*(sj8)*(x182));
IKReal x184=((cj7)*(r10)*(r11)*(x164));
IKReal x185=((cj8)*(r11)*(r12)*(sj7));
IKReal x186=((x179)+(x178)+(x177)+(x184)+(x185)+(x180)+(x181)+(x183));
j3array[0]=IKatan2(((x168)*(((IKabs(((((-1.00000000000000)*(x175)))+(x186))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x175)))+(x186)))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))), ((x168)*(((IKabs(((((-1.00000000000000)*(x186)))+(x175))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x186)))+(x175)))):(IKReal)1.0e30))*(((((r00)*(sj8)))+(((cj8)*(r01)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x187=(sj8)*(sj8);
IKReal x188=(cj8)*(cj8);
IKReal x189=((cj7)*(cj8)*(r01)*(r12));
IKReal x190=((cj7)*(r00)*(r12)*(sj8));
IKReal x191=((r00)*(r11)*(sj7)*(x187));
IKReal x192=((r00)*(r11)*(sj7)*(x188));
IKReal x193=((x192)+(x191)+(x190)+(x189));
IKReal x194=((cj7)*(cj8)*(r02)*(r11));
IKReal x195=((r01)*(r10)*(sj7)*(x188));
IKReal x196=((cj7)*(r02)*(r10)*(sj8));
IKReal x197=((r01)*(r10)*(sj7)*(x187));
IKReal x198=((x197)+(x196)+(x195)+(x194));
j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x193)))+(x198))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x193)))+(x198)))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x198)))+(x193))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x198)))+(x193)))):(IKReal)1.0e30))*(((((r00)*(sj8)))+(((cj8)*(r01)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x199=(sj8)*(sj8);
IKReal x200=(cj8)*(cj8);
IKReal x201=(r11)*(r11);
IKReal x202=((x200)*(x201));
IKReal x203=(r00)*(r00);
IKReal x204=((x199)*(x203));
IKReal x205=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
IKReal x206=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
IKReal x207=(r10)*(r10);
IKReal x208=((x199)*(x207));
IKReal x209=(r01)*(r01);
IKReal x210=((x200)*(x209));
IKReal x211=((x210)+(x206)+(x205)+(x204)+(x202)+(x208));
IKReal x212=((sj4)*(sj5));
IKReal x213=((cj4)*(cj5));
IKReal x214=((x212)+(((-1.00000000000000)*(x213))));
j3array[0]=IKatan2(((-1.00000000000000)*(x214)*(((IKabs(x211) != 0)?((IKReal)1/(x211)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))), ((x214)*(((IKabs(x211) != 0)?((IKReal)1/(x211)):(IKReal)1.0e30))*(((((r00)*(sj8)))+(((cj8)*(r01)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8))));
evalcond[2]=((-0.0850000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
j5array[0]=IKatan2(((0.149443561208267)+(((0.317965023847377)*(cj7)*(npy)*(sj8)))+(((0.0286168521462639)*(cj7)))+(((3.97456279809221)*(npx)*(sj8)))+(((-0.317965023847377)*(npz)*(sj7)))+(((-0.317965023847377)*(cj7)*(cj8)*(npx)))+(((3.97456279809221)*(cj8)*(npy)))), ((-0.868044515103339)+(((-3.97456279809221)*(cj7)*(npy)*(sj8)))+(((0.317965023847377)*(npx)*(sj8)))+(((-0.357710651828299)*(cj7)))+(((0.317965023847377)*(cj8)*(npy)))+(((3.97456279809221)*(npz)*(sj7)))+(((3.97456279809221)*(cj7)*(cj8)*(npx)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
IKReal x215=(cj8)*(cj8);
IKReal x216=(sj8)*(sj8);
dummyeval[0]=((((cj7)*(cj8)*(r01)*(r12)))+(((cj7)*(r00)*(r12)*(sj8)))+(((r00)*(r11)*(sj7)*(x215)))+(((r00)*(r11)*(sj7)*(x216)))+(((-1.00000000000000)*(cj7)*(r02)*(r10)*(sj8)))+(((-1.00000000000000)*(r01)*(r10)*(sj7)*(x215)))+(((-1.00000000000000)*(r01)*(r10)*(sj7)*(x216)))+(((-1.00000000000000)*(cj7)*(cj8)*(r02)*(r11))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
IKReal x217=(sj7)*(sj7);
IKReal x218=(cj7)*(cj7);
dummyeval[0]=((((-1.00000000000000)*(r02)*(r11)*(sj8)*(x217)))+(((-1.00000000000000)*(r02)*(r11)*(sj8)*(x218)))+(((-1.00000000000000)*(cj8)*(r00)*(r12)*(x217)))+(((-1.00000000000000)*(cj8)*(r00)*(r12)*(x218)))+(((cj8)*(r02)*(r10)*(x218)))+(((cj8)*(r02)*(r10)*(x217)))+(((r01)*(r12)*(sj8)*(x217)))+(((r01)*(r12)*(sj8)*(x218))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x219=(sj7)*(sj7);
IKReal x220=(cj7)*(cj7);
IKReal x221=((r02)*(r11)*(sj8)*(x219));
IKReal x222=((r02)*(r11)*(sj8)*(x220));
IKReal x223=((cj8)*(r00)*(r12)*(x219));
IKReal x224=((cj8)*(r00)*(r12)*(x220));
IKReal x225=((x221)+(x223)+(x222)+(x224));
IKReal x226=((cj8)*(r02)*(r10)*(x219));
IKReal x227=((cj8)*(r02)*(r10)*(x220));
IKReal x228=((r01)*(r12)*(sj8)*(x219));
IKReal x229=((r01)*(r12)*(sj8)*(x220));
IKReal x230=((x229)+(x228)+(x227)+(x226));
j3array[0]=IKatan2(((((IKabs(((x230)+(((-1.00000000000000)*(x225))))) != 0)?((IKReal)1/(((x230)+(((-1.00000000000000)*(x225)))))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x230)))+(x225))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x230)))+(x225)))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x231=(cj5)*(cj5);
IKReal x232=(sj5)*(sj5);
IKReal x233=((x232)+(x231));
IKReal x234=((r12)*(sj3)*(sj7));
IKReal x235=((cj3)*(r02)*(sj7));
IKReal x236=((cj7)*(cj8)*(r10)*(sj3));
IKReal x237=((cj3)*(cj7)*(cj8)*(r00));
IKReal x238=((x236)+(x237)+(x234)+(x235));
IKReal x239=((cj3)*(cj7)*(r01)*(sj8));
IKReal x240=((cj7)*(r11)*(sj3)*(sj8));
IKReal x241=((x239)+(x240));
IKReal x242=((x238)+(((-1.00000000000000)*(x241))));
IKReal x243=((cj7)*(r21)*(sj8));
IKReal x244=((cj7)*(cj8)*(r20));
IKReal x245=((r22)*(sj7));
IKReal x246=((x245)+(x244));
IKReal x247=((x243)+(((-1.00000000000000)*(x246))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x233) != 0)?((IKReal)1/(x233)):(IKReal)1.0e30))*(((((sj5)*(x247)))+(((cj5)*(x242)))))), ((((IKabs(x233) != 0)?((IKReal)1/(x233)):(IKReal)1.0e30))*(((((cj5)*(x247)))+(((-1.00000000000000)*(sj5)*(x242)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x248=((cj3)*(cj8)*(r01));
IKReal x249=((cj8)*(r11)*(sj3));
IKReal x250=((cj3)*(r00)*(sj8));
IKReal x251=((r10)*(sj3)*(sj8));
IKReal x252=((x250)+(x251)+(x249)+(x248));
IKReal x253=((-1.00000000000000)*(x252));
IKReal x254=((cj8)*(r21));
IKReal x255=((r20)*(sj8));
IKReal x256=((x254)+(x255));
IKReal x257=(cj5)*(cj5);
IKReal x258=(sj5)*(sj5);
IKReal x259=((x258)+(x257));
IKReal x260=((-1.00000000000000)*(x259));
IKReal x261=((IKabs(x260) != 0)?((IKReal)1/(x260)):(IKReal)1.0e30);
j4array[0]=IKatan2(((x261)*(((((cj5)*(x256)))+(((-1.00000000000000)*(sj5)*(x253)))))), ((x261)*(((((cj5)*(x253)))+(((sj5)*(x256)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x262=(cj5)*(cj5);
IKReal x263=(sj5)*(sj5);
IKReal x264=((x263)+(x262));
IKReal x265=((cj8)*(r21));
IKReal x266=((r20)*(sj8));
IKReal x267=((x265)+(x266));
IKReal x268=((cj7)*(r21)*(sj8));
IKReal x269=((cj7)*(cj8)*(r20));
IKReal x270=((r22)*(sj7));
IKReal x271=((x269)+(x270));
IKReal x272=((x268)+(((-1.00000000000000)*(x271))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x264) != 0)?((IKReal)1/(x264)):(IKReal)1.0e30))*(((((sj5)*(x272)))+(((cj5)*(x267)))))), ((((IKabs(x264) != 0)?((IKReal)1/(x264)):(IKReal)1.0e30))*(((((cj5)*(x272)))+(((-1.00000000000000)*(sj5)*(x267)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x273=(cj8)*(cj8);
IKReal x274=(sj8)*(sj8);
IKReal x275=((cj7)*(cj8)*(r02)*(r11));
IKReal x276=((r01)*(r10)*(sj7)*(x273));
IKReal x277=((cj7)*(r02)*(r10)*(sj8));
IKReal x278=((r01)*(r10)*(sj7)*(x274));
IKReal x279=((x276)+(x277)+(x275)+(x278));
IKReal x280=((cj7)*(cj8)*(r01)*(r12));
IKReal x281=((cj7)*(r00)*(r12)*(sj8));
IKReal x282=((r00)*(r11)*(sj7)*(x274));
IKReal x283=((r00)*(r11)*(sj7)*(x273));
IKReal x284=((x283)+(x282)+(x281)+(x280));
j3array[0]=IKatan2(((((IKabs(((x284)+(((-1.00000000000000)*(x279))))) != 0)?((IKReal)1/(((x284)+(((-1.00000000000000)*(x279)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))), ((((IKabs(((x279)+(((-1.00000000000000)*(x284))))) != 0)?((IKReal)1/(((x279)+(((-1.00000000000000)*(x284)))))):(IKReal)1.0e30))*(((((r00)*(sj8)))+(((cj8)*(r01)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x285=(cj5)*(cj5);
IKReal x286=(sj5)*(sj5);
IKReal x287=((x286)+(x285));
IKReal x288=((r12)*(sj3)*(sj7));
IKReal x289=((cj3)*(r02)*(sj7));
IKReal x290=((cj7)*(cj8)*(r10)*(sj3));
IKReal x291=((cj3)*(cj7)*(cj8)*(r00));
IKReal x292=((x290)+(x291)+(x289)+(x288));
IKReal x293=((cj3)*(cj7)*(r01)*(sj8));
IKReal x294=((cj7)*(r11)*(sj3)*(sj8));
IKReal x295=((x293)+(x294));
IKReal x296=((((-1.00000000000000)*(x295)))+(x292));
IKReal x297=((cj7)*(r21)*(sj8));
IKReal x298=((cj7)*(cj8)*(r20));
IKReal x299=((r22)*(sj7));
IKReal x300=((x298)+(x299));
IKReal x301=((x297)+(((-1.00000000000000)*(x300))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x287) != 0)?((IKReal)1/(x287)):(IKReal)1.0e30))*(((((sj5)*(x301)))+(((cj5)*(x296)))))), ((((IKabs(x287) != 0)?((IKReal)1/(x287)):(IKReal)1.0e30))*(((((-1.00000000000000)*(sj5)*(x296)))+(((cj5)*(x301)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x302=((cj3)*(cj8)*(r01));
IKReal x303=((cj8)*(r11)*(sj3));
IKReal x304=((cj3)*(r00)*(sj8));
IKReal x305=((r10)*(sj3)*(sj8));
IKReal x306=((x304)+(x305)+(x302)+(x303));
IKReal x307=((-1.00000000000000)*(x306));
IKReal x308=((cj8)*(r21));
IKReal x309=((r20)*(sj8));
IKReal x310=((x308)+(x309));
IKReal x311=(cj5)*(cj5);
IKReal x312=(sj5)*(sj5);
IKReal x313=((x311)+(x312));
IKReal x314=((-1.00000000000000)*(x313));
IKReal x315=((IKabs(x314) != 0)?((IKReal)1/(x314)):(IKReal)1.0e30);
j4array[0]=IKatan2(((x315)*(((((cj5)*(x310)))+(((-1.00000000000000)*(sj5)*(x307)))))), ((x315)*(((((sj5)*(x310)))+(((cj5)*(x307)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x316=(cj5)*(cj5);
IKReal x317=(sj5)*(sj5);
IKReal x318=((x317)+(x316));
IKReal x319=((cj8)*(r21));
IKReal x320=((r20)*(sj8));
IKReal x321=((x320)+(x319));
IKReal x322=((cj7)*(r21)*(sj8));
IKReal x323=((cj7)*(cj8)*(r20));
IKReal x324=((r22)*(sj7));
IKReal x325=((x324)+(x323));
IKReal x326=((((-1.00000000000000)*(x325)))+(x322));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x318) != 0)?((IKReal)1/(x318)):(IKReal)1.0e30))*(((((sj5)*(x326)))+(((cj5)*(x321)))))), ((((IKabs(x318) != 0)?((IKReal)1/(x318)):(IKReal)1.0e30))*(((((cj5)*(x326)))+(((-1.00000000000000)*(sj5)*(x321)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x327=(cj5)*(cj5);
IKReal x328=(sj5)*(sj5);
IKReal x329=((x327)+(x328));
IKReal x330=((cj8)*(r21));
IKReal x331=((r20)*(sj8));
IKReal x332=((x331)+(x330));
IKReal x333=((cj7)*(r21)*(sj8));
IKReal x334=((cj7)*(cj8)*(r20));
IKReal x335=((r22)*(sj7));
IKReal x336=((x335)+(x334));
IKReal x337=((x333)+(((-1.00000000000000)*(x336))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x329) != 0)?((IKReal)1/(x329)):(IKReal)1.0e30))*(((((sj5)*(x337)))+(((cj5)*(x332)))))), ((((IKabs(x329) != 0)?((IKReal)1/(x329)):(IKReal)1.0e30))*(((((-1.00000000000000)*(sj5)*(x332)))+(((cj5)*(x337)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
IKReal x338=(sj8)*(sj8);
IKReal x339=(cj8)*(cj8);
dummyeval[0]=((((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))+(((-1.00000000000000)*(x339)*((r11)*(r11))))+(((-1.00000000000000)*(x338)*((r00)*(r00))))+(((-1.00000000000000)*(x338)*((r10)*(r10))))+(((-1.00000000000000)*(x339)*((r01)*(r01)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
IKReal x340=(cj8)*(cj8);
IKReal x341=(sj8)*(sj8);
dummyeval[0]=((((cj7)*(cj8)*(r01)*(r12)))+(((cj7)*(r00)*(r12)*(sj8)))+(((-1.00000000000000)*(cj7)*(r02)*(r10)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r02)*(r11)))+(((r00)*(r11)*(sj7)*(x341)))+(((r00)*(r11)*(sj7)*(x340)))+(((-1.00000000000000)*(r01)*(r10)*(sj7)*(x341)))+(((-1.00000000000000)*(r01)*(r10)*(sj7)*(x340))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
IKReal x342=(cj8)*(cj8);
IKReal x343=(sj8)*(sj8);
dummyeval[0]=((((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((r10)*(r12)*(sj7)*(sj8)))+(((cj7)*(r10)*(r11)*(x342)))+(((cj8)*(r01)*(r02)*(sj7)))+(((cj7)*(r00)*(r01)*(x342)))+(((-1.00000000000000)*(cj7)*(r10)*(r11)*(x343)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x343))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x344=(cj8)*(cj8);
IKReal x345=(sj8)*(sj8);
IKReal x346=((cj5)*(sj4));
IKReal x347=((cj4)*(sj5));
IKReal x348=((x346)+(x347));
IKReal x349=(r11)*(r11);
IKReal x350=((cj7)*(cj8)*(sj8)*(x349));
IKReal x351=((cj7)*(r10)*(r11)*(x345));
IKReal x352=(r01)*(r01);
IKReal x353=((cj7)*(cj8)*(sj8)*(x352));
IKReal x354=((cj7)*(r00)*(r01)*(x345));
IKReal x355=((x351)+(x350)+(x353)+(x354));
IKReal x356=(r10)*(r10);
IKReal x357=((cj7)*(cj8)*(sj8)*(x356));
IKReal x358=((r00)*(r02)*(sj7)*(sj8));
IKReal x359=((r10)*(r12)*(sj7)*(sj8));
IKReal x360=((cj7)*(r00)*(r01)*(x344));
IKReal x361=((cj8)*(r01)*(r02)*(sj7));
IKReal x362=(r00)*(r00);
IKReal x363=((cj7)*(cj8)*(sj8)*(x362));
IKReal x364=((cj7)*(r10)*(r11)*(x344));
IKReal x365=((cj8)*(r11)*(r12)*(sj7));
IKReal x366=((x357)+(x359)+(x358)+(x360)+(x361)+(x363)+(x364)+(x365));
j3array[0]=IKatan2(((x348)*(((IKabs(((((-1.00000000000000)*(x355)))+(x366))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x355)))+(x366)))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))), ((x348)*(((IKabs(((((-1.00000000000000)*(x366)))+(x355))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x366)))+(x355)))):(IKReal)1.0e30))*(((((r00)*(sj8)))+(((cj8)*(r01)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x367=(cj8)*(cj8);
IKReal x368=(sj8)*(sj8);
IKReal x369=((cj7)*(cj8)*(r02)*(r11));
IKReal x370=((r01)*(r10)*(sj7)*(x367));
IKReal x371=((cj7)*(r02)*(r10)*(sj8));
IKReal x372=((r01)*(r10)*(sj7)*(x368));
IKReal x373=((x372)+(x371)+(x370)+(x369));
IKReal x374=((cj7)*(cj8)*(r01)*(r12));
IKReal x375=((cj7)*(r00)*(r12)*(sj8));
IKReal x376=((r00)*(r11)*(sj7)*(x368));
IKReal x377=((r00)*(r11)*(sj7)*(x367));
IKReal x378=((x377)+(x376)+(x375)+(x374));
j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x373)))+(x378))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x373)))+(x378)))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x378)))+(x373))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x378)))+(x373)))):(IKReal)1.0e30))*(((((r00)*(sj8)))+(((cj8)*(r01)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x379=(sj8)*(sj8);
IKReal x380=(cj8)*(cj8);
IKReal x381=(r11)*(r11);
IKReal x382=((x380)*(x381));
IKReal x383=(r00)*(r00);
IKReal x384=((x379)*(x383));
IKReal x385=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
IKReal x386=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
IKReal x387=(r10)*(r10);
IKReal x388=((x379)*(x387));
IKReal x389=(r01)*(r01);
IKReal x390=((x380)*(x389));
IKReal x391=((x386)+(x384)+(x385)+(x382)+(x388)+(x390));
IKReal x392=((cj4)*(cj5));
IKReal x393=((sj4)*(sj5));
IKReal x394=((((-1.00000000000000)*(x393)))+(x392));
j3array[0]=IKatan2(((-1.00000000000000)*(x394)*(((IKabs(x391) != 0)?((IKReal)1/(x391)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))), ((x394)*(((IKabs(x391) != 0)?((IKReal)1/(x391)):(IKReal)1.0e30))*(((((r00)*(sj8)))+(((cj8)*(r01)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x395=(sj7)*(sj7);
IKReal x396=(cj7)*(cj7);
IKReal x397=((cj8)*(r02)*(r10)*(x395));
IKReal x398=((cj8)*(r02)*(r10)*(x396));
IKReal x399=((r01)*(r12)*(sj8)*(x395));
IKReal x400=((r01)*(r12)*(sj8)*(x396));
IKReal x401=((x397)+(x399)+(x398)+(x400));
IKReal x402=((r02)*(r11)*(sj8)*(x395));
IKReal x403=((r02)*(r11)*(sj8)*(x396));
IKReal x404=((cj8)*(r00)*(r12)*(x395));
IKReal x405=((cj8)*(r00)*(r12)*(x396));
IKReal x406=((x403)+(x402)+(x405)+(x404));
j3array[0]=IKatan2(((sj6)*(((IKabs(((x406)+(((-1.00000000000000)*(x401))))) != 0)?((IKReal)1/(((x406)+(((-1.00000000000000)*(x401)))))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((sj6)*(((IKabs(((x401)+(((-1.00000000000000)*(x406))))) != 0)?((IKReal)1/(((x401)+(((-1.00000000000000)*(x406)))))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
dummyeval[0]=cj6;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj6;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[7];
evalcond[0]=((IKfmod(((3.14159265358979)+(j6)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[2]=((0.0850000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[3]=((1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[4]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
evalcond[5]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[6]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
j5array[0]=IKatan2(((0.149443561208267)+(((0.317965023847377)*(cj7)*(npy)*(sj8)))+(((3.97456279809221)*(npy)*(sj7)*(sj8)))+(((-3.97456279809221)*(cj8)*(npx)*(sj7)))+(((0.0286168521462639)*(cj7)))+(((-0.317965023847377)*(npz)*(sj7)))+(((-0.317965023847377)*(cj7)*(cj8)*(npx)))+(((0.357710651828299)*(sj7)))+(((3.97456279809221)*(cj7)*(npz)))), ((-0.868044515103339)+(((0.317965023847377)*(cj7)*(npz)))+(((0.0286168521462639)*(sj7)))+(((-3.97456279809221)*(cj7)*(npy)*(sj8)))+(((0.317965023847377)*(npy)*(sj7)*(sj8)))+(((-0.317965023847377)*(cj8)*(npx)*(sj7)))+(((-0.357710651828299)*(cj7)))+(((3.97456279809221)*(npz)*(sj7)))+(((3.97456279809221)*(cj7)*(cj8)*(npx)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x407=((cj8)*(r10)*(sj3)*(sj7));
IKReal x408=((cj3)*(cj8)*(r00)*(sj7));
IKReal x409=((x407)+(x408));
IKReal x410=((cj7)*(r12)*(sj3));
IKReal x411=((cj3)*(cj7)*(r02));
IKReal x412=((cj3)*(r01)*(sj7)*(sj8));
IKReal x413=((r11)*(sj3)*(sj7)*(sj8));
IKReal x414=((x412)+(x413)+(x410)+(x411));
IKReal x415=((x409)+(((-1.00000000000000)*(x414))));
IKReal x416=((cj7)*(r22));
IKReal x417=((r21)*(sj7)*(sj8));
IKReal x418=((x416)+(x417));
IKReal x419=((cj8)*(r20)*(sj7));
IKReal x420=((x418)+(((-1.00000000000000)*(x419))));
IKReal x421=(cj5)*(cj5);
IKReal x422=(sj5)*(sj5);
IKReal x423=((x422)+(x421));
IKReal x424=((-1.00000000000000)*(x423));
IKReal x425=((IKabs(x424) != 0)?((IKReal)1/(x424)):(IKReal)1.0e30);
j4array[0]=IKatan2(((x425)*(((((-1.00000000000000)*(sj5)*(x415)))+(((cj5)*(x420)))))), ((x425)*(((((cj5)*(x415)))+(((sj5)*(x420)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x426=(cj5)*(cj5);
IKReal x427=(sj5)*(sj5);
IKReal x428=((x427)+(x426));
IKReal x429=((r12)*(sj3)*(sj7));
IKReal x430=((cj3)*(r02)*(sj7));
IKReal x431=((cj7)*(cj8)*(r10)*(sj3));
IKReal x432=((cj3)*(cj7)*(cj8)*(r00));
IKReal x433=((x429)+(x430)+(x431)+(x432));
IKReal x434=((cj3)*(cj7)*(r01)*(sj8));
IKReal x435=((cj7)*(r11)*(sj3)*(sj8));
IKReal x436=((x434)+(x435));
IKReal x437=((((-1.00000000000000)*(x436)))+(x433));
IKReal x438=((cj7)*(r21)*(sj8));
IKReal x439=((cj7)*(cj8)*(r20));
IKReal x440=((r22)*(sj7));
IKReal x441=((x439)+(x440));
IKReal x442=((((-1.00000000000000)*(x441)))+(x438));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x428) != 0)?((IKReal)1/(x428)):(IKReal)1.0e30))*(((((cj5)*(x437)))+(((sj5)*(x442)))))), ((((IKabs(x428) != 0)?((IKReal)1/(x428)):(IKReal)1.0e30))*(((((-1.00000000000000)*(sj5)*(x437)))+(((cj5)*(x442)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x443=(cj5)*(cj5);
IKReal x444=(sj5)*(sj5);
IKReal x445=((x444)+(x443));
IKReal x446=((cj7)*(r22));
IKReal x447=((r21)*(sj7)*(sj8));
IKReal x448=((x447)+(x446));
IKReal x449=((cj8)*(r20)*(sj7));
IKReal x450=((((-1.00000000000000)*(x449)))+(x448));
IKReal x451=((cj7)*(r21)*(sj8));
IKReal x452=((cj7)*(cj8)*(r20));
IKReal x453=((r22)*(sj7));
IKReal x454=((x452)+(x453));
IKReal x455=((((-1.00000000000000)*(x454)))+(x451));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x445) != 0)?((IKReal)1/(x445)):(IKReal)1.0e30))*(((((cj5)*(x450)))+(((sj5)*(x455)))))), ((((IKabs(x445) != 0)?((IKReal)1/(x445)):(IKReal)1.0e30))*(((((cj5)*(x455)))+(((-1.00000000000000)*(sj5)*(x450)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((-3.14159265358979)+(3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[2]=((-0.0850000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[3]=((-1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[4]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
evalcond[5]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[6]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
j5array[0]=IKatan2(((0.149443561208267)+(((0.317965023847377)*(cj7)*(npy)*(sj8)))+(((-3.97456279809221)*(npy)*(sj7)*(sj8)))+(((-0.357710651828299)*(sj7)))+(((0.0286168521462639)*(cj7)))+(((-3.97456279809221)*(cj7)*(npz)))+(((-0.317965023847377)*(npz)*(sj7)))+(((-0.317965023847377)*(cj7)*(cj8)*(npx)))+(((3.97456279809221)*(cj8)*(npx)*(sj7)))), ((-0.868044515103339)+(((-3.97456279809221)*(cj7)*(npy)*(sj8)))+(((-0.317965023847377)*(npy)*(sj7)*(sj8)))+(((-0.357710651828299)*(cj7)))+(((0.317965023847377)*(cj8)*(npx)*(sj7)))+(((-0.0286168521462639)*(sj7)))+(((-0.317965023847377)*(cj7)*(npz)))+(((3.97456279809221)*(npz)*(sj7)))+(((3.97456279809221)*(cj7)*(cj8)*(npx)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x456=(cj5)*(cj5);
IKReal x457=(sj5)*(sj5);
IKReal x458=((x456)+(x457));
IKReal x459=((r12)*(sj3)*(sj7));
IKReal x460=((cj3)*(r02)*(sj7));
IKReal x461=((cj7)*(cj8)*(r10)*(sj3));
IKReal x462=((cj3)*(cj7)*(cj8)*(r00));
IKReal x463=((x459)+(x462)+(x461)+(x460));
IKReal x464=((cj3)*(cj7)*(r01)*(sj8));
IKReal x465=((cj7)*(r11)*(sj3)*(sj8));
IKReal x466=((x465)+(x464));
IKReal x467=((((-1.00000000000000)*(x466)))+(x463));
IKReal x468=((cj7)*(r21)*(sj8));
IKReal x469=((cj7)*(cj8)*(r20));
IKReal x470=((r22)*(sj7));
IKReal x471=((x469)+(x470));
IKReal x472=((((-1.00000000000000)*(x471)))+(x468));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x458) != 0)?((IKReal)1/(x458)):(IKReal)1.0e30))*(((((sj5)*(x472)))+(((cj5)*(x467)))))), ((((IKabs(x458) != 0)?((IKReal)1/(x458)):(IKReal)1.0e30))*(((((cj5)*(x472)))+(((-1.00000000000000)*(sj5)*(x467)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x473=(cj5)*(cj5);
IKReal x474=(sj5)*(sj5);
IKReal x475=((x474)+(x473));
IKReal x476=((IKabs(x475) != 0)?((IKReal)1/(x475)):(IKReal)1.0e30);
IKReal x477=((cj8)*(r10)*(sj3)*(sj7));
IKReal x478=((cj3)*(cj8)*(r00)*(sj7));
IKReal x479=((x477)+(x478));
IKReal x480=((cj7)*(r12)*(sj3));
IKReal x481=((cj3)*(cj7)*(r02));
IKReal x482=((cj3)*(r01)*(sj7)*(sj8));
IKReal x483=((r11)*(sj3)*(sj7)*(sj8));
IKReal x484=((x481)+(x480)+(x483)+(x482));
IKReal x485=((((-1.00000000000000)*(x484)))+(x479));
IKReal x486=((cj7)*(r22));
IKReal x487=((r21)*(sj7)*(sj8));
IKReal x488=((x487)+(x486));
IKReal x489=((cj8)*(r20)*(sj7));
IKReal x490=((((-1.00000000000000)*(x489)))+(x488));
j4array[0]=IKatan2(((x476)*(((((-1.00000000000000)*(sj5)*(x485)))+(((cj5)*(x490)))))), ((x476)*(((((cj5)*(x485)))+(((sj5)*(x490)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x491=(cj5)*(cj5);
IKReal x492=(sj5)*(sj5);
IKReal x493=((x492)+(x491));
IKReal x494=((IKabs(x493) != 0)?((IKReal)1/(x493)):(IKReal)1.0e30);
IKReal x495=((cj7)*(r22));
IKReal x496=((r21)*(sj7)*(sj8));
IKReal x497=((x496)+(x495));
IKReal x498=((cj8)*(r20)*(sj7));
IKReal x499=((((-1.00000000000000)*(x498)))+(x497));
IKReal x500=((cj7)*(r21)*(sj8));
IKReal x501=((cj7)*(cj8)*(r20));
IKReal x502=((r22)*(sj7));
IKReal x503=((x501)+(x502));
IKReal x504=((((-1.00000000000000)*(x503)))+(x500));
j4array[0]=IKatan2(((x494)*(((((cj5)*(x499)))+(((-1.00000000000000)*(sj5)*(x504)))))), ((x494)*(((((cj5)*(x504)))+(((sj5)*(x499)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((-1.57079632679490)+(3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[2]=((((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8))));
evalcond[3]=((0.0850000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
evalcond[4]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[5]=((1.00000000000000)+(((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
evalcond[6]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((cj3)*(cj8)*(r00)*(sj7))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
j5array[0]=IKatan2(((0.149443561208267)+(((0.317965023847377)*(cj7)*(npy)*(sj8)))+(((0.0286168521462639)*(cj7)))+(((-0.317965023847377)*(npz)*(sj7)))+(((-0.317965023847377)*(cj7)*(cj8)*(npx)))+(((-3.97456279809221)*(cj8)*(npy)))+(((-3.97456279809221)*(npx)*(sj8)))), ((-0.868044515103339)+(((-3.97456279809221)*(cj7)*(npy)*(sj8)))+(((-0.357710651828299)*(cj7)))+(((-0.317965023847377)*(npx)*(sj8)))+(((-0.317965023847377)*(cj8)*(npy)))+(((3.97456279809221)*(npz)*(sj7)))+(((3.97456279809221)*(cj7)*(cj8)*(npx)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x505=(cj5)*(cj5);
IKReal x506=(sj5)*(sj5);
IKReal x507=((x505)+(x506));
IKReal x508=((r12)*(sj3)*(sj7));
IKReal x509=((cj3)*(r02)*(sj7));
IKReal x510=((cj7)*(cj8)*(r10)*(sj3));
IKReal x511=((cj3)*(cj7)*(cj8)*(r00));
IKReal x512=((x508)+(x509)+(x511)+(x510));
IKReal x513=((cj3)*(cj7)*(r01)*(sj8));
IKReal x514=((cj7)*(r11)*(sj3)*(sj8));
IKReal x515=((x514)+(x513));
IKReal x516=((x512)+(((-1.00000000000000)*(x515))));
IKReal x517=((cj7)*(r21)*(sj8));
IKReal x518=((cj7)*(cj8)*(r20));
IKReal x519=((r22)*(sj7));
IKReal x520=((x519)+(x518));
IKReal x521=((((-1.00000000000000)*(x520)))+(x517));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x507) != 0)?((IKReal)1/(x507)):(IKReal)1.0e30))*(((((cj5)*(x516)))+(((sj5)*(x521)))))), ((((IKabs(x507) != 0)?((IKReal)1/(x507)):(IKReal)1.0e30))*(((((cj5)*(x521)))+(((-1.00000000000000)*(sj5)*(x516)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x522=(cj5)*(cj5);
IKReal x523=(sj5)*(sj5);
IKReal x524=((x522)+(x523));
IKReal x525=((IKabs(x524) != 0)?((IKReal)1/(x524)):(IKReal)1.0e30);
IKReal x526=((cj3)*(cj8)*(r01));
IKReal x527=((cj8)*(r11)*(sj3));
IKReal x528=((cj3)*(r00)*(sj8));
IKReal x529=((r10)*(sj3)*(sj8));
IKReal x530=((x526)+(x527)+(x528)+(x529));
IKReal x531=((-1.00000000000000)*(x530));
IKReal x532=((cj8)*(r21));
IKReal x533=((r20)*(sj8));
IKReal x534=((x533)+(x532));
j4array[0]=IKatan2(((x525)*(((((cj5)*(x534)))+(((-1.00000000000000)*(sj5)*(x531)))))), ((x525)*(((((cj5)*(x531)))+(((sj5)*(x534)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x535=(cj5)*(cj5);
IKReal x536=(sj5)*(sj5);
IKReal x537=((x535)+(x536));
IKReal x538=((IKabs(x537) != 0)?((IKReal)1/(x537)):(IKReal)1.0e30);
IKReal x539=((cj7)*(r21)*(sj8));
IKReal x540=((cj7)*(cj8)*(r20));
IKReal x541=((r22)*(sj7));
IKReal x542=((x540)+(x541));
IKReal x543=((((-1.00000000000000)*(x542)))+(x539));
IKReal x544=((cj8)*(r21));
IKReal x545=((r20)*(sj8));
IKReal x546=((x544)+(x545));
j4array[0]=IKatan2(((x538)*(((((cj5)*(x546)))+(((-1.00000000000000)*(sj5)*(x543)))))), ((x538)*(((((cj5)*(x543)))+(((sj5)*(x546)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[2]=((((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8))));
evalcond[3]=((-0.0850000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
evalcond[4]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[5]=((-1.00000000000000)+(((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
evalcond[6]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((cj3)*(cj8)*(r00)*(sj7))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
j5array[0]=IKatan2(((0.149443561208267)+(((0.317965023847377)*(cj7)*(npy)*(sj8)))+(((0.0286168521462639)*(cj7)))+(((3.97456279809221)*(npx)*(sj8)))+(((-0.317965023847377)*(npz)*(sj7)))+(((-0.317965023847377)*(cj7)*(cj8)*(npx)))+(((3.97456279809221)*(cj8)*(npy)))), ((-0.868044515103339)+(((-3.97456279809221)*(cj7)*(npy)*(sj8)))+(((0.317965023847377)*(npx)*(sj8)))+(((-0.357710651828299)*(cj7)))+(((0.317965023847377)*(cj8)*(npy)))+(((3.97456279809221)*(npz)*(sj7)))+(((3.97456279809221)*(cj7)*(cj8)*(npx)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x547=(cj5)*(cj5);
IKReal x548=(sj5)*(sj5);
IKReal x549=((x547)+(x548));
IKReal x550=((r12)*(sj3)*(sj7));
IKReal x551=((cj3)*(r02)*(sj7));
IKReal x552=((cj7)*(cj8)*(r10)*(sj3));
IKReal x553=((cj3)*(cj7)*(cj8)*(r00));
IKReal x554=((x553)+(x552)+(x551)+(x550));
IKReal x555=((cj3)*(cj7)*(r01)*(sj8));
IKReal x556=((cj7)*(r11)*(sj3)*(sj8));
IKReal x557=((x556)+(x555));
IKReal x558=((((-1.00000000000000)*(x557)))+(x554));
IKReal x559=((cj7)*(r21)*(sj8));
IKReal x560=((cj7)*(cj8)*(r20));
IKReal x561=((r22)*(sj7));
IKReal x562=((x560)+(x561));
IKReal x563=((x559)+(((-1.00000000000000)*(x562))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x549) != 0)?((IKReal)1/(x549)):(IKReal)1.0e30))*(((((cj5)*(x558)))+(((sj5)*(x563)))))), ((((IKabs(x549) != 0)?((IKReal)1/(x549)):(IKReal)1.0e30))*(((((-1.00000000000000)*(sj5)*(x558)))+(((cj5)*(x563)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x564=((cj3)*(cj8)*(r01));
IKReal x565=((cj8)*(r11)*(sj3));
IKReal x566=((cj3)*(r00)*(sj8));
IKReal x567=((r10)*(sj3)*(sj8));
IKReal x568=((x566)+(x567)+(x564)+(x565));
IKReal x569=((-1.00000000000000)*(x568));
IKReal x570=((cj8)*(r21));
IKReal x571=((r20)*(sj8));
IKReal x572=((x571)+(x570));
IKReal x573=(cj5)*(cj5);
IKReal x574=(sj5)*(sj5);
IKReal x575=((x574)+(x573));
IKReal x576=((-1.00000000000000)*(x575));
IKReal x577=((IKabs(x576) != 0)?((IKReal)1/(x576)):(IKReal)1.0e30);
j4array[0]=IKatan2(((x577)*(((((cj5)*(x572)))+(((-1.00000000000000)*(sj5)*(x569)))))), ((x577)*(((((sj5)*(x572)))+(((cj5)*(x569)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x578=(cj5)*(cj5);
IKReal x579=(sj5)*(sj5);
IKReal x580=((x579)+(x578));
IKReal x581=((cj8)*(r21));
IKReal x582=((r20)*(sj8));
IKReal x583=((x581)+(x582));
IKReal x584=((cj7)*(r21)*(sj8));
IKReal x585=((cj7)*(cj8)*(r20));
IKReal x586=((r22)*(sj7));
IKReal x587=((x585)+(x586));
IKReal x588=((x584)+(((-1.00000000000000)*(x587))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x580) != 0)?((IKReal)1/(x580)):(IKReal)1.0e30))*(((((sj5)*(x588)))+(((cj5)*(x583)))))), ((((IKabs(x580) != 0)?((IKReal)1/(x580)):(IKReal)1.0e30))*(((((-1.00000000000000)*(sj5)*(x583)))+(((cj5)*(x588)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
IKReal x589=((IKabs(sj6) != 0)?((IKReal)1/(sj6)):(IKReal)1.0e30);
j5array[0]=IKatan2(((0.149443561208267)+(((0.317965023847377)*(cj7)*(npy)*(sj8)))+(((0.0286168521462639)*(cj7)))+(((-0.337837837837838)*(cj6)*(x589)))+(((-0.317965023847377)*(npz)*(sj7)))+(((-3.97456279809221)*(cj8)*(npy)*(x589)))+(((-0.317965023847377)*(cj7)*(cj8)*(npx)))+(((-3.97456279809221)*(npx)*(sj8)*(x589)))), ((-0.868044515103339)+(((-3.97456279809221)*(cj7)*(npy)*(sj8)))+(((-0.317965023847377)*(npx)*(sj8)*(x589)))+(((-0.317965023847377)*(cj8)*(npy)*(x589)))+(((-0.0270270270270270)*(cj6)*(x589)))+(((-0.357710651828299)*(cj7)))+(((3.97456279809221)*(npz)*(sj7)))+(((3.97456279809221)*(cj7)*(cj8)*(npx)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(cj6)*((sj5)*(sj5))))+(((-1.00000000000000)*(cj6)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[9];
evalcond[0]=((-3.14159265358979)+(IKfmod(((-1.57079632679490)+(3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((-0.0200000000000000)+(((npx)*(sj8)))+(((cj8)*(npy)))+(((0.250000000000000)*(sj5)))+(((0.0200000000000000)*(cj5))));
evalcond[2]=((((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[3]=((0.220000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((-0.0200000000000000)*(sj5)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[4]=((((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8))));
evalcond[5]=((0.0850000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
evalcond[6]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[7]=((1.00000000000000)+(((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
evalcond[8]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((cj3)*(cj8)*(r00)*(sj7))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x590=(cj5)*(cj5);
IKReal x591=(sj5)*(sj5);
IKReal x592=((x591)+(x590));
IKReal x593=((r12)*(sj3)*(sj7));
IKReal x594=((cj3)*(r02)*(sj7));
IKReal x595=((cj7)*(cj8)*(r10)*(sj3));
IKReal x596=((cj3)*(cj7)*(cj8)*(r00));
IKReal x597=((x596)+(x595)+(x594)+(x593));
IKReal x598=((cj3)*(cj7)*(r01)*(sj8));
IKReal x599=((cj7)*(r11)*(sj3)*(sj8));
IKReal x600=((x599)+(x598));
IKReal x601=((x597)+(((-1.00000000000000)*(x600))));
IKReal x602=((cj7)*(r21)*(sj8));
IKReal x603=((cj7)*(cj8)*(r20));
IKReal x604=((r22)*(sj7));
IKReal x605=((x603)+(x604));
IKReal x606=((x602)+(((-1.00000000000000)*(x605))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x592) != 0)?((IKReal)1/(x592)):(IKReal)1.0e30))*(((((cj5)*(x601)))+(((sj5)*(x606)))))), ((((IKabs(x592) != 0)?((IKReal)1/(x592)):(IKReal)1.0e30))*(((((cj5)*(x606)))+(((-1.00000000000000)*(sj5)*(x601)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x607=(cj5)*(cj5);
IKReal x608=(sj5)*(sj5);
IKReal x609=((x607)+(x608));
IKReal x610=((IKabs(x609) != 0)?((IKReal)1/(x609)):(IKReal)1.0e30);
IKReal x611=((cj3)*(cj8)*(r01));
IKReal x612=((cj8)*(r11)*(sj3));
IKReal x613=((cj3)*(r00)*(sj8));
IKReal x614=((r10)*(sj3)*(sj8));
IKReal x615=((x614)+(x611)+(x612)+(x613));
IKReal x616=((-1.00000000000000)*(x615));
IKReal x617=((cj8)*(r21));
IKReal x618=((r20)*(sj8));
IKReal x619=((x618)+(x617));
j4array[0]=IKatan2(((x610)*(((((-1.00000000000000)*(sj5)*(x616)))+(((cj5)*(x619)))))), ((x610)*(((((cj5)*(x616)))+(((sj5)*(x619)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x620=(cj5)*(cj5);
IKReal x621=(sj5)*(sj5);
IKReal x622=((x621)+(x620));
IKReal x623=((IKabs(x622) != 0)?((IKReal)1/(x622)):(IKReal)1.0e30);
IKReal x624=((cj7)*(r21)*(sj8));
IKReal x625=((cj7)*(cj8)*(r20));
IKReal x626=((r22)*(sj7));
IKReal x627=((x625)+(x626));
IKReal x628=((((-1.00000000000000)*(x627)))+(x624));
IKReal x629=((cj8)*(r21));
IKReal x630=((r20)*(sj8));
IKReal x631=((x629)+(x630));
j4array[0]=IKatan2(((x623)*(((((cj5)*(x631)))+(((-1.00000000000000)*(sj5)*(x628)))))), ((x623)*(((((sj5)*(x631)))+(((cj5)*(x628)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((0.0200000000000000)+(((-0.0200000000000000)*(cj5)))+(((npx)*(sj8)))+(((cj8)*(npy)))+(((-0.250000000000000)*(sj5))));
evalcond[2]=((((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[3]=((0.220000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((-0.0200000000000000)*(sj5)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[4]=((((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8))));
evalcond[5]=((-0.0850000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
evalcond[6]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[7]=((-1.00000000000000)+(((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
evalcond[8]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((cj3)*(cj8)*(r00)*(sj7))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x632=(cj5)*(cj5);
IKReal x633=(sj5)*(sj5);
IKReal x634=((x632)+(x633));
IKReal x635=((r12)*(sj3)*(sj7));
IKReal x636=((cj3)*(r02)*(sj7));
IKReal x637=((cj7)*(cj8)*(r10)*(sj3));
IKReal x638=((cj3)*(cj7)*(cj8)*(r00));
IKReal x639=((x636)+(x637)+(x635)+(x638));
IKReal x640=((cj3)*(cj7)*(r01)*(sj8));
IKReal x641=((cj7)*(r11)*(sj3)*(sj8));
IKReal x642=((x641)+(x640));
IKReal x643=((((-1.00000000000000)*(x642)))+(x639));
IKReal x644=((cj7)*(r21)*(sj8));
IKReal x645=((cj7)*(cj8)*(r20));
IKReal x646=((r22)*(sj7));
IKReal x647=((x646)+(x645));
IKReal x648=((((-1.00000000000000)*(x647)))+(x644));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x634) != 0)?((IKReal)1/(x634)):(IKReal)1.0e30))*(((((cj5)*(x643)))+(((sj5)*(x648)))))), ((((IKabs(x634) != 0)?((IKReal)1/(x634)):(IKReal)1.0e30))*(((((-1.00000000000000)*(sj5)*(x643)))+(((cj5)*(x648)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x649=((cj3)*(cj8)*(r01));
IKReal x650=((cj8)*(r11)*(sj3));
IKReal x651=((cj3)*(r00)*(sj8));
IKReal x652=((r10)*(sj3)*(sj8));
IKReal x653=((x649)+(x650)+(x651)+(x652));
IKReal x654=((-1.00000000000000)*(x653));
IKReal x655=((cj8)*(r21));
IKReal x656=((r20)*(sj8));
IKReal x657=((x655)+(x656));
IKReal x658=(cj5)*(cj5);
IKReal x659=(sj5)*(sj5);
IKReal x660=((x658)+(x659));
IKReal x661=((-1.00000000000000)*(x660));
IKReal x662=((IKabs(x661) != 0)?((IKReal)1/(x661)):(IKReal)1.0e30);
j4array[0]=IKatan2(((x662)*(((((cj5)*(x657)))+(((-1.00000000000000)*(sj5)*(x654)))))), ((x662)*(((((cj5)*(x654)))+(((sj5)*(x657)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x663=(cj5)*(cj5);
IKReal x664=(sj5)*(sj5);
IKReal x665=((x663)+(x664));
IKReal x666=((cj8)*(r21));
IKReal x667=((r20)*(sj8));
IKReal x668=((x667)+(x666));
IKReal x669=((cj7)*(r21)*(sj8));
IKReal x670=((cj7)*(cj8)*(r20));
IKReal x671=((r22)*(sj7));
IKReal x672=((x670)+(x671));
IKReal x673=((x669)+(((-1.00000000000000)*(x672))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x665) != 0)?((IKReal)1/(x665)):(IKReal)1.0e30))*(((((sj5)*(x673)))+(((cj5)*(x668)))))), ((((IKabs(x665) != 0)?((IKReal)1/(x665)):(IKReal)1.0e30))*(((((-1.00000000000000)*(sj5)*(x668)))+(((cj5)*(x673)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
evalcond[0]=((IKfmod(((3.14159265358979)+(j6)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[2]=((0.0850000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[3]=((1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[4]=((0.220000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((-0.0200000000000000)*(sj5)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[5]=((0.0200000000000000)+(((-0.0200000000000000)*(cj5)))+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7)))+(((-0.250000000000000)*(sj5))));
evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x674=((cj8)*(r10)*(sj3)*(sj7));
IKReal x675=((cj3)*(cj8)*(r00)*(sj7));
IKReal x676=((x674)+(x675));
IKReal x677=((cj7)*(r12)*(sj3));
IKReal x678=((cj3)*(cj7)*(r02));
IKReal x679=((cj3)*(r01)*(sj7)*(sj8));
IKReal x680=((r11)*(sj3)*(sj7)*(sj8));
IKReal x681=((x678)+(x679)+(x677)+(x680));
IKReal x682=((((-1.00000000000000)*(x681)))+(x676));
IKReal x683=((cj7)*(r22));
IKReal x684=((r21)*(sj7)*(sj8));
IKReal x685=((x683)+(x684));
IKReal x686=((cj8)*(r20)*(sj7));
IKReal x687=((((-1.00000000000000)*(x686)))+(x685));
IKReal x688=(cj5)*(cj5);
IKReal x689=(sj5)*(sj5);
IKReal x690=((x689)+(x688));
IKReal x691=((-1.00000000000000)*(x690));
IKReal x692=((IKabs(x691) != 0)?((IKReal)1/(x691)):(IKReal)1.0e30);
j4array[0]=IKatan2(((x692)*(((((cj5)*(x687)))+(((-1.00000000000000)*(sj5)*(x682)))))), ((x692)*(((((cj5)*(x682)))+(((sj5)*(x687)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x693=(cj5)*(cj5);
IKReal x694=(sj5)*(sj5);
IKReal x695=((x694)+(x693));
IKReal x696=((r12)*(sj3)*(sj7));
IKReal x697=((cj3)*(r02)*(sj7));
IKReal x698=((cj7)*(cj8)*(r10)*(sj3));
IKReal x699=((cj3)*(cj7)*(cj8)*(r00));
IKReal x700=((x696)+(x697)+(x698)+(x699));
IKReal x701=((cj3)*(cj7)*(r01)*(sj8));
IKReal x702=((cj7)*(r11)*(sj3)*(sj8));
IKReal x703=((x702)+(x701));
IKReal x704=((((-1.00000000000000)*(x703)))+(x700));
IKReal x705=((cj7)*(r21)*(sj8));
IKReal x706=((cj7)*(cj8)*(r20));
IKReal x707=((r22)*(sj7));
IKReal x708=((x706)+(x707));
IKReal x709=((((-1.00000000000000)*(x708)))+(x705));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x695) != 0)?((IKReal)1/(x695)):(IKReal)1.0e30))*(((((cj5)*(x704)))+(((sj5)*(x709)))))), ((((IKabs(x695) != 0)?((IKReal)1/(x695)):(IKReal)1.0e30))*(((((cj5)*(x709)))+(((-1.00000000000000)*(sj5)*(x704)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x710=(cj5)*(cj5);
IKReal x711=(sj5)*(sj5);
IKReal x712=((x711)+(x710));
IKReal x713=((cj7)*(r22));
IKReal x714=((r21)*(sj7)*(sj8));
IKReal x715=((x713)+(x714));
IKReal x716=((cj8)*(r20)*(sj7));
IKReal x717=((((-1.00000000000000)*(x716)))+(x715));
IKReal x718=((cj7)*(r21)*(sj8));
IKReal x719=((cj7)*(cj8)*(r20));
IKReal x720=((r22)*(sj7));
IKReal x721=((x719)+(x720));
IKReal x722=((((-1.00000000000000)*(x721)))+(x718));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x712) != 0)?((IKReal)1/(x712)):(IKReal)1.0e30))*(((((cj5)*(x717)))+(((sj5)*(x722)))))), ((((IKabs(x712) != 0)?((IKReal)1/(x712)):(IKReal)1.0e30))*(((((cj5)*(x722)))+(((-1.00000000000000)*(sj5)*(x717)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((-3.14159265358979)+(3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[2]=((-0.0850000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[3]=((-1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[4]=((0.220000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((-0.0200000000000000)*(sj5)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[5]=((-0.0200000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.250000000000000)*(sj5)))+(((0.0200000000000000)*(cj5)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x723=(cj5)*(cj5);
IKReal x724=(sj5)*(sj5);
IKReal x725=((x723)+(x724));
IKReal x726=((r12)*(sj3)*(sj7));
IKReal x727=((cj3)*(r02)*(sj7));
IKReal x728=((cj7)*(cj8)*(r10)*(sj3));
IKReal x729=((cj3)*(cj7)*(cj8)*(r00));
IKReal x730=((x726)+(x727)+(x728)+(x729));
IKReal x731=((cj3)*(cj7)*(r01)*(sj8));
IKReal x732=((cj7)*(r11)*(sj3)*(sj8));
IKReal x733=((x732)+(x731));
IKReal x734=((((-1.00000000000000)*(x733)))+(x730));
IKReal x735=((cj7)*(r21)*(sj8));
IKReal x736=((cj7)*(cj8)*(r20));
IKReal x737=((r22)*(sj7));
IKReal x738=((x737)+(x736));
IKReal x739=((((-1.00000000000000)*(x738)))+(x735));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x725) != 0)?((IKReal)1/(x725)):(IKReal)1.0e30))*(((((cj5)*(x734)))+(((sj5)*(x739)))))), ((((IKabs(x725) != 0)?((IKReal)1/(x725)):(IKReal)1.0e30))*(((((cj5)*(x739)))+(((-1.00000000000000)*(sj5)*(x734)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x740=(cj5)*(cj5);
IKReal x741=(sj5)*(sj5);
IKReal x742=((x740)+(x741));
IKReal x743=((IKabs(x742) != 0)?((IKReal)1/(x742)):(IKReal)1.0e30);
IKReal x744=((cj8)*(r10)*(sj3)*(sj7));
IKReal x745=((cj3)*(cj8)*(r00)*(sj7));
IKReal x746=((x744)+(x745));
IKReal x747=((cj7)*(r12)*(sj3));
IKReal x748=((cj3)*(cj7)*(r02));
IKReal x749=((cj3)*(r01)*(sj7)*(sj8));
IKReal x750=((r11)*(sj3)*(sj7)*(sj8));
IKReal x751=((x750)+(x747)+(x748)+(x749));
IKReal x752=((x746)+(((-1.00000000000000)*(x751))));
IKReal x753=((cj7)*(r22));
IKReal x754=((r21)*(sj7)*(sj8));
IKReal x755=((x754)+(x753));
IKReal x756=((cj8)*(r20)*(sj7));
IKReal x757=((x755)+(((-1.00000000000000)*(x756))));
j4array[0]=IKatan2(((x743)*(((((-1.00000000000000)*(sj5)*(x752)))+(((cj5)*(x757)))))), ((x743)*(((((cj5)*(x752)))+(((sj5)*(x757)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x758=(cj5)*(cj5);
IKReal x759=(sj5)*(sj5);
IKReal x760=((x759)+(x758));
IKReal x761=((IKabs(x760) != 0)?((IKReal)1/(x760)):(IKReal)1.0e30);
IKReal x762=((cj7)*(r22));
IKReal x763=((r21)*(sj7)*(sj8));
IKReal x764=((x762)+(x763));
IKReal x765=((cj8)*(r20)*(sj7));
IKReal x766=((((-1.00000000000000)*(x765)))+(x764));
IKReal x767=((cj7)*(r21)*(sj8));
IKReal x768=((cj7)*(cj8)*(r20));
IKReal x769=((r22)*(sj7));
IKReal x770=((x768)+(x769));
IKReal x771=((x767)+(((-1.00000000000000)*(x770))));
j4array[0]=IKatan2(((x761)*(((((-1.00000000000000)*(sj5)*(x771)))+(((cj5)*(x766)))))), ((x761)*(((((cj5)*(x771)))+(((sj5)*(x766)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x772=(cj5)*(cj5);
IKReal x773=((cj6)*(x772));
IKReal x774=(sj5)*(sj5);
IKReal x775=((cj6)*(x774));
IKReal x776=((x773)+(x775));
IKReal x777=((cj7)*(r21)*(sj8));
IKReal x778=((cj7)*(cj8)*(r20));
IKReal x779=((r22)*(sj7));
IKReal x780=((x779)+(x778));
IKReal x781=((((-1.00000000000000)*(x780)))+(x777));
IKReal x782=((cj7)*(r22));
IKReal x783=((r21)*(sj7)*(sj8));
IKReal x784=((x782)+(x783));
IKReal x785=((cj8)*(r20)*(sj7));
IKReal x786=((((-1.00000000000000)*(x785)))+(x784));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x776) != 0)?((IKReal)1/(x776)):(IKReal)1.0e30))*(((((cj6)*(sj5)*(x781)))+(((cj5)*(x786)))))), ((((IKabs(x776) != 0)?((IKReal)1/(x776)):(IKReal)1.0e30))*(((((-1.00000000000000)*(sj5)*(x786)))+(((cj5)*(cj6)*(x781)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x787=(cj5)*(cj5);
IKReal x788=((sj6)*(x787));
IKReal x789=(sj5)*(sj5);
IKReal x790=((sj6)*(x789));
IKReal x791=((x790)+(x788));
IKReal x792=((IKabs(x791) != 0)?((IKReal)1/(x791)):(IKReal)1.0e30);
IKReal x793=((cj3)*(cj8)*(r01));
IKReal x794=((cj8)*(r11)*(sj3));
IKReal x795=((cj3)*(r00)*(sj8));
IKReal x796=((r10)*(sj3)*(sj8));
IKReal x797=((x793)+(x795)+(x794)+(x796));
IKReal x798=((-1.00000000000000)*(x797));
IKReal x799=((cj8)*(r21));
IKReal x800=((r20)*(sj8));
IKReal x801=((x799)+(x800));
j4array[0]=IKatan2(((x792)*(((((-1.00000000000000)*(sj5)*(x798)))+(((cj5)*(x801)))))), ((x792)*(((((cj5)*(x798)))+(((sj5)*(x801)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x802=(cj5)*(cj5);
IKReal x803=((sj6)*(x802));
IKReal x804=(sj5)*(sj5);
IKReal x805=((sj6)*(x804));
IKReal x806=((x805)+(x803));
IKReal x807=((IKabs(x806) != 0)?((IKReal)1/(x806)):(IKReal)1.0e30);
IKReal x808=((cj7)*(r21)*(sj8));
IKReal x809=((cj7)*(cj8)*(r20));
IKReal x810=((r22)*(sj7));
IKReal x811=((x810)+(x809));
IKReal x812=((((-1.00000000000000)*(x811)))+(x808));
IKReal x813=((cj8)*(r21));
IKReal x814=((r20)*(sj8));
IKReal x815=((x814)+(x813));
j4array[0]=IKatan2(((x807)*(((((-1.00000000000000)*(sj5)*(sj6)*(x812)))+(((cj5)*(x815)))))), ((x807)*(((((sj5)*(x815)))+(((cj5)*(sj6)*(x812)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
IKReal x816=((IKabs(cj6) != 0)?((IKReal)1/(cj6)):(IKReal)1.0e30);
IKReal x817=((0.0900000000000000)*(cj7));
IKReal x818=((cj7)*(npy)*(sj8));
IKReal x819=((0.220000000000000)+(x818)+(x817));
IKReal x820=((npz)*(sj7));
IKReal x821=((cj7)*(cj8)*(npx));
IKReal x822=((x821)+(x820));
IKReal x823=((((-1.00000000000000)*(x822)))+(x819));
j5array[0]=IKatan2(((0.00158982511923688)*(x816)*(((((-2500.00000000000)*(cj8)*(npx)*(sj7)))+(((2500.00000000000)*(npy)*(sj7)*(sj8)))+(((225.000000000000)*(sj7)))+(((212.500000000000)*(sj6)))+(((2500.00000000000)*(cj7)*(npz)))+(((50.0000000000000)*(cj6)))+(((200.000000000000)*(cj6)*(x823)))))), ((0.00158982511923688)*(x816)*(((((18.0000000000000)*(sj7)))+(((200.000000000000)*(npy)*(sj7)*(sj8)))+(((-200.000000000000)*(cj8)*(npx)*(sj7)))+(((17.0000000000000)*(sj6)))+(((200.000000000000)*(cj7)*(npz)))+(((-2500.00000000000)*(cj6)*(x823)))+(((4.00000000000000)*(cj6)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(cj6)*((sj5)*(sj5))))+(((-1.00000000000000)*(cj6)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[9];
evalcond[0]=((-3.14159265358979)+(IKfmod(((-1.57079632679490)+(3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((-0.0200000000000000)+(((npx)*(sj8)))+(((cj8)*(npy)))+(((0.250000000000000)*(sj5)))+(((0.0200000000000000)*(cj5))));
evalcond[2]=((((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[3]=((0.220000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((-0.0200000000000000)*(sj5)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[4]=((((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8))));
evalcond[5]=((0.0850000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
evalcond[6]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[7]=((1.00000000000000)+(((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
evalcond[8]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((cj3)*(cj8)*(r00)*(sj7))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x824=(cj5)*(cj5);
IKReal x825=(sj5)*(sj5);
IKReal x826=((x825)+(x824));
IKReal x827=((r12)*(sj3)*(sj7));
IKReal x828=((cj3)*(r02)*(sj7));
IKReal x829=((cj7)*(cj8)*(r10)*(sj3));
IKReal x830=((cj3)*(cj7)*(cj8)*(r00));
IKReal x831=((x829)+(x828)+(x827)+(x830));
IKReal x832=((cj3)*(cj7)*(r01)*(sj8));
IKReal x833=((cj7)*(r11)*(sj3)*(sj8));
IKReal x834=((x832)+(x833));
IKReal x835=((((-1.00000000000000)*(x834)))+(x831));
IKReal x836=((cj7)*(r21)*(sj8));
IKReal x837=((cj7)*(cj8)*(r20));
IKReal x838=((r22)*(sj7));
IKReal x839=((x837)+(x838));
IKReal x840=((((-1.00000000000000)*(x839)))+(x836));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x826) != 0)?((IKReal)1/(x826)):(IKReal)1.0e30))*(((((cj5)*(x835)))+(((sj5)*(x840)))))), ((((IKabs(x826) != 0)?((IKReal)1/(x826)):(IKReal)1.0e30))*(((((cj5)*(x840)))+(((-1.00000000000000)*(sj5)*(x835)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x841=(cj5)*(cj5);
IKReal x842=(sj5)*(sj5);
IKReal x843=((x841)+(x842));
IKReal x844=((IKabs(x843) != 0)?((IKReal)1/(x843)):(IKReal)1.0e30);
IKReal x845=((cj3)*(cj8)*(r01));
IKReal x846=((cj8)*(r11)*(sj3));
IKReal x847=((cj3)*(r00)*(sj8));
IKReal x848=((r10)*(sj3)*(sj8));
IKReal x849=((x845)+(x847)+(x846)+(x848));
IKReal x850=((-1.00000000000000)*(x849));
IKReal x851=((cj8)*(r21));
IKReal x852=((r20)*(sj8));
IKReal x853=((x852)+(x851));
j4array[0]=IKatan2(((x844)*(((((-1.00000000000000)*(sj5)*(x850)))+(((cj5)*(x853)))))), ((x844)*(((((sj5)*(x853)))+(((cj5)*(x850)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x854=(cj5)*(cj5);
IKReal x855=(sj5)*(sj5);
IKReal x856=((x854)+(x855));
IKReal x857=((IKabs(x856) != 0)?((IKReal)1/(x856)):(IKReal)1.0e30);
IKReal x858=((cj7)*(r21)*(sj8));
IKReal x859=((cj7)*(cj8)*(r20));
IKReal x860=((r22)*(sj7));
IKReal x861=((x859)+(x860));
IKReal x862=((((-1.00000000000000)*(x861)))+(x858));
IKReal x863=((cj8)*(r21));
IKReal x864=((r20)*(sj8));
IKReal x865=((x864)+(x863));
j4array[0]=IKatan2(((x857)*(((((-1.00000000000000)*(sj5)*(x862)))+(((cj5)*(x865)))))), ((x857)*(((((sj5)*(x865)))+(((cj5)*(x862)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((0.0200000000000000)+(((-0.0200000000000000)*(cj5)))+(((npx)*(sj8)))+(((cj8)*(npy)))+(((-0.250000000000000)*(sj5))));
evalcond[2]=((((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[3]=((0.220000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((-0.0200000000000000)*(sj5)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[4]=((((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8))));
evalcond[5]=((-0.0850000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
evalcond[6]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[7]=((-1.00000000000000)+(((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
evalcond[8]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((cj3)*(cj8)*(r00)*(sj7))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x866=(cj5)*(cj5);
IKReal x867=(sj5)*(sj5);
IKReal x868=((x867)+(x866));
IKReal x869=((r12)*(sj3)*(sj7));
IKReal x870=((cj3)*(r02)*(sj7));
IKReal x871=((cj7)*(cj8)*(r10)*(sj3));
IKReal x872=((cj3)*(cj7)*(cj8)*(r00));
IKReal x873=((x869)+(x870)+(x871)+(x872));
IKReal x874=((cj3)*(cj7)*(r01)*(sj8));
IKReal x875=((cj7)*(r11)*(sj3)*(sj8));
IKReal x876=((x874)+(x875));
IKReal x877=((x873)+(((-1.00000000000000)*(x876))));
IKReal x878=((cj7)*(r21)*(sj8));
IKReal x879=((cj7)*(cj8)*(r20));
IKReal x880=((r22)*(sj7));
IKReal x881=((x879)+(x880));
IKReal x882=((((-1.00000000000000)*(x881)))+(x878));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x868) != 0)?((IKReal)1/(x868)):(IKReal)1.0e30))*(((((sj5)*(x882)))+(((cj5)*(x877)))))), ((((IKabs(x868) != 0)?((IKReal)1/(x868)):(IKReal)1.0e30))*(((((-1.00000000000000)*(sj5)*(x877)))+(((cj5)*(x882)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x883=((cj3)*(cj8)*(r01));
IKReal x884=((cj8)*(r11)*(sj3));
IKReal x885=((cj3)*(r00)*(sj8));
IKReal x886=((r10)*(sj3)*(sj8));
IKReal x887=((x885)+(x884)+(x886)+(x883));
IKReal x888=((-1.00000000000000)*(x887));
IKReal x889=((cj8)*(r21));
IKReal x890=((r20)*(sj8));
IKReal x891=((x889)+(x890));
IKReal x892=(cj5)*(cj5);
IKReal x893=(sj5)*(sj5);
IKReal x894=((x892)+(x893));
IKReal x895=((-1.00000000000000)*(x894));
IKReal x896=((IKabs(x895) != 0)?((IKReal)1/(x895)):(IKReal)1.0e30);
j4array[0]=IKatan2(((x896)*(((((cj5)*(x891)))+(((-1.00000000000000)*(sj5)*(x888)))))), ((x896)*(((((sj5)*(x891)))+(((cj5)*(x888)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x897=(cj5)*(cj5);
IKReal x898=(sj5)*(sj5);
IKReal x899=((x897)+(x898));
IKReal x900=((cj8)*(r21));
IKReal x901=((r20)*(sj8));
IKReal x902=((x900)+(x901));
IKReal x903=((cj7)*(r21)*(sj8));
IKReal x904=((cj7)*(cj8)*(r20));
IKReal x905=((r22)*(sj7));
IKReal x906=((x904)+(x905));
IKReal x907=((((-1.00000000000000)*(x906)))+(x903));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x899) != 0)?((IKReal)1/(x899)):(IKReal)1.0e30))*(((((sj5)*(x907)))+(((cj5)*(x902)))))), ((((IKabs(x899) != 0)?((IKReal)1/(x899)):(IKReal)1.0e30))*(((((-1.00000000000000)*(sj5)*(x902)))+(((cj5)*(x907)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
evalcond[0]=((IKfmod(((3.14159265358979)+(j6)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[2]=((0.0850000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[3]=((1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[4]=((0.220000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((-0.0200000000000000)*(sj5)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[5]=((0.0200000000000000)+(((-0.0200000000000000)*(cj5)))+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7)))+(((-0.250000000000000)*(sj5))));
evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x908=((cj8)*(r10)*(sj3)*(sj7));
IKReal x909=((cj3)*(cj8)*(r00)*(sj7));
IKReal x910=((x908)+(x909));
IKReal x911=((cj7)*(r12)*(sj3));
IKReal x912=((cj3)*(cj7)*(r02));
IKReal x913=((cj3)*(r01)*(sj7)*(sj8));
IKReal x914=((r11)*(sj3)*(sj7)*(sj8));
IKReal x915=((x913)+(x912)+(x911)+(x914));
IKReal x916=((((-1.00000000000000)*(x915)))+(x910));
IKReal x917=((cj7)*(r22));
IKReal x918=((r21)*(sj7)*(sj8));
IKReal x919=((x918)+(x917));
IKReal x920=((cj8)*(r20)*(sj7));
IKReal x921=((((-1.00000000000000)*(x920)))+(x919));
IKReal x922=(cj5)*(cj5);
IKReal x923=(sj5)*(sj5);
IKReal x924=((x922)+(x923));
IKReal x925=((-1.00000000000000)*(x924));
IKReal x926=((IKabs(x925) != 0)?((IKReal)1/(x925)):(IKReal)1.0e30);
j4array[0]=IKatan2(((x926)*(((((-1.00000000000000)*(sj5)*(x916)))+(((cj5)*(x921)))))), ((x926)*(((((sj5)*(x921)))+(((cj5)*(x916)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x927=(cj5)*(cj5);
IKReal x928=(sj5)*(sj5);
IKReal x929=((x928)+(x927));
IKReal x930=((r12)*(sj3)*(sj7));
IKReal x931=((cj3)*(r02)*(sj7));
IKReal x932=((cj7)*(cj8)*(r10)*(sj3));
IKReal x933=((cj3)*(cj7)*(cj8)*(r00));
IKReal x934=((x931)+(x930)+(x933)+(x932));
IKReal x935=((cj3)*(cj7)*(r01)*(sj8));
IKReal x936=((cj7)*(r11)*(sj3)*(sj8));
IKReal x937=((x935)+(x936));
IKReal x938=((x934)+(((-1.00000000000000)*(x937))));
IKReal x939=((cj7)*(r21)*(sj8));
IKReal x940=((cj7)*(cj8)*(r20));
IKReal x941=((r22)*(sj7));
IKReal x942=((x940)+(x941));
IKReal x943=((((-1.00000000000000)*(x942)))+(x939));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x929) != 0)?((IKReal)1/(x929)):(IKReal)1.0e30))*(((((cj5)*(x938)))+(((sj5)*(x943)))))), ((((IKabs(x929) != 0)?((IKReal)1/(x929)):(IKReal)1.0e30))*(((((-1.00000000000000)*(sj5)*(x938)))+(((cj5)*(x943)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x944=(cj5)*(cj5);
IKReal x945=(sj5)*(sj5);
IKReal x946=((x944)+(x945));
IKReal x947=((cj7)*(r22));
IKReal x948=((r21)*(sj7)*(sj8));
IKReal x949=((x948)+(x947));
IKReal x950=((cj8)*(r20)*(sj7));
IKReal x951=((((-1.00000000000000)*(x950)))+(x949));
IKReal x952=((cj7)*(r21)*(sj8));
IKReal x953=((cj7)*(cj8)*(r20));
IKReal x954=((r22)*(sj7));
IKReal x955=((x954)+(x953));
IKReal x956=((((-1.00000000000000)*(x955)))+(x952));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x946) != 0)?((IKReal)1/(x946)):(IKReal)1.0e30))*(((((cj5)*(x951)))+(((sj5)*(x956)))))), ((((IKabs(x946) != 0)?((IKReal)1/(x946)):(IKReal)1.0e30))*(((((cj5)*(x956)))+(((-1.00000000000000)*(sj5)*(x951)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((-3.14159265358979)+(3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[2]=((-0.0850000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[3]=((-1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[4]=((0.220000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((-0.0200000000000000)*(sj5)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[5]=((-0.0200000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.250000000000000)*(sj5)))+(((0.0200000000000000)*(cj5)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x957=(cj5)*(cj5);
IKReal x958=(sj5)*(sj5);
IKReal x959=((x958)+(x957));
IKReal x960=((r12)*(sj3)*(sj7));
IKReal x961=((cj3)*(r02)*(sj7));
IKReal x962=((cj7)*(cj8)*(r10)*(sj3));
IKReal x963=((cj3)*(cj7)*(cj8)*(r00));
IKReal x964=((x962)+(x963)+(x960)+(x961));
IKReal x965=((cj3)*(cj7)*(r01)*(sj8));
IKReal x966=((cj7)*(r11)*(sj3)*(sj8));
IKReal x967=((x966)+(x965));
IKReal x968=((x964)+(((-1.00000000000000)*(x967))));
IKReal x969=((cj7)*(r21)*(sj8));
IKReal x970=((cj7)*(cj8)*(r20));
IKReal x971=((r22)*(sj7));
IKReal x972=((x971)+(x970));
IKReal x973=((x969)+(((-1.00000000000000)*(x972))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x959) != 0)?((IKReal)1/(x959)):(IKReal)1.0e30))*(((((sj5)*(x973)))+(((cj5)*(x968)))))), ((((IKabs(x959) != 0)?((IKReal)1/(x959)):(IKReal)1.0e30))*(((((cj5)*(x973)))+(((-1.00000000000000)*(sj5)*(x968)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x974=(cj5)*(cj5);
IKReal x975=(sj5)*(sj5);
IKReal x976=((x975)+(x974));
IKReal x977=((IKabs(x976) != 0)?((IKReal)1/(x976)):(IKReal)1.0e30);
IKReal x978=((cj8)*(r10)*(sj3)*(sj7));
IKReal x979=((cj3)*(cj8)*(r00)*(sj7));
IKReal x980=((x979)+(x978));
IKReal x981=((cj7)*(r12)*(sj3));
IKReal x982=((cj3)*(cj7)*(r02));
IKReal x983=((cj3)*(r01)*(sj7)*(sj8));
IKReal x984=((r11)*(sj3)*(sj7)*(sj8));
IKReal x985=((x984)+(x981)+(x982)+(x983));
IKReal x986=((((-1.00000000000000)*(x985)))+(x980));
IKReal x987=((cj7)*(r22));
IKReal x988=((r21)*(sj7)*(sj8));
IKReal x989=((x988)+(x987));
IKReal x990=((cj8)*(r20)*(sj7));
IKReal x991=((((-1.00000000000000)*(x990)))+(x989));
j4array[0]=IKatan2(((x977)*(((((cj5)*(x991)))+(((-1.00000000000000)*(sj5)*(x986)))))), ((x977)*(((((cj5)*(x986)))+(((sj5)*(x991)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x992=(cj5)*(cj5);
IKReal x993=(sj5)*(sj5);
IKReal x994=((x993)+(x992));
IKReal x995=((IKabs(x994) != 0)?((IKReal)1/(x994)):(IKReal)1.0e30);
IKReal x996=((cj7)*(r22));
IKReal x997=((r21)*(sj7)*(sj8));
IKReal x998=((x997)+(x996));
IKReal x999=((cj8)*(r20)*(sj7));
IKReal x1000=((((-1.00000000000000)*(x999)))+(x998));
IKReal x1001=((cj7)*(r21)*(sj8));
IKReal x1002=((cj7)*(cj8)*(r20));
IKReal x1003=((r22)*(sj7));
IKReal x1004=((x1003)+(x1002));
IKReal x1005=((x1001)+(((-1.00000000000000)*(x1004))));
j4array[0]=IKatan2(((x995)*(((((cj5)*(x1000)))+(((-1.00000000000000)*(sj5)*(x1005)))))), ((x995)*(((((cj5)*(x1005)))+(((sj5)*(x1000)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1006=(cj5)*(cj5);
IKReal x1007=((cj6)*(x1006));
IKReal x1008=(sj5)*(sj5);
IKReal x1009=((cj6)*(x1008));
IKReal x1010=((x1009)+(x1007));
IKReal x1011=((cj7)*(r21)*(sj8));
IKReal x1012=((cj7)*(cj8)*(r20));
IKReal x1013=((r22)*(sj7));
IKReal x1014=((x1012)+(x1013));
IKReal x1015=((x1011)+(((-1.00000000000000)*(x1014))));
IKReal x1016=((cj7)*(r22));
IKReal x1017=((r21)*(sj7)*(sj8));
IKReal x1018=((x1016)+(x1017));
IKReal x1019=((cj8)*(r20)*(sj7));
IKReal x1020=((x1018)+(((-1.00000000000000)*(x1019))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x1010) != 0)?((IKReal)1/(x1010)):(IKReal)1.0e30))*(((((cj6)*(sj5)*(x1015)))+(((cj5)*(x1020)))))), ((((IKabs(x1010) != 0)?((IKReal)1/(x1010)):(IKReal)1.0e30))*(((((cj5)*(cj6)*(x1015)))+(((-1.00000000000000)*(sj5)*(x1020)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1021=(cj5)*(cj5);
IKReal x1022=((sj6)*(x1021));
IKReal x1023=(sj5)*(sj5);
IKReal x1024=((sj6)*(x1023));
IKReal x1025=((x1024)+(x1022));
IKReal x1026=((IKabs(x1025) != 0)?((IKReal)1/(x1025)):(IKReal)1.0e30);
IKReal x1027=((cj3)*(cj8)*(r01));
IKReal x1028=((cj8)*(r11)*(sj3));
IKReal x1029=((cj3)*(r00)*(sj8));
IKReal x1030=((r10)*(sj3)*(sj8));
IKReal x1031=((x1030)+(x1027)+(x1029)+(x1028));
IKReal x1032=((-1.00000000000000)*(x1031));
IKReal x1033=((cj8)*(r21));
IKReal x1034=((r20)*(sj8));
IKReal x1035=((x1033)+(x1034));
j4array[0]=IKatan2(((x1026)*(((((cj5)*(x1035)))+(((-1.00000000000000)*(sj5)*(x1032)))))), ((x1026)*(((((cj5)*(x1032)))+(((sj5)*(x1035)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1036=(cj5)*(cj5);
IKReal x1037=((sj6)*(x1036));
IKReal x1038=(sj5)*(sj5);
IKReal x1039=((sj6)*(x1038));
IKReal x1040=((x1039)+(x1037));
IKReal x1041=((IKabs(x1040) != 0)?((IKReal)1/(x1040)):(IKReal)1.0e30);
IKReal x1042=((cj7)*(r21)*(sj8));
IKReal x1043=((cj7)*(cj8)*(r20));
IKReal x1044=((r22)*(sj7));
IKReal x1045=((x1043)+(x1044));
IKReal x1046=((x1042)+(((-1.00000000000000)*(x1045))));
IKReal x1047=((cj8)*(r21));
IKReal x1048=((r20)*(sj8));
IKReal x1049=((x1047)+(x1048));
j4array[0]=IKatan2(((x1041)*(((((-1.00000000000000)*(sj5)*(sj6)*(x1046)))+(((cj5)*(x1049)))))), ((x1041)*(((((sj5)*(x1049)))+(((cj5)*(sj6)*(x1046)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x1050=(sj8)*(sj8);
IKReal x1051=(cj8)*(cj8);
IKReal x1052=((cj7)*(r01)*(r10)*(x1050));
IKReal x1053=((cj7)*(r01)*(r10)*(x1051));
IKReal x1054=((r00)*(r12)*(sj7)*(sj8));
IKReal x1055=((cj8)*(r01)*(r12)*(sj7));
IKReal x1056=((x1052)+(x1053)+(x1054)+(x1055));
IKReal x1057=((cj7)*(r00)*(r11)*(x1050));
IKReal x1058=((cj7)*(r00)*(r11)*(x1051));
IKReal x1059=((cj8)*(r02)*(r11)*(sj7));
IKReal x1060=((r02)*(r10)*(sj7)*(sj8));
IKReal x1061=((x1057)+(x1058)+(x1059)+(x1060));
j3array[0]=IKatan2(((cj6)*(((IKabs(((((-1.00000000000000)*(x1056)))+(x1061))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x1056)))+(x1061)))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((cj6)*(((IKabs(((x1056)+(((-1.00000000000000)*(x1061))))) != 0)?((IKReal)1/(((x1056)+(((-1.00000000000000)*(x1061)))))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
dummyeval[0]=cj6;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj6;
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[7];
evalcond[0]=((IKfmod(((3.14159265358979)+(j6)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[2]=((0.0850000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[3]=((1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[4]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
evalcond[5]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[6]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
j5array[0]=IKatan2(((0.149443561208267)+(((0.317965023847377)*(cj7)*(npy)*(sj8)))+(((3.97456279809221)*(npy)*(sj7)*(sj8)))+(((-3.97456279809221)*(cj8)*(npx)*(sj7)))+(((0.0286168521462639)*(cj7)))+(((-0.317965023847377)*(npz)*(sj7)))+(((-0.317965023847377)*(cj7)*(cj8)*(npx)))+(((0.357710651828299)*(sj7)))+(((3.97456279809221)*(cj7)*(npz)))), ((-0.868044515103339)+(((0.317965023847377)*(cj7)*(npz)))+(((0.0286168521462639)*(sj7)))+(((-3.97456279809221)*(cj7)*(npy)*(sj8)))+(((0.317965023847377)*(npy)*(sj7)*(sj8)))+(((-0.317965023847377)*(cj8)*(npx)*(sj7)))+(((-0.357710651828299)*(cj7)))+(((3.97456279809221)*(npz)*(sj7)))+(((3.97456279809221)*(cj7)*(cj8)*(npx)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1062=((cj8)*(r10)*(sj3)*(sj7));
IKReal x1063=((cj3)*(cj8)*(r00)*(sj7));
IKReal x1064=((x1063)+(x1062));
IKReal x1065=((cj7)*(r12)*(sj3));
IKReal x1066=((cj3)*(cj7)*(r02));
IKReal x1067=((cj3)*(r01)*(sj7)*(sj8));
IKReal x1068=((r11)*(sj3)*(sj7)*(sj8));
IKReal x1069=((x1068)+(x1065)+(x1067)+(x1066));
IKReal x1070=((x1064)+(((-1.00000000000000)*(x1069))));
IKReal x1071=((cj7)*(r22));
IKReal x1072=((r21)*(sj7)*(sj8));
IKReal x1073=((x1072)+(x1071));
IKReal x1074=((cj8)*(r20)*(sj7));
IKReal x1075=((x1073)+(((-1.00000000000000)*(x1074))));
IKReal x1076=(cj5)*(cj5);
IKReal x1077=(sj5)*(sj5);
IKReal x1078=((x1076)+(x1077));
IKReal x1079=((-1.00000000000000)*(x1078));
IKReal x1080=((IKabs(x1079) != 0)?((IKReal)1/(x1079)):(IKReal)1.0e30);
j4array[0]=IKatan2(((x1080)*(((((-1.00000000000000)*(sj5)*(x1070)))+(((cj5)*(x1075)))))), ((x1080)*(((((sj5)*(x1075)))+(((cj5)*(x1070)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1081=(cj5)*(cj5);
IKReal x1082=(sj5)*(sj5);
IKReal x1083=((x1082)+(x1081));
IKReal x1084=((r12)*(sj3)*(sj7));
IKReal x1085=((cj3)*(r02)*(sj7));
IKReal x1086=((cj7)*(cj8)*(r10)*(sj3));
IKReal x1087=((cj3)*(cj7)*(cj8)*(r00));
IKReal x1088=((x1087)+(x1086)+(x1085)+(x1084));
IKReal x1089=((cj3)*(cj7)*(r01)*(sj8));
IKReal x1090=((cj7)*(r11)*(sj3)*(sj8));
IKReal x1091=((x1090)+(x1089));
IKReal x1092=((x1088)+(((-1.00000000000000)*(x1091))));
IKReal x1093=((cj7)*(r21)*(sj8));
IKReal x1094=((cj7)*(cj8)*(r20));
IKReal x1095=((r22)*(sj7));
IKReal x1096=((x1094)+(x1095));
IKReal x1097=((x1093)+(((-1.00000000000000)*(x1096))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x1083) != 0)?((IKReal)1/(x1083)):(IKReal)1.0e30))*(((((cj5)*(x1092)))+(((sj5)*(x1097)))))), ((((IKabs(x1083) != 0)?((IKReal)1/(x1083)):(IKReal)1.0e30))*(((((cj5)*(x1097)))+(((-1.00000000000000)*(sj5)*(x1092)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1098=(cj5)*(cj5);
IKReal x1099=(sj5)*(sj5);
IKReal x1100=((x1098)+(x1099));
IKReal x1101=((cj7)*(r22));
IKReal x1102=((r21)*(sj7)*(sj8));
IKReal x1103=((x1102)+(x1101));
IKReal x1104=((cj8)*(r20)*(sj7));
IKReal x1105=((x1103)+(((-1.00000000000000)*(x1104))));
IKReal x1106=((cj7)*(r21)*(sj8));
IKReal x1107=((cj7)*(cj8)*(r20));
IKReal x1108=((r22)*(sj7));
IKReal x1109=((x1107)+(x1108));
IKReal x1110=((x1106)+(((-1.00000000000000)*(x1109))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x1100) != 0)?((IKReal)1/(x1100)):(IKReal)1.0e30))*(((((cj5)*(x1105)))+(((sj5)*(x1110)))))), ((((IKabs(x1100) != 0)?((IKReal)1/(x1100)):(IKReal)1.0e30))*(((((-1.00000000000000)*(sj5)*(x1105)))+(((cj5)*(x1110)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((-3.14159265358979)+(3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[2]=((-0.0850000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[3]=((-1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[4]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
evalcond[5]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[6]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
j5array[0]=IKatan2(((0.149443561208267)+(((0.317965023847377)*(cj7)*(npy)*(sj8)))+(((-3.97456279809221)*(npy)*(sj7)*(sj8)))+(((-0.357710651828299)*(sj7)))+(((0.0286168521462639)*(cj7)))+(((-3.97456279809221)*(cj7)*(npz)))+(((-0.317965023847377)*(npz)*(sj7)))+(((-0.317965023847377)*(cj7)*(cj8)*(npx)))+(((3.97456279809221)*(cj8)*(npx)*(sj7)))), ((-0.868044515103339)+(((-3.97456279809221)*(cj7)*(npy)*(sj8)))+(((-0.317965023847377)*(npy)*(sj7)*(sj8)))+(((-0.357710651828299)*(cj7)))+(((0.317965023847377)*(cj8)*(npx)*(sj7)))+(((-0.0286168521462639)*(sj7)))+(((-0.317965023847377)*(cj7)*(npz)))+(((3.97456279809221)*(npz)*(sj7)))+(((3.97456279809221)*(cj7)*(cj8)*(npx)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1111=(cj5)*(cj5);
IKReal x1112=(sj5)*(sj5);
IKReal x1113=((x1111)+(x1112));
IKReal x1114=((r12)*(sj3)*(sj7));
IKReal x1115=((cj3)*(r02)*(sj7));
IKReal x1116=((cj7)*(cj8)*(r10)*(sj3));
IKReal x1117=((cj3)*(cj7)*(cj8)*(r00));
IKReal x1118=((x1115)+(x1114)+(x1117)+(x1116));
IKReal x1119=((cj3)*(cj7)*(r01)*(sj8));
IKReal x1120=((cj7)*(r11)*(sj3)*(sj8));
IKReal x1121=((x1119)+(x1120));
IKReal x1122=((x1118)+(((-1.00000000000000)*(x1121))));
IKReal x1123=((cj7)*(r21)*(sj8));
IKReal x1124=((cj7)*(cj8)*(r20));
IKReal x1125=((r22)*(sj7));
IKReal x1126=((x1124)+(x1125));
IKReal x1127=((x1123)+(((-1.00000000000000)*(x1126))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x1113) != 0)?((IKReal)1/(x1113)):(IKReal)1.0e30))*(((((cj5)*(x1122)))+(((sj5)*(x1127)))))), ((((IKabs(x1113) != 0)?((IKReal)1/(x1113)):(IKReal)1.0e30))*(((((cj5)*(x1127)))+(((-1.00000000000000)*(sj5)*(x1122)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1128=(cj5)*(cj5);
IKReal x1129=(sj5)*(sj5);
IKReal x1130=((x1128)+(x1129));
IKReal x1131=((IKabs(x1130) != 0)?((IKReal)1/(x1130)):(IKReal)1.0e30);
IKReal x1132=((cj8)*(r10)*(sj3)*(sj7));
IKReal x1133=((cj3)*(cj8)*(r00)*(sj7));
IKReal x1134=((x1133)+(x1132));
IKReal x1135=((cj7)*(r12)*(sj3));
IKReal x1136=((cj3)*(cj7)*(r02));
IKReal x1137=((cj3)*(r01)*(sj7)*(sj8));
IKReal x1138=((r11)*(sj3)*(sj7)*(sj8));
IKReal x1139=((x1138)+(x1137)+(x1136)+(x1135));
IKReal x1140=((x1134)+(((-1.00000000000000)*(x1139))));
IKReal x1141=((cj7)*(r22));
IKReal x1142=((r21)*(sj7)*(sj8));
IKReal x1143=((x1142)+(x1141));
IKReal x1144=((cj8)*(r20)*(sj7));
IKReal x1145=((x1143)+(((-1.00000000000000)*(x1144))));
j4array[0]=IKatan2(((x1131)*(((((-1.00000000000000)*(sj5)*(x1140)))+(((cj5)*(x1145)))))), ((x1131)*(((((sj5)*(x1145)))+(((cj5)*(x1140)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1146=(cj5)*(cj5);
IKReal x1147=(sj5)*(sj5);
IKReal x1148=((x1146)+(x1147));
IKReal x1149=((IKabs(x1148) != 0)?((IKReal)1/(x1148)):(IKReal)1.0e30);
IKReal x1150=((cj7)*(r22));
IKReal x1151=((r21)*(sj7)*(sj8));
IKReal x1152=((x1151)+(x1150));
IKReal x1153=((cj8)*(r20)*(sj7));
IKReal x1154=((x1152)+(((-1.00000000000000)*(x1153))));
IKReal x1155=((cj7)*(r21)*(sj8));
IKReal x1156=((cj7)*(cj8)*(r20));
IKReal x1157=((r22)*(sj7));
IKReal x1158=((x1157)+(x1156));
IKReal x1159=((x1155)+(((-1.00000000000000)*(x1158))));
j4array[0]=IKatan2(((x1149)*(((((-1.00000000000000)*(sj5)*(x1159)))+(((cj5)*(x1154)))))), ((x1149)*(((((sj5)*(x1154)))+(((cj5)*(x1159)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((-1.57079632679490)+(3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[2]=((((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8))));
evalcond[3]=((0.0850000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
evalcond[4]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[5]=((1.00000000000000)+(((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
evalcond[6]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((cj3)*(cj8)*(r00)*(sj7))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
j5array[0]=IKatan2(((0.149443561208267)+(((0.317965023847377)*(cj7)*(npy)*(sj8)))+(((0.0286168521462639)*(cj7)))+(((-0.317965023847377)*(npz)*(sj7)))+(((-0.317965023847377)*(cj7)*(cj8)*(npx)))+(((-3.97456279809221)*(cj8)*(npy)))+(((-3.97456279809221)*(npx)*(sj8)))), ((-0.868044515103339)+(((-3.97456279809221)*(cj7)*(npy)*(sj8)))+(((-0.357710651828299)*(cj7)))+(((-0.317965023847377)*(npx)*(sj8)))+(((-0.317965023847377)*(cj8)*(npy)))+(((3.97456279809221)*(npz)*(sj7)))+(((3.97456279809221)*(cj7)*(cj8)*(npx)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1160=(cj5)*(cj5);
IKReal x1161=(sj5)*(sj5);
IKReal x1162=((x1160)+(x1161));
IKReal x1163=((r12)*(sj3)*(sj7));
IKReal x1164=((cj3)*(r02)*(sj7));
IKReal x1165=((cj7)*(cj8)*(r10)*(sj3));
IKReal x1166=((cj3)*(cj7)*(cj8)*(r00));
IKReal x1167=((x1164)+(x1165)+(x1166)+(x1163));
IKReal x1168=((cj3)*(cj7)*(r01)*(sj8));
IKReal x1169=((cj7)*(r11)*(sj3)*(sj8));
IKReal x1170=((x1168)+(x1169));
IKReal x1171=((x1167)+(((-1.00000000000000)*(x1170))));
IKReal x1172=((cj7)*(r21)*(sj8));
IKReal x1173=((cj7)*(cj8)*(r20));
IKReal x1174=((r22)*(sj7));
IKReal x1175=((x1174)+(x1173));
IKReal x1176=((x1172)+(((-1.00000000000000)*(x1175))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x1162) != 0)?((IKReal)1/(x1162)):(IKReal)1.0e30))*(((((cj5)*(x1171)))+(((sj5)*(x1176)))))), ((((IKabs(x1162) != 0)?((IKReal)1/(x1162)):(IKReal)1.0e30))*(((((-1.00000000000000)*(sj5)*(x1171)))+(((cj5)*(x1176)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1177=(cj5)*(cj5);
IKReal x1178=(sj5)*(sj5);
IKReal x1179=((x1177)+(x1178));
IKReal x1180=((IKabs(x1179) != 0)?((IKReal)1/(x1179)):(IKReal)1.0e30);
IKReal x1181=((cj3)*(cj8)*(r01));
IKReal x1182=((cj8)*(r11)*(sj3));
IKReal x1183=((cj3)*(r00)*(sj8));
IKReal x1184=((r10)*(sj3)*(sj8));
IKReal x1185=((x1184)+(x1182)+(x1183)+(x1181));
IKReal x1186=((-1.00000000000000)*(x1185));
IKReal x1187=((cj8)*(r21));
IKReal x1188=((r20)*(sj8));
IKReal x1189=((x1188)+(x1187));
j4array[0]=IKatan2(((x1180)*(((((-1.00000000000000)*(sj5)*(x1186)))+(((cj5)*(x1189)))))), ((x1180)*(((((cj5)*(x1186)))+(((sj5)*(x1189)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1190=(cj5)*(cj5);
IKReal x1191=(sj5)*(sj5);
IKReal x1192=((x1191)+(x1190));
IKReal x1193=((IKabs(x1192) != 0)?((IKReal)1/(x1192)):(IKReal)1.0e30);
IKReal x1194=((cj7)*(r21)*(sj8));
IKReal x1195=((cj7)*(cj8)*(r20));
IKReal x1196=((r22)*(sj7));
IKReal x1197=((x1195)+(x1196));
IKReal x1198=((x1194)+(((-1.00000000000000)*(x1197))));
IKReal x1199=((cj8)*(r21));
IKReal x1200=((r20)*(sj8));
IKReal x1201=((x1199)+(x1200));
j4array[0]=IKatan2(((x1193)*(((((cj5)*(x1201)))+(((-1.00000000000000)*(sj5)*(x1198)))))), ((x1193)*(((((cj5)*(x1198)))+(((sj5)*(x1201)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[2]=((((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8))));
evalcond[3]=((-0.0850000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
evalcond[4]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[5]=((-1.00000000000000)+(((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
evalcond[6]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((cj3)*(cj8)*(r00)*(sj7))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
j5array[0]=IKatan2(((0.149443561208267)+(((0.317965023847377)*(cj7)*(npy)*(sj8)))+(((0.0286168521462639)*(cj7)))+(((3.97456279809221)*(npx)*(sj8)))+(((-0.317965023847377)*(npz)*(sj7)))+(((-0.317965023847377)*(cj7)*(cj8)*(npx)))+(((3.97456279809221)*(cj8)*(npy)))), ((-0.868044515103339)+(((-3.97456279809221)*(cj7)*(npy)*(sj8)))+(((0.317965023847377)*(npx)*(sj8)))+(((-0.357710651828299)*(cj7)))+(((0.317965023847377)*(cj8)*(npy)))+(((3.97456279809221)*(npz)*(sj7)))+(((3.97456279809221)*(cj7)*(cj8)*(npx)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1202=(cj5)*(cj5);
IKReal x1203=(sj5)*(sj5);
IKReal x1204=((x1203)+(x1202));
IKReal x1205=((r12)*(sj3)*(sj7));
IKReal x1206=((cj3)*(r02)*(sj7));
IKReal x1207=((cj7)*(cj8)*(r10)*(sj3));
IKReal x1208=((cj3)*(cj7)*(cj8)*(r00));
IKReal x1209=((x1208)+(x1205)+(x1207)+(x1206));
IKReal x1210=((cj3)*(cj7)*(r01)*(sj8));
IKReal x1211=((cj7)*(r11)*(sj3)*(sj8));
IKReal x1212=((x1210)+(x1211));
IKReal x1213=((x1209)+(((-1.00000000000000)*(x1212))));
IKReal x1214=((cj7)*(r21)*(sj8));
IKReal x1215=((cj7)*(cj8)*(r20));
IKReal x1216=((r22)*(sj7));
IKReal x1217=((x1216)+(x1215));
IKReal x1218=((x1214)+(((-1.00000000000000)*(x1217))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x1204) != 0)?((IKReal)1/(x1204)):(IKReal)1.0e30))*(((((cj5)*(x1213)))+(((sj5)*(x1218)))))), ((((IKabs(x1204) != 0)?((IKReal)1/(x1204)):(IKReal)1.0e30))*(((((cj5)*(x1218)))+(((-1.00000000000000)*(sj5)*(x1213)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1219=((cj3)*(cj8)*(r01));
IKReal x1220=((cj8)*(r11)*(sj3));
IKReal x1221=((cj3)*(r00)*(sj8));
IKReal x1222=((r10)*(sj3)*(sj8));
IKReal x1223=((x1222)+(x1221)+(x1220)+(x1219));
IKReal x1224=((-1.00000000000000)*(x1223));
IKReal x1225=((cj8)*(r21));
IKReal x1226=((r20)*(sj8));
IKReal x1227=((x1226)+(x1225));
IKReal x1228=(cj5)*(cj5);
IKReal x1229=(sj5)*(sj5);
IKReal x1230=((x1229)+(x1228));
IKReal x1231=((-1.00000000000000)*(x1230));
IKReal x1232=((IKabs(x1231) != 0)?((IKReal)1/(x1231)):(IKReal)1.0e30);
j4array[0]=IKatan2(((x1232)*(((((cj5)*(x1227)))+(((-1.00000000000000)*(sj5)*(x1224)))))), ((x1232)*(((((sj5)*(x1227)))+(((cj5)*(x1224)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1233=(cj5)*(cj5);
IKReal x1234=(sj5)*(sj5);
IKReal x1235=((x1234)+(x1233));
IKReal x1236=((cj8)*(r21));
IKReal x1237=((r20)*(sj8));
IKReal x1238=((x1236)+(x1237));
IKReal x1239=((cj7)*(r21)*(sj8));
IKReal x1240=((cj7)*(cj8)*(r20));
IKReal x1241=((r22)*(sj7));
IKReal x1242=((x1241)+(x1240));
IKReal x1243=((x1239)+(((-1.00000000000000)*(x1242))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x1235) != 0)?((IKReal)1/(x1235)):(IKReal)1.0e30))*(((((cj5)*(x1238)))+(((sj5)*(x1243)))))), ((((IKabs(x1235) != 0)?((IKReal)1/(x1235)):(IKReal)1.0e30))*(((((cj5)*(x1243)))+(((-1.00000000000000)*(sj5)*(x1238)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
IKReal x1244=((IKabs(sj6) != 0)?((IKReal)1/(sj6)):(IKReal)1.0e30);
j5array[0]=IKatan2(((0.149443561208267)+(((0.317965023847377)*(cj7)*(npy)*(sj8)))+(((-0.337837837837838)*(cj6)*(x1244)))+(((0.0286168521462639)*(cj7)))+(((-0.317965023847377)*(npz)*(sj7)))+(((-0.317965023847377)*(cj7)*(cj8)*(npx)))+(((-3.97456279809221)*(cj8)*(npy)*(x1244)))+(((-3.97456279809221)*(npx)*(sj8)*(x1244)))), ((-0.868044515103339)+(((-0.317965023847377)*(npx)*(sj8)*(x1244)))+(((-3.97456279809221)*(cj7)*(npy)*(sj8)))+(((-0.0270270270270270)*(cj6)*(x1244)))+(((-0.357710651828299)*(cj7)))+(((3.97456279809221)*(npz)*(sj7)))+(((-0.317965023847377)*(cj8)*(npy)*(x1244)))+(((3.97456279809221)*(cj7)*(cj8)*(npx)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(cj6)*((sj5)*(sj5))))+(((-1.00000000000000)*(cj6)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[9];
evalcond[0]=((-3.14159265358979)+(IKfmod(((-1.57079632679490)+(3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((-0.0200000000000000)+(((npx)*(sj8)))+(((cj8)*(npy)))+(((0.250000000000000)*(sj5)))+(((0.0200000000000000)*(cj5))));
evalcond[2]=((((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[3]=((0.220000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((-0.0200000000000000)*(sj5)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[4]=((((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8))));
evalcond[5]=((0.0850000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
evalcond[6]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[7]=((1.00000000000000)+(((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
evalcond[8]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((cj3)*(cj8)*(r00)*(sj7))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1245=(cj5)*(cj5);
IKReal x1246=(sj5)*(sj5);
IKReal x1247=((x1245)+(x1246));
IKReal x1248=((r12)*(sj3)*(sj7));
IKReal x1249=((cj3)*(r02)*(sj7));
IKReal x1250=((cj7)*(cj8)*(r10)*(sj3));
IKReal x1251=((cj3)*(cj7)*(cj8)*(r00));
IKReal x1252=((x1249)+(x1248)+(x1250)+(x1251));
IKReal x1253=((cj3)*(cj7)*(r01)*(sj8));
IKReal x1254=((cj7)*(r11)*(sj3)*(sj8));
IKReal x1255=((x1254)+(x1253));
IKReal x1256=((((-1.00000000000000)*(x1255)))+(x1252));
IKReal x1257=((cj7)*(r21)*(sj8));
IKReal x1258=((cj7)*(cj8)*(r20));
IKReal x1259=((r22)*(sj7));
IKReal x1260=((x1258)+(x1259));
IKReal x1261=((x1257)+(((-1.00000000000000)*(x1260))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x1247) != 0)?((IKReal)1/(x1247)):(IKReal)1.0e30))*(((((sj5)*(x1261)))+(((cj5)*(x1256)))))), ((((IKabs(x1247) != 0)?((IKReal)1/(x1247)):(IKReal)1.0e30))*(((((-1.00000000000000)*(sj5)*(x1256)))+(((cj5)*(x1261)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1262=(cj5)*(cj5);
IKReal x1263=(sj5)*(sj5);
IKReal x1264=((x1263)+(x1262));
IKReal x1265=((IKabs(x1264) != 0)?((IKReal)1/(x1264)):(IKReal)1.0e30);
IKReal x1266=((cj3)*(cj8)*(r01));
IKReal x1267=((cj8)*(r11)*(sj3));
IKReal x1268=((cj3)*(r00)*(sj8));
IKReal x1269=((r10)*(sj3)*(sj8));
IKReal x1270=((x1269)+(x1268)+(x1267)+(x1266));
IKReal x1271=((-1.00000000000000)*(x1270));
IKReal x1272=((cj8)*(r21));
IKReal x1273=((r20)*(sj8));
IKReal x1274=((x1272)+(x1273));
j4array[0]=IKatan2(((x1265)*(((((-1.00000000000000)*(sj5)*(x1271)))+(((cj5)*(x1274)))))), ((x1265)*(((((cj5)*(x1271)))+(((sj5)*(x1274)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1275=(cj5)*(cj5);
IKReal x1276=(sj5)*(sj5);
IKReal x1277=((x1275)+(x1276));
IKReal x1278=((IKabs(x1277) != 0)?((IKReal)1/(x1277)):(IKReal)1.0e30);
IKReal x1279=((cj7)*(r21)*(sj8));
IKReal x1280=((cj7)*(cj8)*(r20));
IKReal x1281=((r22)*(sj7));
IKReal x1282=((x1281)+(x1280));
IKReal x1283=((x1279)+(((-1.00000000000000)*(x1282))));
IKReal x1284=((cj8)*(r21));
IKReal x1285=((r20)*(sj8));
IKReal x1286=((x1285)+(x1284));
j4array[0]=IKatan2(((x1278)*(((((cj5)*(x1286)))+(((-1.00000000000000)*(sj5)*(x1283)))))), ((x1278)*(((((cj5)*(x1283)))+(((sj5)*(x1286)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((0.0200000000000000)+(((-0.0200000000000000)*(cj5)))+(((npx)*(sj8)))+(((cj8)*(npy)))+(((-0.250000000000000)*(sj5))));
evalcond[2]=((((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[3]=((0.220000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((-0.0200000000000000)*(sj5)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[4]=((((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8))));
evalcond[5]=((-0.0850000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
evalcond[6]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[7]=((-1.00000000000000)+(((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
evalcond[8]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((cj3)*(cj8)*(r00)*(sj7))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1287=(cj5)*(cj5);
IKReal x1288=(sj5)*(sj5);
IKReal x1289=((x1287)+(x1288));
IKReal x1290=((r12)*(sj3)*(sj7));
IKReal x1291=((cj3)*(r02)*(sj7));
IKReal x1292=((cj7)*(cj8)*(r10)*(sj3));
IKReal x1293=((cj3)*(cj7)*(cj8)*(r00));
IKReal x1294=((x1292)+(x1293)+(x1290)+(x1291));
IKReal x1295=((cj3)*(cj7)*(r01)*(sj8));
IKReal x1296=((cj7)*(r11)*(sj3)*(sj8));
IKReal x1297=((x1296)+(x1295));
IKReal x1298=((x1294)+(((-1.00000000000000)*(x1297))));
IKReal x1299=((cj7)*(r21)*(sj8));
IKReal x1300=((cj7)*(cj8)*(r20));
IKReal x1301=((r22)*(sj7));
IKReal x1302=((x1300)+(x1301));
IKReal x1303=((x1299)+(((-1.00000000000000)*(x1302))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x1289) != 0)?((IKReal)1/(x1289)):(IKReal)1.0e30))*(((((sj5)*(x1303)))+(((cj5)*(x1298)))))), ((((IKabs(x1289) != 0)?((IKReal)1/(x1289)):(IKReal)1.0e30))*(((((cj5)*(x1303)))+(((-1.00000000000000)*(sj5)*(x1298)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1304=((cj3)*(cj8)*(r01));
IKReal x1305=((cj8)*(r11)*(sj3));
IKReal x1306=((cj3)*(r00)*(sj8));
IKReal x1307=((r10)*(sj3)*(sj8));
IKReal x1308=((x1304)+(x1305)+(x1306)+(x1307));
IKReal x1309=((-1.00000000000000)*(x1308));
IKReal x1310=((cj8)*(r21));
IKReal x1311=((r20)*(sj8));
IKReal x1312=((x1311)+(x1310));
IKReal x1313=(cj5)*(cj5);
IKReal x1314=(sj5)*(sj5);
IKReal x1315=((x1314)+(x1313));
IKReal x1316=((-1.00000000000000)*(x1315));
IKReal x1317=((IKabs(x1316) != 0)?((IKReal)1/(x1316)):(IKReal)1.0e30);
j4array[0]=IKatan2(((x1317)*(((((cj5)*(x1312)))+(((-1.00000000000000)*(sj5)*(x1309)))))), ((x1317)*(((((sj5)*(x1312)))+(((cj5)*(x1309)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1318=(cj5)*(cj5);
IKReal x1319=(sj5)*(sj5);
IKReal x1320=((x1319)+(x1318));
IKReal x1321=((cj8)*(r21));
IKReal x1322=((r20)*(sj8));
IKReal x1323=((x1322)+(x1321));
IKReal x1324=((cj7)*(r21)*(sj8));
IKReal x1325=((cj7)*(cj8)*(r20));
IKReal x1326=((r22)*(sj7));
IKReal x1327=((x1326)+(x1325));
IKReal x1328=((x1324)+(((-1.00000000000000)*(x1327))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x1320) != 0)?((IKReal)1/(x1320)):(IKReal)1.0e30))*(((((cj5)*(x1323)))+(((sj5)*(x1328)))))), ((((IKabs(x1320) != 0)?((IKReal)1/(x1320)):(IKReal)1.0e30))*(((((cj5)*(x1328)))+(((-1.00000000000000)*(sj5)*(x1323)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
evalcond[0]=((IKfmod(((3.14159265358979)+(j6)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[2]=((0.0850000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[3]=((1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[4]=((0.220000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((-0.0200000000000000)*(sj5)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[5]=((0.0200000000000000)+(((-0.0200000000000000)*(cj5)))+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7)))+(((-0.250000000000000)*(sj5))));
evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1329=((cj8)*(r10)*(sj3)*(sj7));
IKReal x1330=((cj3)*(cj8)*(r00)*(sj7));
IKReal x1331=((x1329)+(x1330));
IKReal x1332=((cj7)*(r12)*(sj3));
IKReal x1333=((cj3)*(cj7)*(r02));
IKReal x1334=((cj3)*(r01)*(sj7)*(sj8));
IKReal x1335=((r11)*(sj3)*(sj7)*(sj8));
IKReal x1336=((x1335)+(x1334)+(x1333)+(x1332));
IKReal x1337=((x1331)+(((-1.00000000000000)*(x1336))));
IKReal x1338=((cj7)*(r22));
IKReal x1339=((r21)*(sj7)*(sj8));
IKReal x1340=((x1339)+(x1338));
IKReal x1341=((cj8)*(r20)*(sj7));
IKReal x1342=((x1340)+(((-1.00000000000000)*(x1341))));
IKReal x1343=(cj5)*(cj5);
IKReal x1344=(sj5)*(sj5);
IKReal x1345=((x1343)+(x1344));
IKReal x1346=((-1.00000000000000)*(x1345));
IKReal x1347=((IKabs(x1346) != 0)?((IKReal)1/(x1346)):(IKReal)1.0e30);
j4array[0]=IKatan2(((x1347)*(((((cj5)*(x1342)))+(((-1.00000000000000)*(sj5)*(x1337)))))), ((x1347)*(((((sj5)*(x1342)))+(((cj5)*(x1337)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1348=(cj5)*(cj5);
IKReal x1349=(sj5)*(sj5);
IKReal x1350=((x1348)+(x1349));
IKReal x1351=((r12)*(sj3)*(sj7));
IKReal x1352=((cj3)*(r02)*(sj7));
IKReal x1353=((cj7)*(cj8)*(r10)*(sj3));
IKReal x1354=((cj3)*(cj7)*(cj8)*(r00));
IKReal x1355=((x1353)+(x1352)+(x1351)+(x1354));
IKReal x1356=((cj3)*(cj7)*(r01)*(sj8));
IKReal x1357=((cj7)*(r11)*(sj3)*(sj8));
IKReal x1358=((x1357)+(x1356));
IKReal x1359=((x1355)+(((-1.00000000000000)*(x1358))));
IKReal x1360=((cj7)*(r21)*(sj8));
IKReal x1361=((cj7)*(cj8)*(r20));
IKReal x1362=((r22)*(sj7));
IKReal x1363=((x1362)+(x1361));
IKReal x1364=((x1360)+(((-1.00000000000000)*(x1363))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x1350) != 0)?((IKReal)1/(x1350)):(IKReal)1.0e30))*(((((cj5)*(x1359)))+(((sj5)*(x1364)))))), ((((IKabs(x1350) != 0)?((IKReal)1/(x1350)):(IKReal)1.0e30))*(((((-1.00000000000000)*(sj5)*(x1359)))+(((cj5)*(x1364)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1365=(cj5)*(cj5);
IKReal x1366=(sj5)*(sj5);
IKReal x1367=((x1366)+(x1365));
IKReal x1368=((cj7)*(r22));
IKReal x1369=((r21)*(sj7)*(sj8));
IKReal x1370=((x1368)+(x1369));
IKReal x1371=((cj8)*(r20)*(sj7));
IKReal x1372=((x1370)+(((-1.00000000000000)*(x1371))));
IKReal x1373=((cj7)*(r21)*(sj8));
IKReal x1374=((cj7)*(cj8)*(r20));
IKReal x1375=((r22)*(sj7));
IKReal x1376=((x1375)+(x1374));
IKReal x1377=((x1373)+(((-1.00000000000000)*(x1376))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x1367) != 0)?((IKReal)1/(x1367)):(IKReal)1.0e30))*(((((sj5)*(x1377)))+(((cj5)*(x1372)))))), ((((IKabs(x1367) != 0)?((IKReal)1/(x1367)):(IKReal)1.0e30))*(((((cj5)*(x1377)))+(((-1.00000000000000)*(sj5)*(x1372)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((-3.14159265358979)+(3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[2]=((-0.0850000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[3]=((-1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[4]=((0.220000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((-0.0200000000000000)*(sj5)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[5]=((-0.0200000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.250000000000000)*(sj5)))+(((0.0200000000000000)*(cj5)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1378=(cj5)*(cj5);
IKReal x1379=(sj5)*(sj5);
IKReal x1380=((x1379)+(x1378));
IKReal x1381=((r12)*(sj3)*(sj7));
IKReal x1382=((cj3)*(r02)*(sj7));
IKReal x1383=((cj7)*(cj8)*(r10)*(sj3));
IKReal x1384=((cj3)*(cj7)*(cj8)*(r00));
IKReal x1385=((x1384)+(x1381)+(x1382)+(x1383));
IKReal x1386=((cj3)*(cj7)*(r01)*(sj8));
IKReal x1387=((cj7)*(r11)*(sj3)*(sj8));
IKReal x1388=((x1386)+(x1387));
IKReal x1389=((((-1.00000000000000)*(x1388)))+(x1385));
IKReal x1390=((cj7)*(r21)*(sj8));
IKReal x1391=((cj7)*(cj8)*(r20));
IKReal x1392=((r22)*(sj7));
IKReal x1393=((x1392)+(x1391));
IKReal x1394=((x1390)+(((-1.00000000000000)*(x1393))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x1380) != 0)?((IKReal)1/(x1380)):(IKReal)1.0e30))*(((((cj5)*(x1389)))+(((sj5)*(x1394)))))), ((((IKabs(x1380) != 0)?((IKReal)1/(x1380)):(IKReal)1.0e30))*(((((-1.00000000000000)*(sj5)*(x1389)))+(((cj5)*(x1394)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1395=(cj5)*(cj5);
IKReal x1396=(sj5)*(sj5);
IKReal x1397=((x1396)+(x1395));
IKReal x1398=((IKabs(x1397) != 0)?((IKReal)1/(x1397)):(IKReal)1.0e30);
IKReal x1399=((cj8)*(r10)*(sj3)*(sj7));
IKReal x1400=((cj3)*(cj8)*(r00)*(sj7));
IKReal x1401=((x1399)+(x1400));
IKReal x1402=((cj7)*(r12)*(sj3));
IKReal x1403=((cj3)*(cj7)*(r02));
IKReal x1404=((cj3)*(r01)*(sj7)*(sj8));
IKReal x1405=((r11)*(sj3)*(sj7)*(sj8));
IKReal x1406=((x1403)+(x1402)+(x1405)+(x1404));
IKReal x1407=((((-1.00000000000000)*(x1406)))+(x1401));
IKReal x1408=((cj7)*(r22));
IKReal x1409=((r21)*(sj7)*(sj8));
IKReal x1410=((x1409)+(x1408));
IKReal x1411=((cj8)*(r20)*(sj7));
IKReal x1412=((((-1.00000000000000)*(x1411)))+(x1410));
j4array[0]=IKatan2(((x1398)*(((((cj5)*(x1412)))+(((-1.00000000000000)*(sj5)*(x1407)))))), ((x1398)*(((((sj5)*(x1412)))+(((cj5)*(x1407)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1413=(cj5)*(cj5);
IKReal x1414=(sj5)*(sj5);
IKReal x1415=((x1413)+(x1414));
IKReal x1416=((IKabs(x1415) != 0)?((IKReal)1/(x1415)):(IKReal)1.0e30);
IKReal x1417=((cj7)*(r22));
IKReal x1418=((r21)*(sj7)*(sj8));
IKReal x1419=((x1418)+(x1417));
IKReal x1420=((cj8)*(r20)*(sj7));
IKReal x1421=((x1419)+(((-1.00000000000000)*(x1420))));
IKReal x1422=((cj7)*(r21)*(sj8));
IKReal x1423=((cj7)*(cj8)*(r20));
IKReal x1424=((r22)*(sj7));
IKReal x1425=((x1423)+(x1424));
IKReal x1426=((x1422)+(((-1.00000000000000)*(x1425))));
j4array[0]=IKatan2(((x1416)*(((((-1.00000000000000)*(sj5)*(x1426)))+(((cj5)*(x1421)))))), ((x1416)*(((((sj5)*(x1421)))+(((cj5)*(x1426)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1427=(cj5)*(cj5);
IKReal x1428=((cj6)*(x1427));
IKReal x1429=(sj5)*(sj5);
IKReal x1430=((cj6)*(x1429));
IKReal x1431=((x1428)+(x1430));
IKReal x1432=((cj7)*(r21)*(sj8));
IKReal x1433=((cj7)*(cj8)*(r20));
IKReal x1434=((r22)*(sj7));
IKReal x1435=((x1434)+(x1433));
IKReal x1436=((((-1.00000000000000)*(x1435)))+(x1432));
IKReal x1437=((cj7)*(r22));
IKReal x1438=((r21)*(sj7)*(sj8));
IKReal x1439=((x1437)+(x1438));
IKReal x1440=((cj8)*(r20)*(sj7));
IKReal x1441=((x1439)+(((-1.00000000000000)*(x1440))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x1431) != 0)?((IKReal)1/(x1431)):(IKReal)1.0e30))*(((((cj6)*(sj5)*(x1436)))+(((cj5)*(x1441)))))), ((((IKabs(x1431) != 0)?((IKReal)1/(x1431)):(IKReal)1.0e30))*(((((-1.00000000000000)*(sj5)*(x1441)))+(((cj5)*(cj6)*(x1436)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1442=(cj5)*(cj5);
IKReal x1443=((sj6)*(x1442));
IKReal x1444=(sj5)*(sj5);
IKReal x1445=((sj6)*(x1444));
IKReal x1446=((x1445)+(x1443));
IKReal x1447=((IKabs(x1446) != 0)?((IKReal)1/(x1446)):(IKReal)1.0e30);
IKReal x1448=((cj3)*(cj8)*(r01));
IKReal x1449=((cj8)*(r11)*(sj3));
IKReal x1450=((cj3)*(r00)*(sj8));
IKReal x1451=((r10)*(sj3)*(sj8));
IKReal x1452=((x1450)+(x1451)+(x1449)+(x1448));
IKReal x1453=((-1.00000000000000)*(x1452));
IKReal x1454=((cj8)*(r21));
IKReal x1455=((r20)*(sj8));
IKReal x1456=((x1454)+(x1455));
j4array[0]=IKatan2(((x1447)*(((((cj5)*(x1456)))+(((-1.00000000000000)*(sj5)*(x1453)))))), ((x1447)*(((((cj5)*(x1453)))+(((sj5)*(x1456)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1457=(cj5)*(cj5);
IKReal x1458=((sj6)*(x1457));
IKReal x1459=(sj5)*(sj5);
IKReal x1460=((sj6)*(x1459));
IKReal x1461=((x1460)+(x1458));
IKReal x1462=((IKabs(x1461) != 0)?((IKReal)1/(x1461)):(IKReal)1.0e30);
IKReal x1463=((cj7)*(r21)*(sj8));
IKReal x1464=((cj7)*(cj8)*(r20));
IKReal x1465=((r22)*(sj7));
IKReal x1466=((x1465)+(x1464));
IKReal x1467=((((-1.00000000000000)*(x1466)))+(x1463));
IKReal x1468=((cj8)*(r21));
IKReal x1469=((r20)*(sj8));
IKReal x1470=((x1469)+(x1468));
j4array[0]=IKatan2(((x1462)*(((((cj5)*(x1470)))+(((-1.00000000000000)*(sj5)*(sj6)*(x1467)))))), ((x1462)*(((((sj5)*(x1470)))+(((cj5)*(sj6)*(x1467)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
IKReal x1471=((IKabs(cj6) != 0)?((IKReal)1/(cj6)):(IKReal)1.0e30);
IKReal x1472=((0.0900000000000000)*(cj7));
IKReal x1473=((cj7)*(npy)*(sj8));
IKReal x1474=((0.220000000000000)+(x1472)+(x1473));
IKReal x1475=((npz)*(sj7));
IKReal x1476=((cj7)*(cj8)*(npx));
IKReal x1477=((x1476)+(x1475));
IKReal x1478=((x1474)+(((-1.00000000000000)*(x1477))));
j5array[0]=IKatan2(((0.00158982511923688)*(x1471)*(((((-2500.00000000000)*(cj8)*(npx)*(sj7)))+(((2500.00000000000)*(npy)*(sj7)*(sj8)))+(((225.000000000000)*(sj7)))+(((212.500000000000)*(sj6)))+(((200.000000000000)*(cj6)*(x1478)))+(((2500.00000000000)*(cj7)*(npz)))+(((50.0000000000000)*(cj6)))))), ((0.00158982511923688)*(x1471)*(((((18.0000000000000)*(sj7)))+(((200.000000000000)*(npy)*(sj7)*(sj8)))+(((-200.000000000000)*(cj8)*(npx)*(sj7)))+(((-2500.00000000000)*(cj6)*(x1478)))+(((17.0000000000000)*(sj6)))+(((200.000000000000)*(cj7)*(npz)))+(((4.00000000000000)*(cj6)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(cj6)*((sj5)*(sj5))))+(((-1.00000000000000)*(cj6)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[9];
evalcond[0]=((-3.14159265358979)+(IKfmod(((-1.57079632679490)+(3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((-0.0200000000000000)+(((npx)*(sj8)))+(((cj8)*(npy)))+(((0.250000000000000)*(sj5)))+(((0.0200000000000000)*(cj5))));
evalcond[2]=((((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[3]=((0.220000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((-0.0200000000000000)*(sj5)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[4]=((((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8))));
evalcond[5]=((0.0850000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
evalcond[6]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[7]=((1.00000000000000)+(((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
evalcond[8]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((cj3)*(cj8)*(r00)*(sj7))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1479=(cj5)*(cj5);
IKReal x1480=(sj5)*(sj5);
IKReal x1481=((x1479)+(x1480));
IKReal x1482=((r12)*(sj3)*(sj7));
IKReal x1483=((cj3)*(r02)*(sj7));
IKReal x1484=((cj7)*(cj8)*(r10)*(sj3));
IKReal x1485=((cj3)*(cj7)*(cj8)*(r00));
IKReal x1486=((x1483)+(x1482)+(x1485)+(x1484));
IKReal x1487=((cj3)*(cj7)*(r01)*(sj8));
IKReal x1488=((cj7)*(r11)*(sj3)*(sj8));
IKReal x1489=((x1487)+(x1488));
IKReal x1490=((((-1.00000000000000)*(x1489)))+(x1486));
IKReal x1491=((cj7)*(r21)*(sj8));
IKReal x1492=((cj7)*(cj8)*(r20));
IKReal x1493=((r22)*(sj7));
IKReal x1494=((x1492)+(x1493));
IKReal x1495=((((-1.00000000000000)*(x1494)))+(x1491));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x1481) != 0)?((IKReal)1/(x1481)):(IKReal)1.0e30))*(((((sj5)*(x1495)))+(((cj5)*(x1490)))))), ((((IKabs(x1481) != 0)?((IKReal)1/(x1481)):(IKReal)1.0e30))*(((((-1.00000000000000)*(sj5)*(x1490)))+(((cj5)*(x1495)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1496=(cj5)*(cj5);
IKReal x1497=(sj5)*(sj5);
IKReal x1498=((x1496)+(x1497));
IKReal x1499=((IKabs(x1498) != 0)?((IKReal)1/(x1498)):(IKReal)1.0e30);
IKReal x1500=((cj3)*(cj8)*(r01));
IKReal x1501=((cj8)*(r11)*(sj3));
IKReal x1502=((cj3)*(r00)*(sj8));
IKReal x1503=((r10)*(sj3)*(sj8));
IKReal x1504=((x1502)+(x1503)+(x1500)+(x1501));
IKReal x1505=((-1.00000000000000)*(x1504));
IKReal x1506=((cj8)*(r21));
IKReal x1507=((r20)*(sj8));
IKReal x1508=((x1506)+(x1507));
j4array[0]=IKatan2(((x1499)*(((((-1.00000000000000)*(sj5)*(x1505)))+(((cj5)*(x1508)))))), ((x1499)*(((((sj5)*(x1508)))+(((cj5)*(x1505)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1509=(cj5)*(cj5);
IKReal x1510=(sj5)*(sj5);
IKReal x1511=((x1509)+(x1510));
IKReal x1512=((IKabs(x1511) != 0)?((IKReal)1/(x1511)):(IKReal)1.0e30);
IKReal x1513=((cj7)*(r21)*(sj8));
IKReal x1514=((cj7)*(cj8)*(r20));
IKReal x1515=((r22)*(sj7));
IKReal x1516=((x1515)+(x1514));
IKReal x1517=((((-1.00000000000000)*(x1516)))+(x1513));
IKReal x1518=((cj8)*(r21));
IKReal x1519=((r20)*(sj8));
IKReal x1520=((x1519)+(x1518));
j4array[0]=IKatan2(((x1512)*(((((-1.00000000000000)*(sj5)*(x1517)))+(((cj5)*(x1520)))))), ((x1512)*(((((sj5)*(x1520)))+(((cj5)*(x1517)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((0.0200000000000000)+(((-0.0200000000000000)*(cj5)))+(((npx)*(sj8)))+(((cj8)*(npy)))+(((-0.250000000000000)*(sj5))));
evalcond[2]=((((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[3]=((0.220000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((-0.0200000000000000)*(sj5)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[4]=((((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8))));
evalcond[5]=((-0.0850000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
evalcond[6]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[7]=((-1.00000000000000)+(((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
evalcond[8]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((cj3)*(cj8)*(r00)*(sj7))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1521=(cj5)*(cj5);
IKReal x1522=(sj5)*(sj5);
IKReal x1523=((x1521)+(x1522));
IKReal x1524=((r12)*(sj3)*(sj7));
IKReal x1525=((cj3)*(r02)*(sj7));
IKReal x1526=((cj7)*(cj8)*(r10)*(sj3));
IKReal x1527=((cj3)*(cj7)*(cj8)*(r00));
IKReal x1528=((x1524)+(x1525)+(x1526)+(x1527));
IKReal x1529=((cj3)*(cj7)*(r01)*(sj8));
IKReal x1530=((cj7)*(r11)*(sj3)*(sj8));
IKReal x1531=((x1529)+(x1530));
IKReal x1532=((((-1.00000000000000)*(x1531)))+(x1528));
IKReal x1533=((cj7)*(r21)*(sj8));
IKReal x1534=((cj7)*(cj8)*(r20));
IKReal x1535=((r22)*(sj7));
IKReal x1536=((x1535)+(x1534));
IKReal x1537=((((-1.00000000000000)*(x1536)))+(x1533));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x1523) != 0)?((IKReal)1/(x1523)):(IKReal)1.0e30))*(((((sj5)*(x1537)))+(((cj5)*(x1532)))))), ((((IKabs(x1523) != 0)?((IKReal)1/(x1523)):(IKReal)1.0e30))*(((((cj5)*(x1537)))+(((-1.00000000000000)*(sj5)*(x1532)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1538=((cj3)*(cj8)*(r01));
IKReal x1539=((cj8)*(r11)*(sj3));
IKReal x1540=((cj3)*(r00)*(sj8));
IKReal x1541=((r10)*(sj3)*(sj8));
IKReal x1542=((x1540)+(x1541)+(x1539)+(x1538));
IKReal x1543=((-1.00000000000000)*(x1542));
IKReal x1544=((cj8)*(r21));
IKReal x1545=((r20)*(sj8));
IKReal x1546=((x1544)+(x1545));
IKReal x1547=(cj5)*(cj5);
IKReal x1548=(sj5)*(sj5);
IKReal x1549=((x1547)+(x1548));
IKReal x1550=((-1.00000000000000)*(x1549));
IKReal x1551=((IKabs(x1550) != 0)?((IKReal)1/(x1550)):(IKReal)1.0e30);
j4array[0]=IKatan2(((x1551)*(((((cj5)*(x1546)))+(((-1.00000000000000)*(sj5)*(x1543)))))), ((x1551)*(((((cj5)*(x1543)))+(((sj5)*(x1546)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1552=(cj5)*(cj5);
IKReal x1553=(sj5)*(sj5);
IKReal x1554=((x1553)+(x1552));
IKReal x1555=((cj8)*(r21));
IKReal x1556=((r20)*(sj8));
IKReal x1557=((x1555)+(x1556));
IKReal x1558=((cj7)*(r21)*(sj8));
IKReal x1559=((cj7)*(cj8)*(r20));
IKReal x1560=((r22)*(sj7));
IKReal x1561=((x1560)+(x1559));
IKReal x1562=((x1558)+(((-1.00000000000000)*(x1561))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x1554) != 0)?((IKReal)1/(x1554)):(IKReal)1.0e30))*(((((sj5)*(x1562)))+(((cj5)*(x1557)))))), ((((IKabs(x1554) != 0)?((IKReal)1/(x1554)):(IKReal)1.0e30))*(((((cj5)*(x1562)))+(((-1.00000000000000)*(sj5)*(x1557)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
evalcond[0]=((IKfmod(((3.14159265358979)+(j6)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[2]=((0.0850000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[3]=((1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[4]=((0.220000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((-0.0200000000000000)*(sj5)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[5]=((0.0200000000000000)+(((-0.0200000000000000)*(cj5)))+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7)))+(((-0.250000000000000)*(sj5))));
evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1563=((cj8)*(r10)*(sj3)*(sj7));
IKReal x1564=((cj3)*(cj8)*(r00)*(sj7));
IKReal x1565=((x1563)+(x1564));
IKReal x1566=((cj7)*(r12)*(sj3));
IKReal x1567=((cj3)*(cj7)*(r02));
IKReal x1568=((cj3)*(r01)*(sj7)*(sj8));
IKReal x1569=((r11)*(sj3)*(sj7)*(sj8));
IKReal x1570=((x1568)+(x1569)+(x1566)+(x1567));
IKReal x1571=((x1565)+(((-1.00000000000000)*(x1570))));
IKReal x1572=((cj7)*(r22));
IKReal x1573=((r21)*(sj7)*(sj8));
IKReal x1574=((x1573)+(x1572));
IKReal x1575=((cj8)*(r20)*(sj7));
IKReal x1576=((x1574)+(((-1.00000000000000)*(x1575))));
IKReal x1577=(cj5)*(cj5);
IKReal x1578=(sj5)*(sj5);
IKReal x1579=((x1578)+(x1577));
IKReal x1580=((-1.00000000000000)*(x1579));
IKReal x1581=((IKabs(x1580) != 0)?((IKReal)1/(x1580)):(IKReal)1.0e30);
j4array[0]=IKatan2(((x1581)*(((((cj5)*(x1576)))+(((-1.00000000000000)*(sj5)*(x1571)))))), ((x1581)*(((((cj5)*(x1571)))+(((sj5)*(x1576)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1582=(cj5)*(cj5);
IKReal x1583=(sj5)*(sj5);
IKReal x1584=((x1582)+(x1583));
IKReal x1585=((r12)*(sj3)*(sj7));
IKReal x1586=((cj3)*(r02)*(sj7));
IKReal x1587=((cj7)*(cj8)*(r10)*(sj3));
IKReal x1588=((cj3)*(cj7)*(cj8)*(r00));
IKReal x1589=((x1588)+(x1586)+(x1587)+(x1585));
IKReal x1590=((cj3)*(cj7)*(r01)*(sj8));
IKReal x1591=((cj7)*(r11)*(sj3)*(sj8));
IKReal x1592=((x1591)+(x1590));
IKReal x1593=((((-1.00000000000000)*(x1592)))+(x1589));
IKReal x1594=((cj7)*(r21)*(sj8));
IKReal x1595=((cj7)*(cj8)*(r20));
IKReal x1596=((r22)*(sj7));
IKReal x1597=((x1595)+(x1596));
IKReal x1598=((((-1.00000000000000)*(x1597)))+(x1594));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x1584) != 0)?((IKReal)1/(x1584)):(IKReal)1.0e30))*(((((sj5)*(x1598)))+(((cj5)*(x1593)))))), ((((IKabs(x1584) != 0)?((IKReal)1/(x1584)):(IKReal)1.0e30))*(((((-1.00000000000000)*(sj5)*(x1593)))+(((cj5)*(x1598)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1599=(cj5)*(cj5);
IKReal x1600=(sj5)*(sj5);
IKReal x1601=((x1600)+(x1599));
IKReal x1602=((cj7)*(r22));
IKReal x1603=((r21)*(sj7)*(sj8));
IKReal x1604=((x1603)+(x1602));
IKReal x1605=((cj8)*(r20)*(sj7));
IKReal x1606=((((-1.00000000000000)*(x1605)))+(x1604));
IKReal x1607=((cj7)*(r21)*(sj8));
IKReal x1608=((cj7)*(cj8)*(r20));
IKReal x1609=((r22)*(sj7));
IKReal x1610=((x1609)+(x1608));
IKReal x1611=((x1607)+(((-1.00000000000000)*(x1610))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x1601) != 0)?((IKReal)1/(x1601)):(IKReal)1.0e30))*(((((sj5)*(x1611)))+(((cj5)*(x1606)))))), ((((IKabs(x1601) != 0)?((IKReal)1/(x1601)):(IKReal)1.0e30))*(((((cj5)*(x1611)))+(((-1.00000000000000)*(sj5)*(x1606)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((-3.14159265358979)+(3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[2]=((-0.0850000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[3]=((-1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[4]=((0.220000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((-0.0200000000000000)*(sj5)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[5]=((-0.0200000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.250000000000000)*(sj5)))+(((0.0200000000000000)*(cj5)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1612=(cj5)*(cj5);
IKReal x1613=(sj5)*(sj5);
IKReal x1614=((x1612)+(x1613));
IKReal x1615=((r12)*(sj3)*(sj7));
IKReal x1616=((cj3)*(r02)*(sj7));
IKReal x1617=((cj7)*(cj8)*(r10)*(sj3));
IKReal x1618=((cj3)*(cj7)*(cj8)*(r00));
IKReal x1619=((x1618)+(x1616)+(x1617)+(x1615));
IKReal x1620=((cj3)*(cj7)*(r01)*(sj8));
IKReal x1621=((cj7)*(r11)*(sj3)*(sj8));
IKReal x1622=((x1621)+(x1620));
IKReal x1623=((x1619)+(((-1.00000000000000)*(x1622))));
IKReal x1624=((cj7)*(r21)*(sj8));
IKReal x1625=((cj7)*(cj8)*(r20));
IKReal x1626=((r22)*(sj7));
IKReal x1627=((x1626)+(x1625));
IKReal x1628=((x1624)+(((-1.00000000000000)*(x1627))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x1614) != 0)?((IKReal)1/(x1614)):(IKReal)1.0e30))*(((((sj5)*(x1628)))+(((cj5)*(x1623)))))), ((((IKabs(x1614) != 0)?((IKReal)1/(x1614)):(IKReal)1.0e30))*(((((cj5)*(x1628)))+(((-1.00000000000000)*(sj5)*(x1623)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1629=(cj5)*(cj5);
IKReal x1630=(sj5)*(sj5);
IKReal x1631=((x1629)+(x1630));
IKReal x1632=((IKabs(x1631) != 0)?((IKReal)1/(x1631)):(IKReal)1.0e30);
IKReal x1633=((cj8)*(r10)*(sj3)*(sj7));
IKReal x1634=((cj3)*(cj8)*(r00)*(sj7));
IKReal x1635=((x1633)+(x1634));
IKReal x1636=((cj7)*(r12)*(sj3));
IKReal x1637=((cj3)*(cj7)*(r02));
IKReal x1638=((cj3)*(r01)*(sj7)*(sj8));
IKReal x1639=((r11)*(sj3)*(sj7)*(sj8));
IKReal x1640=((x1636)+(x1637)+(x1638)+(x1639));
IKReal x1641=((x1635)+(((-1.00000000000000)*(x1640))));
IKReal x1642=((cj7)*(r22));
IKReal x1643=((r21)*(sj7)*(sj8));
IKReal x1644=((x1643)+(x1642));
IKReal x1645=((cj8)*(r20)*(sj7));
IKReal x1646=((x1644)+(((-1.00000000000000)*(x1645))));
j4array[0]=IKatan2(((x1632)*(((((-1.00000000000000)*(sj5)*(x1641)))+(((cj5)*(x1646)))))), ((x1632)*(((((sj5)*(x1646)))+(((cj5)*(x1641)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1647=(cj5)*(cj5);
IKReal x1648=(sj5)*(sj5);
IKReal x1649=((x1647)+(x1648));
IKReal x1650=((IKabs(x1649) != 0)?((IKReal)1/(x1649)):(IKReal)1.0e30);
IKReal x1651=((cj7)*(r22));
IKReal x1652=((r21)*(sj7)*(sj8));
IKReal x1653=((x1652)+(x1651));
IKReal x1654=((cj8)*(r20)*(sj7));
IKReal x1655=((x1653)+(((-1.00000000000000)*(x1654))));
IKReal x1656=((cj7)*(r21)*(sj8));
IKReal x1657=((cj7)*(cj8)*(r20));
IKReal x1658=((r22)*(sj7));
IKReal x1659=((x1658)+(x1657));
IKReal x1660=((x1656)+(((-1.00000000000000)*(x1659))));
j4array[0]=IKatan2(((x1650)*(((((cj5)*(x1655)))+(((-1.00000000000000)*(sj5)*(x1660)))))), ((x1650)*(((((cj5)*(x1660)))+(((sj5)*(x1655)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1661=(cj5)*(cj5);
IKReal x1662=((cj6)*(x1661));
IKReal x1663=(sj5)*(sj5);
IKReal x1664=((cj6)*(x1663));
IKReal x1665=((x1664)+(x1662));
IKReal x1666=((cj7)*(r21)*(sj8));
IKReal x1667=((cj7)*(cj8)*(r20));
IKReal x1668=((r22)*(sj7));
IKReal x1669=((x1668)+(x1667));
IKReal x1670=((x1666)+(((-1.00000000000000)*(x1669))));
IKReal x1671=((cj7)*(r22));
IKReal x1672=((r21)*(sj7)*(sj8));
IKReal x1673=((x1671)+(x1672));
IKReal x1674=((cj8)*(r20)*(sj7));
IKReal x1675=((x1673)+(((-1.00000000000000)*(x1674))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x1665) != 0)?((IKReal)1/(x1665)):(IKReal)1.0e30))*(((((cj6)*(sj5)*(x1670)))+(((cj5)*(x1675)))))), ((((IKabs(x1665) != 0)?((IKReal)1/(x1665)):(IKReal)1.0e30))*(((((-1.00000000000000)*(sj5)*(x1675)))+(((cj5)*(cj6)*(x1670)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1676=(cj5)*(cj5);
IKReal x1677=((sj6)*(x1676));
IKReal x1678=(sj5)*(sj5);
IKReal x1679=((sj6)*(x1678));
IKReal x1680=((x1679)+(x1677));
IKReal x1681=((IKabs(x1680) != 0)?((IKReal)1/(x1680)):(IKReal)1.0e30);
IKReal x1682=((cj3)*(cj8)*(r01));
IKReal x1683=((cj8)*(r11)*(sj3));
IKReal x1684=((cj3)*(r00)*(sj8));
IKReal x1685=((r10)*(sj3)*(sj8));
IKReal x1686=((x1683)+(x1682)+(x1685)+(x1684));
IKReal x1687=((-1.00000000000000)*(x1686));
IKReal x1688=((cj8)*(r21));
IKReal x1689=((r20)*(sj8));
IKReal x1690=((x1689)+(x1688));
j4array[0]=IKatan2(((x1681)*(((((-1.00000000000000)*(sj5)*(x1687)))+(((cj5)*(x1690)))))), ((x1681)*(((((cj5)*(x1687)))+(((sj5)*(x1690)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1691=(cj5)*(cj5);
IKReal x1692=((sj6)*(x1691));
IKReal x1693=(sj5)*(sj5);
IKReal x1694=((sj6)*(x1693));
IKReal x1695=((x1694)+(x1692));
IKReal x1696=((IKabs(x1695) != 0)?((IKReal)1/(x1695)):(IKReal)1.0e30);
IKReal x1697=((cj7)*(r21)*(sj8));
IKReal x1698=((cj7)*(cj8)*(r20));
IKReal x1699=((r22)*(sj7));
IKReal x1700=((x1698)+(x1699));
IKReal x1701=((x1697)+(((-1.00000000000000)*(x1700))));
IKReal x1702=((cj8)*(r21));
IKReal x1703=((r20)*(sj8));
IKReal x1704=((x1702)+(x1703));
j4array[0]=IKatan2(((x1696)*(((((-1.00000000000000)*(sj5)*(sj6)*(x1701)))+(((cj5)*(x1704)))))), ((x1696)*(((((sj5)*(x1704)))+(((cj5)*(sj6)*(x1701)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
IKReal x1705=((IKabs(cj6) != 0)?((IKReal)1/(cj6)):(IKReal)1.0e30);
IKReal x1706=((0.0900000000000000)*(cj7));
IKReal x1707=((cj7)*(npy)*(sj8));
IKReal x1708=((0.220000000000000)+(x1706)+(x1707));
IKReal x1709=((npz)*(sj7));
IKReal x1710=((cj7)*(cj8)*(npx));
IKReal x1711=((x1709)+(x1710));
IKReal x1712=((x1708)+(((-1.00000000000000)*(x1711))));
j5array[0]=IKatan2(((0.00158982511923688)*(x1705)*(((((-2500.00000000000)*(cj8)*(npx)*(sj7)))+(((2500.00000000000)*(npy)*(sj7)*(sj8)))+(((225.000000000000)*(sj7)))+(((212.500000000000)*(sj6)))+(((200.000000000000)*(cj6)*(x1712)))+(((2500.00000000000)*(cj7)*(npz)))+(((50.0000000000000)*(cj6)))))), ((0.00158982511923688)*(x1705)*(((((18.0000000000000)*(sj7)))+(((200.000000000000)*(npy)*(sj7)*(sj8)))+(((-200.000000000000)*(cj8)*(npx)*(sj7)))+(((-2500.00000000000)*(cj6)*(x1712)))+(((17.0000000000000)*(sj6)))+(((200.000000000000)*(cj7)*(npz)))+(((4.00000000000000)*(cj6)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(cj6)*((sj5)*(sj5))))+(((-1.00000000000000)*(cj6)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
IKReal x1713=(sj8)*(sj8);
IKReal x1714=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((cj7)*(r00)*(r11)*(x1713)))+(((cj7)*(r00)*(r11)*(x1714)))+(((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((cj8)*(r02)*(r11)*(sj7)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x1713)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x1714)))+(((r02)*(r10)*(sj7)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((-1.57079632679490)+(3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((-0.0200000000000000)+(((npx)*(sj8)))+(((cj8)*(npy)))+(((0.250000000000000)*(sj5)))+(((0.0200000000000000)*(cj5))));
evalcond[2]=((0.220000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((-0.0200000000000000)*(sj5)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[3]=((((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8))));
evalcond[4]=((0.0850000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
IKReal x1715=(sj8)*(sj8);
IKReal x1716=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x1716)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x1715)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8)))+(((r01)*(r10)*(sj7)*(x1716)))+(((r01)*(r10)*(sj7)*(x1715))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
IKReal x1717=(sj7)*(sj7);
IKReal x1718=(cj7)*(cj7);
dummyeval[0]=((((-1.00000000000000)*(cj8)*(r02)*(r10)*(x1718)))+(((-1.00000000000000)*(cj8)*(r02)*(r10)*(x1717)))+(((-1.00000000000000)*(r01)*(r12)*(sj8)*(x1717)))+(((-1.00000000000000)*(r01)*(r12)*(sj8)*(x1718)))+(((r02)*(r11)*(sj8)*(x1718)))+(((r02)*(r11)*(sj8)*(x1717)))+(((cj8)*(r00)*(r12)*(x1718)))+(((cj8)*(r00)*(r12)*(x1717))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x1719=(sj7)*(sj7);
IKReal x1720=(cj7)*(cj7);
IKReal x1721=((cj8)*(r02)*(r10)*(x1719));
IKReal x1722=((cj8)*(r02)*(r10)*(x1720));
IKReal x1723=((r01)*(r12)*(sj8)*(x1719));
IKReal x1724=((r01)*(r12)*(sj8)*(x1720));
IKReal x1725=((x1724)+(x1722)+(x1723)+(x1721));
IKReal x1726=((r02)*(r11)*(sj8)*(x1719));
IKReal x1727=((r02)*(r11)*(sj8)*(x1720));
IKReal x1728=((cj8)*(r00)*(r12)*(x1719));
IKReal x1729=((cj8)*(r00)*(r12)*(x1720));
IKReal x1730=((x1728)+(x1729)+(x1726)+(x1727));
j3array[0]=IKatan2(((((IKabs(((x1730)+(((-1.00000000000000)*(x1725))))) != 0)?((IKReal)1/(((x1730)+(((-1.00000000000000)*(x1725)))))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((x1725)+(((-1.00000000000000)*(x1730))))) != 0)?((IKReal)1/(((x1725)+(((-1.00000000000000)*(x1730)))))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1731=(cj5)*(cj5);
IKReal x1732=(sj5)*(sj5);
IKReal x1733=((x1731)+(x1732));
IKReal x1734=((r12)*(sj3)*(sj7));
IKReal x1735=((cj3)*(r02)*(sj7));
IKReal x1736=((cj7)*(cj8)*(r10)*(sj3));
IKReal x1737=((cj3)*(cj7)*(cj8)*(r00));
IKReal x1738=((x1735)+(x1734)+(x1737)+(x1736));
IKReal x1739=((cj3)*(cj7)*(r01)*(sj8));
IKReal x1740=((cj7)*(r11)*(sj3)*(sj8));
IKReal x1741=((x1739)+(x1740));
IKReal x1742=((x1738)+(((-1.00000000000000)*(x1741))));
IKReal x1743=((cj7)*(r21)*(sj8));
IKReal x1744=((cj7)*(cj8)*(r20));
IKReal x1745=((r22)*(sj7));
IKReal x1746=((x1744)+(x1745));
IKReal x1747=((x1743)+(((-1.00000000000000)*(x1746))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x1733) != 0)?((IKReal)1/(x1733)):(IKReal)1.0e30))*(((((sj5)*(x1747)))+(((cj5)*(x1742)))))), ((((IKabs(x1733) != 0)?((IKReal)1/(x1733)):(IKReal)1.0e30))*(((((-1.00000000000000)*(sj5)*(x1742)))+(((cj5)*(x1747)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1748=(cj5)*(cj5);
IKReal x1749=(sj5)*(sj5);
IKReal x1750=((x1748)+(x1749));
IKReal x1751=((IKabs(x1750) != 0)?((IKReal)1/(x1750)):(IKReal)1.0e30);
IKReal x1752=((cj3)*(cj8)*(r01));
IKReal x1753=((cj8)*(r11)*(sj3));
IKReal x1754=((cj3)*(r00)*(sj8));
IKReal x1755=((r10)*(sj3)*(sj8));
IKReal x1756=((x1755)+(x1754)+(x1753)+(x1752));
IKReal x1757=((-1.00000000000000)*(x1756));
IKReal x1758=((cj8)*(r21));
IKReal x1759=((r20)*(sj8));
IKReal x1760=((x1759)+(x1758));
j4array[0]=IKatan2(((x1751)*(((((cj5)*(x1760)))+(((-1.00000000000000)*(sj5)*(x1757)))))), ((x1751)*(((((cj5)*(x1757)))+(((sj5)*(x1760)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1761=(cj5)*(cj5);
IKReal x1762=(sj5)*(sj5);
IKReal x1763=((x1762)+(x1761));
IKReal x1764=((IKabs(x1763) != 0)?((IKReal)1/(x1763)):(IKReal)1.0e30);
IKReal x1765=((cj7)*(r21)*(sj8));
IKReal x1766=((cj7)*(cj8)*(r20));
IKReal x1767=((r22)*(sj7));
IKReal x1768=((x1766)+(x1767));
IKReal x1769=((((-1.00000000000000)*(x1768)))+(x1765));
IKReal x1770=((cj8)*(r21));
IKReal x1771=((r20)*(sj8));
IKReal x1772=((x1771)+(x1770));
j4array[0]=IKatan2(((x1764)*(((((-1.00000000000000)*(sj5)*(x1769)))+(((cj5)*(x1772)))))), ((x1764)*(((((cj5)*(x1769)))+(((sj5)*(x1772)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x1773=(sj8)*(sj8);
IKReal x1774=(cj8)*(cj8);
IKReal x1775=((cj7)*(cj8)*(r01)*(r12));
IKReal x1776=((cj7)*(r00)*(r12)*(sj8));
IKReal x1777=((r00)*(r11)*(sj7)*(x1773));
IKReal x1778=((r00)*(r11)*(sj7)*(x1774));
IKReal x1779=((x1775)+(x1777)+(x1776)+(x1778));
IKReal x1780=((cj7)*(cj8)*(r02)*(r11));
IKReal x1781=((r01)*(r10)*(sj7)*(x1774));
IKReal x1782=((cj7)*(r02)*(r10)*(sj8));
IKReal x1783=((r01)*(r10)*(sj7)*(x1773));
IKReal x1784=((x1780)+(x1781)+(x1782)+(x1783));
j3array[0]=IKatan2(((((IKabs(((x1784)+(((-1.00000000000000)*(x1779))))) != 0)?((IKReal)1/(((x1784)+(((-1.00000000000000)*(x1779)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x1784)))+(x1779))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x1784)))+(x1779)))):(IKReal)1.0e30))*(((((r00)*(sj8)))+(((cj8)*(r01)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1785=(cj5)*(cj5);
IKReal x1786=(sj5)*(sj5);
IKReal x1787=((x1785)+(x1786));
IKReal x1788=((r12)*(sj3)*(sj7));
IKReal x1789=((cj3)*(r02)*(sj7));
IKReal x1790=((cj7)*(cj8)*(r10)*(sj3));
IKReal x1791=((cj3)*(cj7)*(cj8)*(r00));
IKReal x1792=((x1788)+(x1789)+(x1791)+(x1790));
IKReal x1793=((cj3)*(cj7)*(r01)*(sj8));
IKReal x1794=((cj7)*(r11)*(sj3)*(sj8));
IKReal x1795=((x1793)+(x1794));
IKReal x1796=((((-1.00000000000000)*(x1795)))+(x1792));
IKReal x1797=((cj7)*(r21)*(sj8));
IKReal x1798=((cj7)*(cj8)*(r20));
IKReal x1799=((r22)*(sj7));
IKReal x1800=((x1799)+(x1798));
IKReal x1801=((x1797)+(((-1.00000000000000)*(x1800))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x1787) != 0)?((IKReal)1/(x1787)):(IKReal)1.0e30))*(((((sj5)*(x1801)))+(((cj5)*(x1796)))))), ((((IKabs(x1787) != 0)?((IKReal)1/(x1787)):(IKReal)1.0e30))*(((((cj5)*(x1801)))+(((-1.00000000000000)*(sj5)*(x1796)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1802=(cj5)*(cj5);
IKReal x1803=(sj5)*(sj5);
IKReal x1804=((x1803)+(x1802));
IKReal x1805=((IKabs(x1804) != 0)?((IKReal)1/(x1804)):(IKReal)1.0e30);
IKReal x1806=((cj3)*(cj8)*(r01));
IKReal x1807=((cj8)*(r11)*(sj3));
IKReal x1808=((cj3)*(r00)*(sj8));
IKReal x1809=((r10)*(sj3)*(sj8));
IKReal x1810=((x1807)+(x1806)+(x1809)+(x1808));
IKReal x1811=((-1.00000000000000)*(x1810));
IKReal x1812=((cj8)*(r21));
IKReal x1813=((r20)*(sj8));
IKReal x1814=((x1812)+(x1813));
j4array[0]=IKatan2(((x1805)*(((((-1.00000000000000)*(sj5)*(x1811)))+(((cj5)*(x1814)))))), ((x1805)*(((((sj5)*(x1814)))+(((cj5)*(x1811)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1815=(cj5)*(cj5);
IKReal x1816=(sj5)*(sj5);
IKReal x1817=((x1815)+(x1816));
IKReal x1818=((IKabs(x1817) != 0)?((IKReal)1/(x1817)):(IKReal)1.0e30);
IKReal x1819=((cj7)*(r21)*(sj8));
IKReal x1820=((cj7)*(cj8)*(r20));
IKReal x1821=((r22)*(sj7));
IKReal x1822=((x1821)+(x1820));
IKReal x1823=((((-1.00000000000000)*(x1822)))+(x1819));
IKReal x1824=((cj8)*(r21));
IKReal x1825=((r20)*(sj8));
IKReal x1826=((x1825)+(x1824));
j4array[0]=IKatan2(((x1818)*(((((-1.00000000000000)*(sj5)*(x1823)))+(((cj5)*(x1826)))))), ((x1818)*(((((cj5)*(x1823)))+(((sj5)*(x1826)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1827=(cj5)*(cj5);
IKReal x1828=(sj5)*(sj5);
IKReal x1829=((x1828)+(x1827));
IKReal x1830=((IKabs(x1829) != 0)?((IKReal)1/(x1829)):(IKReal)1.0e30);
IKReal x1831=((cj7)*(r21)*(sj8));
IKReal x1832=((cj7)*(cj8)*(r20));
IKReal x1833=((r22)*(sj7));
IKReal x1834=((x1832)+(x1833));
IKReal x1835=((((-1.00000000000000)*(x1834)))+(x1831));
IKReal x1836=((cj8)*(r21));
IKReal x1837=((r20)*(sj8));
IKReal x1838=((x1836)+(x1837));
j4array[0]=IKatan2(((x1830)*(((((cj5)*(x1838)))+(((-1.00000000000000)*(sj5)*(x1835)))))), ((x1830)*(((((cj5)*(x1835)))+(((sj5)*(x1838)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
IKReal x1839=(sj8)*(sj8);
IKReal x1840=(cj8)*(cj8);
dummyeval[0]=((((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))+(((-1.00000000000000)*(x1840)*((r11)*(r11))))+(((-1.00000000000000)*(x1839)*((r10)*(r10))))+(((-1.00000000000000)*(x1840)*((r01)*(r01))))+(((-1.00000000000000)*(x1839)*((r00)*(r00)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
IKReal x1841=(sj8)*(sj8);
IKReal x1842=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x1842)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x1841)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8)))+(((r01)*(r10)*(sj7)*(x1841)))+(((r01)*(r10)*(sj7)*(x1842))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
IKReal x1843=(cj8)*(cj8);
IKReal x1844=(sj8)*(sj8);
dummyeval[0]=((((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((r10)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r10)*(r11)*(x1844)))+(((cj8)*(r01)*(r02)*(sj7)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x1844)))+(((cj7)*(r10)*(r11)*(x1843)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(r00)*(r01)*(x1843)))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x1845=(cj8)*(cj8);
IKReal x1846=(sj8)*(sj8);
IKReal x1847=((cj5)*(sj4));
IKReal x1848=((cj4)*(sj5));
IKReal x1849=((x1848)+(x1847));
IKReal x1850=(r11)*(r11);
IKReal x1851=((cj7)*(cj8)*(sj8)*(x1850));
IKReal x1852=((cj7)*(r10)*(r11)*(x1846));
IKReal x1853=(r01)*(r01);
IKReal x1854=((cj7)*(cj8)*(sj8)*(x1853));
IKReal x1855=((cj7)*(r00)*(r01)*(x1846));
IKReal x1856=((x1851)+(x1852)+(x1854)+(x1855));
IKReal x1857=(r10)*(r10);
IKReal x1858=((cj7)*(cj8)*(sj8)*(x1857));
IKReal x1859=((r00)*(r02)*(sj7)*(sj8));
IKReal x1860=((r10)*(r12)*(sj7)*(sj8));
IKReal x1861=((cj7)*(r00)*(r01)*(x1845));
IKReal x1862=((cj8)*(r01)*(r02)*(sj7));
IKReal x1863=(r00)*(r00);
IKReal x1864=((cj7)*(cj8)*(sj8)*(x1863));
IKReal x1865=((cj7)*(r10)*(r11)*(x1845));
IKReal x1866=((cj8)*(r11)*(r12)*(sj7));
IKReal x1867=((x1861)+(x1860)+(x1862)+(x1865)+(x1864)+(x1866)+(x1858)+(x1859));
j3array[0]=IKatan2(((x1849)*(((IKabs(((x1867)+(((-1.00000000000000)*(x1856))))) != 0)?((IKReal)1/(((x1867)+(((-1.00000000000000)*(x1856)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))), ((x1849)*(((IKabs(((x1856)+(((-1.00000000000000)*(x1867))))) != 0)?((IKReal)1/(((x1856)+(((-1.00000000000000)*(x1867)))))):(IKReal)1.0e30))*(((((r00)*(sj8)))+(((cj8)*(r01)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x1868=(sj8)*(sj8);
IKReal x1869=(cj8)*(cj8);
IKReal x1870=((cj7)*(cj8)*(r01)*(r12));
IKReal x1871=((cj7)*(r00)*(r12)*(sj8));
IKReal x1872=((r00)*(r11)*(sj7)*(x1868));
IKReal x1873=((r00)*(r11)*(sj7)*(x1869));
IKReal x1874=((x1872)+(x1873)+(x1870)+(x1871));
IKReal x1875=((cj7)*(cj8)*(r02)*(r11));
IKReal x1876=((r01)*(r10)*(sj7)*(x1869));
IKReal x1877=((cj7)*(r02)*(r10)*(sj8));
IKReal x1878=((r01)*(r10)*(sj7)*(x1868));
IKReal x1879=((x1876)+(x1877)+(x1875)+(x1878));
j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x1874)))+(x1879))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x1874)))+(x1879)))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x1879)))+(x1874))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x1879)))+(x1874)))):(IKReal)1.0e30))*(((((r00)*(sj8)))+(((cj8)*(r01)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x1880=(sj8)*(sj8);
IKReal x1881=(cj8)*(cj8);
IKReal x1882=(r11)*(r11);
IKReal x1883=((x1881)*(x1882));
IKReal x1884=(r00)*(r00);
IKReal x1885=((x1880)*(x1884));
IKReal x1886=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
IKReal x1887=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
IKReal x1888=(r10)*(r10);
IKReal x1889=((x1880)*(x1888));
IKReal x1890=(r01)*(r01);
IKReal x1891=((x1881)*(x1890));
IKReal x1892=((x1891)+(x1889)+(x1887)+(x1886)+(x1885)+(x1883));
IKReal x1893=((sj4)*(sj5));
IKReal x1894=((cj4)*(cj5));
IKReal x1895=((x1893)+(((-1.00000000000000)*(x1894))));
j3array[0]=IKatan2(((-1.00000000000000)*(x1895)*(((IKabs(x1892) != 0)?((IKReal)1/(x1892)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))), ((x1895)*(((IKabs(x1892) != 0)?((IKReal)1/(x1892)):(IKReal)1.0e30))*(((((r00)*(sj8)))+(((cj8)*(r01)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((0.0200000000000000)+(((-0.0200000000000000)*(cj5)))+(((npx)*(sj8)))+(((cj8)*(npy)))+(((-0.250000000000000)*(sj5))));
evalcond[2]=((0.220000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((-0.0200000000000000)*(sj5)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[3]=((((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8))));
evalcond[4]=((-0.0850000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
IKReal x1896=(cj8)*(cj8);
IKReal x1897=(sj8)*(sj8);
dummyeval[0]=((((cj7)*(cj8)*(r01)*(r12)))+(((cj7)*(r00)*(r12)*(sj8)))+(((-1.00000000000000)*(r01)*(r10)*(sj7)*(x1896)))+(((-1.00000000000000)*(r01)*(r10)*(sj7)*(x1897)))+(((-1.00000000000000)*(cj7)*(r02)*(r10)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r02)*(r11)))+(((r00)*(r11)*(sj7)*(x1896)))+(((r00)*(r11)*(sj7)*(x1897))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
IKReal x1898=(sj7)*(sj7);
IKReal x1899=(cj7)*(cj7);
dummyeval[0]=((((-1.00000000000000)*(r02)*(r11)*(sj8)*(x1898)))+(((-1.00000000000000)*(r02)*(r11)*(sj8)*(x1899)))+(((r01)*(r12)*(sj8)*(x1898)))+(((r01)*(r12)*(sj8)*(x1899)))+(((cj8)*(r02)*(r10)*(x1899)))+(((cj8)*(r02)*(r10)*(x1898)))+(((-1.00000000000000)*(cj8)*(r00)*(r12)*(x1898)))+(((-1.00000000000000)*(cj8)*(r00)*(r12)*(x1899))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x1900=(sj7)*(sj7);
IKReal x1901=(cj7)*(cj7);
IKReal x1902=((r02)*(r11)*(sj8)*(x1900));
IKReal x1903=((r02)*(r11)*(sj8)*(x1901));
IKReal x1904=((cj8)*(r00)*(r12)*(x1900));
IKReal x1905=((cj8)*(r00)*(r12)*(x1901));
IKReal x1906=((x1904)+(x1905)+(x1902)+(x1903));
IKReal x1907=((cj8)*(r02)*(r10)*(x1900));
IKReal x1908=((cj8)*(r02)*(r10)*(x1901));
IKReal x1909=((r01)*(r12)*(sj8)*(x1900));
IKReal x1910=((r01)*(r12)*(sj8)*(x1901));
IKReal x1911=((x1908)+(x1909)+(x1907)+(x1910));
j3array[0]=IKatan2(((((IKabs(((x1911)+(((-1.00000000000000)*(x1906))))) != 0)?((IKReal)1/(((x1911)+(((-1.00000000000000)*(x1906)))))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((x1906)+(((-1.00000000000000)*(x1911))))) != 0)?((IKReal)1/(((x1906)+(((-1.00000000000000)*(x1911)))))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1912=(cj5)*(cj5);
IKReal x1913=(sj5)*(sj5);
IKReal x1914=((x1913)+(x1912));
IKReal x1915=((r12)*(sj3)*(sj7));
IKReal x1916=((cj3)*(r02)*(sj7));
IKReal x1917=((cj7)*(cj8)*(r10)*(sj3));
IKReal x1918=((cj3)*(cj7)*(cj8)*(r00));
IKReal x1919=((x1918)+(x1915)+(x1917)+(x1916));
IKReal x1920=((cj3)*(cj7)*(r01)*(sj8));
IKReal x1921=((cj7)*(r11)*(sj3)*(sj8));
IKReal x1922=((x1920)+(x1921));
IKReal x1923=((((-1.00000000000000)*(x1922)))+(x1919));
IKReal x1924=((cj7)*(r21)*(sj8));
IKReal x1925=((cj7)*(cj8)*(r20));
IKReal x1926=((r22)*(sj7));
IKReal x1927=((x1925)+(x1926));
IKReal x1928=((((-1.00000000000000)*(x1927)))+(x1924));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x1914) != 0)?((IKReal)1/(x1914)):(IKReal)1.0e30))*(((((cj5)*(x1923)))+(((sj5)*(x1928)))))), ((((IKabs(x1914) != 0)?((IKReal)1/(x1914)):(IKReal)1.0e30))*(((((cj5)*(x1928)))+(((-1.00000000000000)*(sj5)*(x1923)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1929=((cj3)*(cj8)*(r01));
IKReal x1930=((cj8)*(r11)*(sj3));
IKReal x1931=((cj3)*(r00)*(sj8));
IKReal x1932=((r10)*(sj3)*(sj8));
IKReal x1933=((x1929)+(x1932)+(x1931)+(x1930));
IKReal x1934=((-1.00000000000000)*(x1933));
IKReal x1935=((cj8)*(r21));
IKReal x1936=((r20)*(sj8));
IKReal x1937=((x1936)+(x1935));
IKReal x1938=(cj5)*(cj5);
IKReal x1939=(sj5)*(sj5);
IKReal x1940=((x1939)+(x1938));
IKReal x1941=((-1.00000000000000)*(x1940));
IKReal x1942=((IKabs(x1941) != 0)?((IKReal)1/(x1941)):(IKReal)1.0e30);
j4array[0]=IKatan2(((x1942)*(((((cj5)*(x1937)))+(((-1.00000000000000)*(sj5)*(x1934)))))), ((x1942)*(((((cj5)*(x1934)))+(((sj5)*(x1937)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1943=(cj5)*(cj5);
IKReal x1944=(sj5)*(sj5);
IKReal x1945=((x1943)+(x1944));
IKReal x1946=((cj8)*(r21));
IKReal x1947=((r20)*(sj8));
IKReal x1948=((x1946)+(x1947));
IKReal x1949=((cj7)*(r21)*(sj8));
IKReal x1950=((cj7)*(cj8)*(r20));
IKReal x1951=((r22)*(sj7));
IKReal x1952=((x1951)+(x1950));
IKReal x1953=((((-1.00000000000000)*(x1952)))+(x1949));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x1945) != 0)?((IKReal)1/(x1945)):(IKReal)1.0e30))*(((((sj5)*(x1953)))+(((cj5)*(x1948)))))), ((((IKabs(x1945) != 0)?((IKReal)1/(x1945)):(IKReal)1.0e30))*(((((-1.00000000000000)*(sj5)*(x1948)))+(((cj5)*(x1953)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x1954=(cj8)*(cj8);
IKReal x1955=(sj8)*(sj8);
IKReal x1956=((cj7)*(cj8)*(r02)*(r11));
IKReal x1957=((r01)*(r10)*(sj7)*(x1954));
IKReal x1958=((cj7)*(r02)*(r10)*(sj8));
IKReal x1959=((r01)*(r10)*(sj7)*(x1955));
IKReal x1960=((x1957)+(x1956)+(x1959)+(x1958));
IKReal x1961=((cj7)*(cj8)*(r01)*(r12));
IKReal x1962=((cj7)*(r00)*(r12)*(sj8));
IKReal x1963=((r00)*(r11)*(sj7)*(x1955));
IKReal x1964=((r00)*(r11)*(sj7)*(x1954));
IKReal x1965=((x1964)+(x1961)+(x1962)+(x1963));
j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x1960)))+(x1965))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x1960)))+(x1965)))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x1965)))+(x1960))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x1965)))+(x1960)))):(IKReal)1.0e30))*(((((r00)*(sj8)))+(((cj8)*(r01)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1966=(cj5)*(cj5);
IKReal x1967=(sj5)*(sj5);
IKReal x1968=((x1966)+(x1967));
IKReal x1969=((r12)*(sj3)*(sj7));
IKReal x1970=((cj3)*(r02)*(sj7));
IKReal x1971=((cj7)*(cj8)*(r10)*(sj3));
IKReal x1972=((cj3)*(cj7)*(cj8)*(r00));
IKReal x1973=((x1969)+(x1972)+(x1971)+(x1970));
IKReal x1974=((cj3)*(cj7)*(r01)*(sj8));
IKReal x1975=((cj7)*(r11)*(sj3)*(sj8));
IKReal x1976=((x1975)+(x1974));
IKReal x1977=((((-1.00000000000000)*(x1976)))+(x1973));
IKReal x1978=((cj7)*(r21)*(sj8));
IKReal x1979=((cj7)*(cj8)*(r20));
IKReal x1980=((r22)*(sj7));
IKReal x1981=((x1980)+(x1979));
IKReal x1982=((((-1.00000000000000)*(x1981)))+(x1978));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x1968) != 0)?((IKReal)1/(x1968)):(IKReal)1.0e30))*(((((sj5)*(x1982)))+(((cj5)*(x1977)))))), ((((IKabs(x1968) != 0)?((IKReal)1/(x1968)):(IKReal)1.0e30))*(((((-1.00000000000000)*(sj5)*(x1977)))+(((cj5)*(x1982)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1983=((cj3)*(cj8)*(r01));
IKReal x1984=((cj8)*(r11)*(sj3));
IKReal x1985=((cj3)*(r00)*(sj8));
IKReal x1986=((r10)*(sj3)*(sj8));
IKReal x1987=((x1986)+(x1984)+(x1985)+(x1983));
IKReal x1988=((-1.00000000000000)*(x1987));
IKReal x1989=((cj8)*(r21));
IKReal x1990=((r20)*(sj8));
IKReal x1991=((x1989)+(x1990));
IKReal x1992=(cj5)*(cj5);
IKReal x1993=(sj5)*(sj5);
IKReal x1994=((x1993)+(x1992));
IKReal x1995=((-1.00000000000000)*(x1994));
IKReal x1996=((IKabs(x1995) != 0)?((IKReal)1/(x1995)):(IKReal)1.0e30);
j4array[0]=IKatan2(((x1996)*(((((-1.00000000000000)*(sj5)*(x1988)))+(((cj5)*(x1991)))))), ((x1996)*(((((sj5)*(x1991)))+(((cj5)*(x1988)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x1997=(cj5)*(cj5);
IKReal x1998=(sj5)*(sj5);
IKReal x1999=((x1997)+(x1998));
IKReal x2000=((cj8)*(r21));
IKReal x2001=((r20)*(sj8));
IKReal x2002=((x2000)+(x2001));
IKReal x2003=((cj7)*(r21)*(sj8));
IKReal x2004=((cj7)*(cj8)*(r20));
IKReal x2005=((r22)*(sj7));
IKReal x2006=((x2004)+(x2005));
IKReal x2007=((x2003)+(((-1.00000000000000)*(x2006))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x1999) != 0)?((IKReal)1/(x1999)):(IKReal)1.0e30))*(((((cj5)*(x2002)))+(((sj5)*(x2007)))))), ((((IKabs(x1999) != 0)?((IKReal)1/(x1999)):(IKReal)1.0e30))*(((((cj5)*(x2007)))+(((-1.00000000000000)*(sj5)*(x2002)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x2008=(cj5)*(cj5);
IKReal x2009=(sj5)*(sj5);
IKReal x2010=((x2008)+(x2009));
IKReal x2011=((cj8)*(r21));
IKReal x2012=((r20)*(sj8));
IKReal x2013=((x2011)+(x2012));
IKReal x2014=((cj7)*(r21)*(sj8));
IKReal x2015=((cj7)*(cj8)*(r20));
IKReal x2016=((r22)*(sj7));
IKReal x2017=((x2015)+(x2016));
IKReal x2018=((((-1.00000000000000)*(x2017)))+(x2014));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x2010) != 0)?((IKReal)1/(x2010)):(IKReal)1.0e30))*(((((sj5)*(x2018)))+(((cj5)*(x2013)))))), ((((IKabs(x2010) != 0)?((IKReal)1/(x2010)):(IKReal)1.0e30))*(((((-1.00000000000000)*(sj5)*(x2013)))+(((cj5)*(x2018)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
IKReal x2019=(sj8)*(sj8);
IKReal x2020=(cj8)*(cj8);
dummyeval[0]=((((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-1.00000000000000)*(x2020)*((r01)*(r01))))+(((-1.00000000000000)*(x2019)*((r00)*(r00))))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))+(((-1.00000000000000)*(x2019)*((r10)*(r10))))+(((-1.00000000000000)*(x2020)*((r11)*(r11)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
IKReal x2021=(cj8)*(cj8);
IKReal x2022=(sj8)*(sj8);
dummyeval[0]=((((cj7)*(cj8)*(r01)*(r12)))+(((cj7)*(r00)*(r12)*(sj8)))+(((-1.00000000000000)*(r01)*(r10)*(sj7)*(x2022)))+(((-1.00000000000000)*(r01)*(r10)*(sj7)*(x2021)))+(((r00)*(r11)*(sj7)*(x2022)))+(((r00)*(r11)*(sj7)*(x2021)))+(((-1.00000000000000)*(cj7)*(r02)*(r10)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r02)*(r11))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
IKReal x2023=(cj8)*(cj8);
IKReal x2024=(sj8)*(sj8);
dummyeval[0]=((((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((r10)*(r12)*(sj7)*(sj8)))+(((cj8)*(r01)*(r02)*(sj7)))+(((cj7)*(r10)*(r11)*(x2023)))+(((cj7)*(r00)*(r01)*(x2023)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(r10)*(r11)*(x2024)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x2024))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x2025=(cj8)*(cj8);
IKReal x2026=(sj8)*(sj8);
IKReal x2027=((cj5)*(sj4));
IKReal x2028=((cj4)*(sj5));
IKReal x2029=((x2027)+(x2028));
IKReal x2030=(r11)*(r11);
IKReal x2031=((cj7)*(cj8)*(sj8)*(x2030));
IKReal x2032=((cj7)*(r10)*(r11)*(x2026));
IKReal x2033=(r01)*(r01);
IKReal x2034=((cj7)*(cj8)*(sj8)*(x2033));
IKReal x2035=((cj7)*(r00)*(r01)*(x2026));
IKReal x2036=((x2035)+(x2034)+(x2032)+(x2031));
IKReal x2037=(r10)*(r10);
IKReal x2038=((cj7)*(cj8)*(sj8)*(x2037));
IKReal x2039=((r00)*(r02)*(sj7)*(sj8));
IKReal x2040=((r10)*(r12)*(sj7)*(sj8));
IKReal x2041=((cj7)*(r00)*(r01)*(x2025));
IKReal x2042=((cj8)*(r01)*(r02)*(sj7));
IKReal x2043=(r00)*(r00);
IKReal x2044=((cj7)*(cj8)*(sj8)*(x2043));
IKReal x2045=((cj7)*(r10)*(r11)*(x2025));
IKReal x2046=((cj8)*(r11)*(r12)*(sj7));
IKReal x2047=((x2046)+(x2044)+(x2045)+(x2042)+(x2040)+(x2041)+(x2039)+(x2038));
j3array[0]=IKatan2(((x2029)*(((IKabs(((x2047)+(((-1.00000000000000)*(x2036))))) != 0)?((IKReal)1/(((x2047)+(((-1.00000000000000)*(x2036)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))), ((x2029)*(((IKabs(((((-1.00000000000000)*(x2047)))+(x2036))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x2047)))+(x2036)))):(IKReal)1.0e30))*(((((r00)*(sj8)))+(((cj8)*(r01)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x2048=(cj8)*(cj8);
IKReal x2049=(sj8)*(sj8);
IKReal x2050=((cj7)*(cj8)*(r02)*(r11));
IKReal x2051=((r01)*(r10)*(sj7)*(x2048));
IKReal x2052=((cj7)*(r02)*(r10)*(sj8));
IKReal x2053=((r01)*(r10)*(sj7)*(x2049));
IKReal x2054=((x2051)+(x2050)+(x2053)+(x2052));
IKReal x2055=((cj7)*(cj8)*(r01)*(r12));
IKReal x2056=((cj7)*(r00)*(r12)*(sj8));
IKReal x2057=((r00)*(r11)*(sj7)*(x2049));
IKReal x2058=((r00)*(r11)*(sj7)*(x2048));
IKReal x2059=((x2055)+(x2057)+(x2056)+(x2058));
j3array[0]=IKatan2(((((IKabs(((x2059)+(((-1.00000000000000)*(x2054))))) != 0)?((IKReal)1/(((x2059)+(((-1.00000000000000)*(x2054)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))), ((((IKabs(((x2054)+(((-1.00000000000000)*(x2059))))) != 0)?((IKReal)1/(((x2054)+(((-1.00000000000000)*(x2059)))))):(IKReal)1.0e30))*(((((r00)*(sj8)))+(((cj8)*(r01)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x2060=(sj8)*(sj8);
IKReal x2061=(cj8)*(cj8);
IKReal x2062=(r11)*(r11);
IKReal x2063=((x2061)*(x2062));
IKReal x2064=(r00)*(r00);
IKReal x2065=((x2060)*(x2064));
IKReal x2066=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
IKReal x2067=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
IKReal x2068=(r10)*(r10);
IKReal x2069=((x2060)*(x2068));
IKReal x2070=(r01)*(r01);
IKReal x2071=((x2061)*(x2070));
IKReal x2072=((x2069)+(x2063)+(x2065)+(x2066)+(x2067)+(x2071));
IKReal x2073=((cj4)*(cj5));
IKReal x2074=((sj4)*(sj5));
IKReal x2075=((x2073)+(((-1.00000000000000)*(x2074))));
j3array[0]=IKatan2(((-1.00000000000000)*(x2075)*(((IKabs(x2072) != 0)?((IKReal)1/(x2072)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))), ((x2075)*(((IKabs(x2072) != 0)?((IKReal)1/(x2072)):(IKReal)1.0e30))*(((((r00)*(sj8)))+(((cj8)*(r01)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
evalcond[0]=((IKfmod(((3.14159265358979)+(j6)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[2]=((0.0850000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[3]=((0.220000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((-0.0200000000000000)*(sj5)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[4]=((0.0200000000000000)+(((-0.0200000000000000)*(cj5)))+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7)))+(((-0.250000000000000)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
IKReal x2076=(sj8)*(sj8);
IKReal x2077=(cj8)*(cj8);
dummyeval[0]=((((x2077)*((r01)*(r01))))+(((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))+(((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((x2077)*((r11)*(r11))))+(((x2076)*((r10)*(r10))))+(((x2076)*((r00)*(r00)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
IKReal x2078=(sj8)*(sj8);
IKReal x2079=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((cj7)*(r00)*(r11)*(x2079)))+(((cj7)*(r00)*(r11)*(x2078)))+(((cj8)*(r02)*(r11)*(sj7)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x2079)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x2078)))+(((r02)*(r10)*(sj7)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x2080=(sj8)*(sj8);
IKReal x2081=(cj8)*(cj8);
IKReal x2082=((cj7)*(r01)*(r10)*(x2080));
IKReal x2083=((cj7)*(r01)*(r10)*(x2081));
IKReal x2084=((r00)*(r12)*(sj7)*(sj8));
IKReal x2085=((cj8)*(r01)*(r12)*(sj7));
IKReal x2086=((x2082)+(x2083)+(x2084)+(x2085));
IKReal x2087=((cj7)*(r00)*(r11)*(x2080));
IKReal x2088=((cj7)*(r00)*(r11)*(x2081));
IKReal x2089=((cj8)*(r02)*(r11)*(sj7));
IKReal x2090=((r02)*(r10)*(sj7)*(sj8));
IKReal x2091=((x2090)+(x2088)+(x2089)+(x2087));
j3array[0]=IKatan2(((((IKabs(((x2091)+(((-1.00000000000000)*(x2086))))) != 0)?((IKReal)1/(((x2091)+(((-1.00000000000000)*(x2086)))))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x2091)))+(x2086))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x2091)))+(x2086)))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x2092=((cj8)*(r10)*(sj3)*(sj7));
IKReal x2093=((cj3)*(cj8)*(r00)*(sj7));
IKReal x2094=((x2093)+(x2092));
IKReal x2095=((cj7)*(r12)*(sj3));
IKReal x2096=((cj3)*(cj7)*(r02));
IKReal x2097=((cj3)*(r01)*(sj7)*(sj8));
IKReal x2098=((r11)*(sj3)*(sj7)*(sj8));
IKReal x2099=((x2095)+(x2097)+(x2096)+(x2098));
IKReal x2100=((((-1.00000000000000)*(x2099)))+(x2094));
IKReal x2101=((cj7)*(r22));
IKReal x2102=((r21)*(sj7)*(sj8));
IKReal x2103=((x2102)+(x2101));
IKReal x2104=((cj8)*(r20)*(sj7));
IKReal x2105=((((-1.00000000000000)*(x2104)))+(x2103));
IKReal x2106=(cj5)*(cj5);
IKReal x2107=(sj5)*(sj5);
IKReal x2108=((x2107)+(x2106));
IKReal x2109=((-1.00000000000000)*(x2108));
IKReal x2110=((IKabs(x2109) != 0)?((IKReal)1/(x2109)):(IKReal)1.0e30);
j4array[0]=IKatan2(((x2110)*(((((cj5)*(x2105)))+(((-1.00000000000000)*(sj5)*(x2100)))))), ((x2110)*(((((cj5)*(x2100)))+(((sj5)*(x2105)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x2111=(cj5)*(cj5);
IKReal x2112=(sj5)*(sj5);
IKReal x2113=((x2111)+(x2112));
IKReal x2114=((r12)*(sj3)*(sj7));
IKReal x2115=((cj3)*(r02)*(sj7));
IKReal x2116=((cj7)*(cj8)*(r10)*(sj3));
IKReal x2117=((cj3)*(cj7)*(cj8)*(r00));
IKReal x2118=((x2114)+(x2115)+(x2116)+(x2117));
IKReal x2119=((cj3)*(cj7)*(r01)*(sj8));
IKReal x2120=((cj7)*(r11)*(sj3)*(sj8));
IKReal x2121=((x2120)+(x2119));
IKReal x2122=((x2118)+(((-1.00000000000000)*(x2121))));
IKReal x2123=((cj7)*(r21)*(sj8));
IKReal x2124=((cj7)*(cj8)*(r20));
IKReal x2125=((r22)*(sj7));
IKReal x2126=((x2125)+(x2124));
IKReal x2127=((x2123)+(((-1.00000000000000)*(x2126))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x2113) != 0)?((IKReal)1/(x2113)):(IKReal)1.0e30))*(((((sj5)*(x2127)))+(((cj5)*(x2122)))))), ((((IKabs(x2113) != 0)?((IKReal)1/(x2113)):(IKReal)1.0e30))*(((((-1.00000000000000)*(sj5)*(x2122)))+(((cj5)*(x2127)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x2128=(cj5)*(cj5);
IKReal x2129=(sj5)*(sj5);
IKReal x2130=((x2129)+(x2128));
IKReal x2131=((cj7)*(r22));
IKReal x2132=((r21)*(sj7)*(sj8));
IKReal x2133=((x2132)+(x2131));
IKReal x2134=((cj8)*(r20)*(sj7));
IKReal x2135=((((-1.00000000000000)*(x2134)))+(x2133));
IKReal x2136=((cj7)*(r21)*(sj8));
IKReal x2137=((cj7)*(cj8)*(r20));
IKReal x2138=((r22)*(sj7));
IKReal x2139=((x2137)+(x2138));
IKReal x2140=((((-1.00000000000000)*(x2139)))+(x2136));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x2130) != 0)?((IKReal)1/(x2130)):(IKReal)1.0e30))*(((((cj5)*(x2135)))+(((sj5)*(x2140)))))), ((((IKabs(x2130) != 0)?((IKReal)1/(x2130)):(IKReal)1.0e30))*(((((cj5)*(x2140)))+(((-1.00000000000000)*(sj5)*(x2135)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x2141=(sj8)*(sj8);
IKReal x2142=(cj8)*(cj8);
IKReal x2143=(r11)*(r11);
IKReal x2144=((x2142)*(x2143));
IKReal x2145=(r00)*(r00);
IKReal x2146=((x2141)*(x2145));
IKReal x2147=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
IKReal x2148=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
IKReal x2149=(r10)*(r10);
IKReal x2150=((x2141)*(x2149));
IKReal x2151=(r01)*(r01);
IKReal x2152=((x2142)*(x2151));
IKReal x2153=((x2150)+(x2152)+(x2147)+(x2146)+(x2144)+(x2148));
j3array[0]=IKatan2(((((IKabs(x2153) != 0)?((IKReal)1/(x2153)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((-1.00000000000000)*(((IKabs(x2153) != 0)?((IKReal)1/(x2153)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x2154=((cj8)*(r10)*(sj3)*(sj7));
IKReal x2155=((cj3)*(cj8)*(r00)*(sj7));
IKReal x2156=((x2154)+(x2155));
IKReal x2157=((cj7)*(r12)*(sj3));
IKReal x2158=((cj3)*(cj7)*(r02));
IKReal x2159=((cj3)*(r01)*(sj7)*(sj8));
IKReal x2160=((r11)*(sj3)*(sj7)*(sj8));
IKReal x2161=((x2160)+(x2157)+(x2158)+(x2159));
IKReal x2162=((x2156)+(((-1.00000000000000)*(x2161))));
IKReal x2163=((cj7)*(r22));
IKReal x2164=((r21)*(sj7)*(sj8));
IKReal x2165=((x2164)+(x2163));
IKReal x2166=((cj8)*(r20)*(sj7));
IKReal x2167=((x2165)+(((-1.00000000000000)*(x2166))));
IKReal x2168=(cj5)*(cj5);
IKReal x2169=(sj5)*(sj5);
IKReal x2170=((x2169)+(x2168));
IKReal x2171=((-1.00000000000000)*(x2170));
IKReal x2172=((IKabs(x2171) != 0)?((IKReal)1/(x2171)):(IKReal)1.0e30);
j4array[0]=IKatan2(((x2172)*(((((-1.00000000000000)*(sj5)*(x2162)))+(((cj5)*(x2167)))))), ((x2172)*(((((cj5)*(x2162)))+(((sj5)*(x2167)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x2173=(cj5)*(cj5);
IKReal x2174=(sj5)*(sj5);
IKReal x2175=((x2173)+(x2174));
IKReal x2176=((r12)*(sj3)*(sj7));
IKReal x2177=((cj3)*(r02)*(sj7));
IKReal x2178=((cj7)*(cj8)*(r10)*(sj3));
IKReal x2179=((cj3)*(cj7)*(cj8)*(r00));
IKReal x2180=((x2176)+(x2177)+(x2178)+(x2179));
IKReal x2181=((cj3)*(cj7)*(r01)*(sj8));
IKReal x2182=((cj7)*(r11)*(sj3)*(sj8));
IKReal x2183=((x2182)+(x2181));
IKReal x2184=((x2180)+(((-1.00000000000000)*(x2183))));
IKReal x2185=((cj7)*(r21)*(sj8));
IKReal x2186=((cj7)*(cj8)*(r20));
IKReal x2187=((r22)*(sj7));
IKReal x2188=((x2187)+(x2186));
IKReal x2189=((x2185)+(((-1.00000000000000)*(x2188))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x2175) != 0)?((IKReal)1/(x2175)):(IKReal)1.0e30))*(((((sj5)*(x2189)))+(((cj5)*(x2184)))))), ((((IKabs(x2175) != 0)?((IKReal)1/(x2175)):(IKReal)1.0e30))*(((((-1.00000000000000)*(sj5)*(x2184)))+(((cj5)*(x2189)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x2190=(cj5)*(cj5);
IKReal x2191=(sj5)*(sj5);
IKReal x2192=((x2190)+(x2191));
IKReal x2193=((cj7)*(r22));
IKReal x2194=((r21)*(sj7)*(sj8));
IKReal x2195=((x2193)+(x2194));
IKReal x2196=((cj8)*(r20)*(sj7));
IKReal x2197=((x2195)+(((-1.00000000000000)*(x2196))));
IKReal x2198=((cj7)*(r21)*(sj8));
IKReal x2199=((cj7)*(cj8)*(r20));
IKReal x2200=((r22)*(sj7));
IKReal x2201=((x2200)+(x2199));
IKReal x2202=((((-1.00000000000000)*(x2201)))+(x2198));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x2192) != 0)?((IKReal)1/(x2192)):(IKReal)1.0e30))*(((((cj5)*(x2197)))+(((sj5)*(x2202)))))), ((((IKabs(x2192) != 0)?((IKReal)1/(x2192)):(IKReal)1.0e30))*(((((cj5)*(x2202)))+(((-1.00000000000000)*(sj5)*(x2197)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x2203=(cj5)*(cj5);
IKReal x2204=(sj5)*(sj5);
IKReal x2205=((x2203)+(x2204));
IKReal x2206=((cj7)*(r22));
IKReal x2207=((r21)*(sj7)*(sj8));
IKReal x2208=((x2206)+(x2207));
IKReal x2209=((cj8)*(r20)*(sj7));
IKReal x2210=((x2208)+(((-1.00000000000000)*(x2209))));
IKReal x2211=((cj7)*(r21)*(sj8));
IKReal x2212=((cj7)*(cj8)*(r20));
IKReal x2213=((r22)*(sj7));
IKReal x2214=((x2213)+(x2212));
IKReal x2215=((x2211)+(((-1.00000000000000)*(x2214))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x2205) != 0)?((IKReal)1/(x2205)):(IKReal)1.0e30))*(((((cj5)*(x2210)))+(((sj5)*(x2215)))))), ((((IKabs(x2205) != 0)?((IKReal)1/(x2205)):(IKReal)1.0e30))*(((((cj5)*(x2215)))+(((-1.00000000000000)*(sj5)*(x2210)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
IKReal x2216=(sj8)*(sj8);
IKReal x2217=(cj8)*(cj8);
dummyeval[0]=((((x2217)*((r11)*(r11))))+(((x2216)*((r00)*(r00))))+(((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))+(((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((x2216)*((r10)*(r10))))+(((x2217)*((r01)*(r01)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
IKReal x2218=(sj8)*(sj8);
IKReal x2219=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((cj7)*(r00)*(r11)*(x2219)))+(((cj7)*(r00)*(r11)*(x2218)))+(((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((cj8)*(r02)*(r11)*(sj7)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x2218)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x2219)))+(((r02)*(r10)*(sj7)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
IKReal x2220=(cj8)*(cj8);
IKReal x2221=(sj8)*(sj8);
dummyeval[0]=((((cj7)*(cj8)*(r01)*(r12)))+(((cj7)*(r00)*(r12)*(sj8)))+(((-1.00000000000000)*(r01)*(r10)*(sj7)*(x2221)))+(((-1.00000000000000)*(r01)*(r10)*(sj7)*(x2220)))+(((r00)*(r11)*(sj7)*(x2220)))+(((r00)*(r11)*(sj7)*(x2221)))+(((-1.00000000000000)*(cj7)*(r02)*(r10)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r02)*(r11))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x2222=(cj8)*(cj8);
IKReal x2223=(sj8)*(sj8);
IKReal x2224=((cj7)*(cj8)*(r02)*(r11));
IKReal x2225=((r01)*(r10)*(sj7)*(x2222));
IKReal x2226=((cj7)*(r02)*(r10)*(sj8));
IKReal x2227=((r01)*(r10)*(sj7)*(x2223));
IKReal x2228=((x2226)+(x2227)+(x2224)+(x2225));
IKReal x2229=((cj7)*(cj8)*(r01)*(r12));
IKReal x2230=((cj7)*(r00)*(r12)*(sj8));
IKReal x2231=((r00)*(r11)*(sj7)*(x2223));
IKReal x2232=((r00)*(r11)*(sj7)*(x2222));
IKReal x2233=((x2229)+(x2231)+(x2230)+(x2232));
j3array[0]=IKatan2(((((IKabs(((x2233)+(((-1.00000000000000)*(x2228))))) != 0)?((IKReal)1/(((x2233)+(((-1.00000000000000)*(x2228)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(r11)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r12)))+(((cj8)*(r10)*(sj7)))))), ((((IKabs(((x2228)+(((-1.00000000000000)*(x2233))))) != 0)?((IKReal)1/(((x2228)+(((-1.00000000000000)*(x2233)))))):(IKReal)1.0e30))*(((((r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r00)*(sj7)))+(((cj7)*(r02)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x2234=(sj8)*(sj8);
IKReal x2235=(cj8)*(cj8);
IKReal x2236=((cj7)*(r01)*(r10)*(x2234));
IKReal x2237=((cj7)*(r01)*(r10)*(x2235));
IKReal x2238=((r00)*(r12)*(sj7)*(sj8));
IKReal x2239=((cj8)*(r01)*(r12)*(sj7));
IKReal x2240=((x2239)+(x2238)+(x2237)+(x2236));
IKReal x2241=((cj7)*(r00)*(r11)*(x2234));
IKReal x2242=((cj7)*(r00)*(r11)*(x2235));
IKReal x2243=((cj8)*(r02)*(r11)*(sj7));
IKReal x2244=((r02)*(r10)*(sj7)*(sj8));
IKReal x2245=((x2244)+(x2241)+(x2242)+(x2243));
j3array[0]=IKatan2(((((IKabs(((x2245)+(((-1.00000000000000)*(x2240))))) != 0)?((IKReal)1/(((x2245)+(((-1.00000000000000)*(x2240)))))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((x2240)+(((-1.00000000000000)*(x2245))))) != 0)?((IKReal)1/(((x2240)+(((-1.00000000000000)*(x2245)))))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x2246=(sj8)*(sj8);
IKReal x2247=(cj8)*(cj8);
IKReal x2248=(r11)*(r11);
IKReal x2249=((x2247)*(x2248));
IKReal x2250=(r00)*(r00);
IKReal x2251=((x2246)*(x2250));
IKReal x2252=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
IKReal x2253=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
IKReal x2254=(r10)*(r10);
IKReal x2255=((x2246)*(x2254));
IKReal x2256=(r01)*(r01);
IKReal x2257=((x2247)*(x2256));
IKReal x2258=((x2249)+(x2257)+(x2255)+(x2253)+(x2252)+(x2251));
j3array[0]=IKatan2(((((IKabs(x2258) != 0)?((IKReal)1/(x2258)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((-1.00000000000000)*(((IKabs(x2258) != 0)?((IKReal)1/(x2258)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((-3.14159265358979)+(3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[2]=((-0.0850000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[3]=((0.220000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((-0.0200000000000000)*(sj5)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[4]=((-0.0200000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.250000000000000)*(sj5)))+(((0.0200000000000000)*(cj5)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
IKReal x2259=(sj8)*(sj8);
IKReal x2260=(cj8)*(cj8);
dummyeval[0]=((((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))+(((-1.00000000000000)*(x2259)*((r00)*(r00))))+(((-1.00000000000000)*(x2259)*((r10)*(r10))))+(((-1.00000000000000)*(x2260)*((r11)*(r11))))+(((-1.00000000000000)*(x2260)*((r01)*(r01)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
IKReal x2261=(sj8)*(sj8);
IKReal x2262=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(cj7)*(r00)*(r11)*(x2261)))+(((-1.00000000000000)*(cj7)*(r00)*(r11)*(x2262)))+(((r00)*(r12)*(sj7)*(sj8)))+(((cj8)*(r01)*(r12)*(sj7)))+(((-1.00000000000000)*(cj8)*(r02)*(r11)*(sj7)))+(((-1.00000000000000)*(r02)*(r10)*(sj7)*(sj8)))+(((cj7)*(r01)*(r10)*(x2262)))+(((cj7)*(r01)*(r10)*(x2261))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x2263=(sj8)*(sj8);
IKReal x2264=(cj8)*(cj8);
IKReal x2265=((cj7)*(r00)*(r11)*(x2263));
IKReal x2266=((cj7)*(r00)*(r11)*(x2264));
IKReal x2267=((cj8)*(r02)*(r11)*(sj7));
IKReal x2268=((r02)*(r10)*(sj7)*(sj8));
IKReal x2269=((x2268)+(x2266)+(x2267)+(x2265));
IKReal x2270=((cj7)*(r01)*(r10)*(x2263));
IKReal x2271=((cj7)*(r01)*(r10)*(x2264));
IKReal x2272=((r00)*(r12)*(sj7)*(sj8));
IKReal x2273=((cj8)*(r01)*(r12)*(sj7));
IKReal x2274=((x2271)+(x2270)+(x2273)+(x2272));
j3array[0]=IKatan2(((((IKabs(((x2274)+(((-1.00000000000000)*(x2269))))) != 0)?((IKReal)1/(((x2274)+(((-1.00000000000000)*(x2269)))))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((x2269)+(((-1.00000000000000)*(x2274))))) != 0)?((IKReal)1/(((x2269)+(((-1.00000000000000)*(x2274)))))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x2275=(cj5)*(cj5);
IKReal x2276=(sj5)*(sj5);
IKReal x2277=((x2275)+(x2276));
IKReal x2278=((r12)*(sj3)*(sj7));
IKReal x2279=((cj3)*(r02)*(sj7));
IKReal x2280=((cj7)*(cj8)*(r10)*(sj3));
IKReal x2281=((cj3)*(cj7)*(cj8)*(r00));
IKReal x2282=((x2280)+(x2281)+(x2279)+(x2278));
IKReal x2283=((cj3)*(cj7)*(r01)*(sj8));
IKReal x2284=((cj7)*(r11)*(sj3)*(sj8));
IKReal x2285=((x2283)+(x2284));
IKReal x2286=((x2282)+(((-1.00000000000000)*(x2285))));
IKReal x2287=((cj7)*(r21)*(sj8));
IKReal x2288=((cj7)*(cj8)*(r20));
IKReal x2289=((r22)*(sj7));
IKReal x2290=((x2288)+(x2289));
IKReal x2291=((x2287)+(((-1.00000000000000)*(x2290))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x2277) != 0)?((IKReal)1/(x2277)):(IKReal)1.0e30))*(((((sj5)*(x2291)))+(((cj5)*(x2286)))))), ((((IKabs(x2277) != 0)?((IKReal)1/(x2277)):(IKReal)1.0e30))*(((((-1.00000000000000)*(sj5)*(x2286)))+(((cj5)*(x2291)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x2292=(cj5)*(cj5);
IKReal x2293=(sj5)*(sj5);
IKReal x2294=((x2293)+(x2292));
IKReal x2295=((IKabs(x2294) != 0)?((IKReal)1/(x2294)):(IKReal)1.0e30);
IKReal x2296=((cj8)*(r10)*(sj3)*(sj7));
IKReal x2297=((cj3)*(cj8)*(r00)*(sj7));
IKReal x2298=((x2297)+(x2296));
IKReal x2299=((cj7)*(r12)*(sj3));
IKReal x2300=((cj3)*(cj7)*(r02));
IKReal x2301=((cj3)*(r01)*(sj7)*(sj8));
IKReal x2302=((r11)*(sj3)*(sj7)*(sj8));
IKReal x2303=((x2299)+(x2301)+(x2300)+(x2302));
IKReal x2304=((x2298)+(((-1.00000000000000)*(x2303))));
IKReal x2305=((cj7)*(r22));
IKReal x2306=((r21)*(sj7)*(sj8));
IKReal x2307=((x2305)+(x2306));
IKReal x2308=((cj8)*(r20)*(sj7));
IKReal x2309=((x2307)+(((-1.00000000000000)*(x2308))));
j4array[0]=IKatan2(((x2295)*(((((cj5)*(x2309)))+(((-1.00000000000000)*(sj5)*(x2304)))))), ((x2295)*(((((cj5)*(x2304)))+(((sj5)*(x2309)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x2310=(cj5)*(cj5);
IKReal x2311=(sj5)*(sj5);
IKReal x2312=((x2310)+(x2311));
IKReal x2313=((IKabs(x2312) != 0)?((IKReal)1/(x2312)):(IKReal)1.0e30);
IKReal x2314=((cj7)*(r22));
IKReal x2315=((r21)*(sj7)*(sj8));
IKReal x2316=((x2314)+(x2315));
IKReal x2317=((cj8)*(r20)*(sj7));
IKReal x2318=((x2316)+(((-1.00000000000000)*(x2317))));
IKReal x2319=((cj7)*(r21)*(sj8));
IKReal x2320=((cj7)*(cj8)*(r20));
IKReal x2321=((r22)*(sj7));
IKReal x2322=((x2321)+(x2320));
IKReal x2323=((x2319)+(((-1.00000000000000)*(x2322))));
j4array[0]=IKatan2(((x2313)*(((((cj5)*(x2318)))+(((-1.00000000000000)*(sj5)*(x2323)))))), ((x2313)*(((((sj5)*(x2318)))+(((cj5)*(x2323)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x2324=(sj8)*(sj8);
IKReal x2325=(cj8)*(cj8);
IKReal x2326=(r11)*(r11);
IKReal x2327=((x2325)*(x2326));
IKReal x2328=(r00)*(r00);
IKReal x2329=((x2324)*(x2328));
IKReal x2330=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
IKReal x2331=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
IKReal x2332=(r10)*(r10);
IKReal x2333=((x2324)*(x2332));
IKReal x2334=(r01)*(r01);
IKReal x2335=((x2325)*(x2334));
IKReal x2336=((x2330)+(x2331)+(x2333)+(x2335)+(x2327)+(x2329));
j3array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x2336) != 0)?((IKReal)1/(x2336)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((((IKabs(x2336) != 0)?((IKReal)1/(x2336)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x2337=(cj5)*(cj5);
IKReal x2338=(sj5)*(sj5);
IKReal x2339=((x2337)+(x2338));
IKReal x2340=((r12)*(sj3)*(sj7));
IKReal x2341=((cj3)*(r02)*(sj7));
IKReal x2342=((cj7)*(cj8)*(r10)*(sj3));
IKReal x2343=((cj3)*(cj7)*(cj8)*(r00));
IKReal x2344=((x2341)+(x2340)+(x2343)+(x2342));
IKReal x2345=((cj3)*(cj7)*(r01)*(sj8));
IKReal x2346=((cj7)*(r11)*(sj3)*(sj8));
IKReal x2347=((x2345)+(x2346));
IKReal x2348=((x2344)+(((-1.00000000000000)*(x2347))));
IKReal x2349=((cj7)*(r21)*(sj8));
IKReal x2350=((cj7)*(cj8)*(r20));
IKReal x2351=((r22)*(sj7));
IKReal x2352=((x2350)+(x2351));
IKReal x2353=((x2349)+(((-1.00000000000000)*(x2352))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x2339) != 0)?((IKReal)1/(x2339)):(IKReal)1.0e30))*(((((cj5)*(x2348)))+(((sj5)*(x2353)))))), ((((IKabs(x2339) != 0)?((IKReal)1/(x2339)):(IKReal)1.0e30))*(((((-1.00000000000000)*(sj5)*(x2348)))+(((cj5)*(x2353)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x2354=(cj5)*(cj5);
IKReal x2355=(sj5)*(sj5);
IKReal x2356=((x2354)+(x2355));
IKReal x2357=((IKabs(x2356) != 0)?((IKReal)1/(x2356)):(IKReal)1.0e30);
IKReal x2358=((cj8)*(r10)*(sj3)*(sj7));
IKReal x2359=((cj3)*(cj8)*(r00)*(sj7));
IKReal x2360=((x2358)+(x2359));
IKReal x2361=((cj7)*(r12)*(sj3));
IKReal x2362=((cj3)*(cj7)*(r02));
IKReal x2363=((cj3)*(r01)*(sj7)*(sj8));
IKReal x2364=((r11)*(sj3)*(sj7)*(sj8));
IKReal x2365=((x2364)+(x2363)+(x2362)+(x2361));
IKReal x2366=((x2360)+(((-1.00000000000000)*(x2365))));
IKReal x2367=((cj7)*(r22));
IKReal x2368=((r21)*(sj7)*(sj8));
IKReal x2369=((x2368)+(x2367));
IKReal x2370=((cj8)*(r20)*(sj7));
IKReal x2371=((x2369)+(((-1.00000000000000)*(x2370))));
j4array[0]=IKatan2(((x2357)*(((((-1.00000000000000)*(sj5)*(x2366)))+(((cj5)*(x2371)))))), ((x2357)*(((((cj5)*(x2366)))+(((sj5)*(x2371)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x2372=(cj5)*(cj5);
IKReal x2373=(sj5)*(sj5);
IKReal x2374=((x2372)+(x2373));
IKReal x2375=((IKabs(x2374) != 0)?((IKReal)1/(x2374)):(IKReal)1.0e30);
IKReal x2376=((cj7)*(r22));
IKReal x2377=((r21)*(sj7)*(sj8));
IKReal x2378=((x2376)+(x2377));
IKReal x2379=((cj8)*(r20)*(sj7));
IKReal x2380=((x2378)+(((-1.00000000000000)*(x2379))));
IKReal x2381=((cj7)*(r21)*(sj8));
IKReal x2382=((cj7)*(cj8)*(r20));
IKReal x2383=((r22)*(sj7));
IKReal x2384=((x2383)+(x2382));
IKReal x2385=((x2381)+(((-1.00000000000000)*(x2384))));
j4array[0]=IKatan2(((x2375)*(((((-1.00000000000000)*(sj5)*(x2385)))+(((cj5)*(x2380)))))), ((x2375)*(((((sj5)*(x2380)))+(((cj5)*(x2385)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x2386=(cj5)*(cj5);
IKReal x2387=(sj5)*(sj5);
IKReal x2388=((x2387)+(x2386));
IKReal x2389=((IKabs(x2388) != 0)?((IKReal)1/(x2388)):(IKReal)1.0e30);
IKReal x2390=((cj7)*(r22));
IKReal x2391=((r21)*(sj7)*(sj8));
IKReal x2392=((x2390)+(x2391));
IKReal x2393=((cj8)*(r20)*(sj7));
IKReal x2394=((x2392)+(((-1.00000000000000)*(x2393))));
IKReal x2395=((cj7)*(r21)*(sj8));
IKReal x2396=((cj7)*(cj8)*(r20));
IKReal x2397=((r22)*(sj7));
IKReal x2398=((x2396)+(x2397));
IKReal x2399=((x2395)+(((-1.00000000000000)*(x2398))));
j4array[0]=IKatan2(((x2389)*(((((-1.00000000000000)*(sj5)*(x2399)))+(((cj5)*(x2394)))))), ((x2389)*(((((sj5)*(x2394)))+(((cj5)*(x2399)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
IKReal x2400=(sj8)*(sj8);
IKReal x2401=(cj8)*(cj8);
dummyeval[0]=((((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-1.00000000000000)*(x2400)*((r10)*(r10))))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))+(((-1.00000000000000)*(x2401)*((r01)*(r01))))+(((-1.00000000000000)*(x2401)*((r11)*(r11))))+(((-1.00000000000000)*(x2400)*((r00)*(r00)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
IKReal x2402=(sj8)*(sj8);
IKReal x2403=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(cj7)*(r00)*(r11)*(x2403)))+(((-1.00000000000000)*(cj7)*(r00)*(r11)*(x2402)))+(((cj7)*(r01)*(r10)*(x2402)))+(((cj7)*(r01)*(r10)*(x2403)))+(((r00)*(r12)*(sj7)*(sj8)))+(((cj8)*(r01)*(r12)*(sj7)))+(((-1.00000000000000)*(cj8)*(r02)*(r11)*(sj7)))+(((-1.00000000000000)*(r02)*(r10)*(sj7)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
IKReal x2404=(sj8)*(sj8);
IKReal x2405=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((r01)*(r10)*(sj7)*(x2405)))+(((r01)*(r10)*(sj7)*(x2404)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x2404)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x2405)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x2406=(sj8)*(sj8);
IKReal x2407=(cj8)*(cj8);
IKReal x2408=((cj7)*(cj8)*(r01)*(r12));
IKReal x2409=((cj7)*(r00)*(r12)*(sj8));
IKReal x2410=((r00)*(r11)*(sj7)*(x2406));
IKReal x2411=((r00)*(r11)*(sj7)*(x2407));
IKReal x2412=((x2408)+(x2409)+(x2411)+(x2410));
IKReal x2413=((cj7)*(cj8)*(r02)*(r11));
IKReal x2414=((r01)*(r10)*(sj7)*(x2407));
IKReal x2415=((cj7)*(r02)*(r10)*(sj8));
IKReal x2416=((r01)*(r10)*(sj7)*(x2406));
IKReal x2417=((x2413)+(x2415)+(x2414)+(x2416));
j3array[0]=IKatan2(((((IKabs(((x2417)+(((-1.00000000000000)*(x2412))))) != 0)?((IKReal)1/(((x2417)+(((-1.00000000000000)*(x2412)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(r11)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r12)))+(((cj8)*(r10)*(sj7)))))), ((((IKabs(((x2412)+(((-1.00000000000000)*(x2417))))) != 0)?((IKReal)1/(((x2412)+(((-1.00000000000000)*(x2417)))))):(IKReal)1.0e30))*(((((r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r00)*(sj7)))+(((cj7)*(r02)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x2418=(sj8)*(sj8);
IKReal x2419=(cj8)*(cj8);
IKReal x2420=((cj7)*(r00)*(r11)*(x2418));
IKReal x2421=((cj7)*(r00)*(r11)*(x2419));
IKReal x2422=((cj8)*(r02)*(r11)*(sj7));
IKReal x2423=((r02)*(r10)*(sj7)*(sj8));
IKReal x2424=((x2420)+(x2421)+(x2422)+(x2423));
IKReal x2425=((cj7)*(r01)*(r10)*(x2418));
IKReal x2426=((cj7)*(r01)*(r10)*(x2419));
IKReal x2427=((r00)*(r12)*(sj7)*(sj8));
IKReal x2428=((cj8)*(r01)*(r12)*(sj7));
IKReal x2429=((x2428)+(x2425)+(x2426)+(x2427));
j3array[0]=IKatan2(((((IKabs(((x2429)+(((-1.00000000000000)*(x2424))))) != 0)?((IKReal)1/(((x2429)+(((-1.00000000000000)*(x2424)))))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((x2424)+(((-1.00000000000000)*(x2429))))) != 0)?((IKReal)1/(((x2424)+(((-1.00000000000000)*(x2429)))))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x2430=(sj8)*(sj8);
IKReal x2431=(cj8)*(cj8);
IKReal x2432=(r11)*(r11);
IKReal x2433=((x2431)*(x2432));
IKReal x2434=(r00)*(r00);
IKReal x2435=((x2430)*(x2434));
IKReal x2436=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
IKReal x2437=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
IKReal x2438=(r10)*(r10);
IKReal x2439=((x2430)*(x2438));
IKReal x2440=(r01)*(r01);
IKReal x2441=((x2431)*(x2440));
IKReal x2442=((x2439)+(x2433)+(x2437)+(x2436)+(x2435)+(x2441));
j3array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x2442) != 0)?((IKReal)1/(x2442)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((((IKabs(x2442) != 0)?((IKReal)1/(x2442)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x2443=(sj8)*(sj8);
IKReal x2444=(cj8)*(cj8);
IKReal x2445=((cj7)*(r01)*(r10)*(x2443));
IKReal x2446=((cj7)*(r01)*(r10)*(x2444));
IKReal x2447=((r00)*(r12)*(sj7)*(sj8));
IKReal x2448=((cj8)*(r01)*(r12)*(sj7));
IKReal x2449=((x2446)+(x2447)+(x2445)+(x2448));
IKReal x2450=((cj7)*(r00)*(r11)*(x2443));
IKReal x2451=((cj7)*(r00)*(r11)*(x2444));
IKReal x2452=((cj8)*(r02)*(r11)*(sj7));
IKReal x2453=((r02)*(r10)*(sj7)*(sj8));
IKReal x2454=((x2451)+(x2450)+(x2453)+(x2452));
j3array[0]=IKatan2(((cj6)*(((IKabs(((x2454)+(((-1.00000000000000)*(x2449))))) != 0)?((IKReal)1/(((x2454)+(((-1.00000000000000)*(x2449)))))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((cj6)*(((IKabs(((x2449)+(((-1.00000000000000)*(x2454))))) != 0)?((IKReal)1/(((x2449)+(((-1.00000000000000)*(x2454)))))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*(cj6)*((sj5)*(sj5))))+(((-1.00000000000000)*(cj6)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal evalcond[9];
evalcond[0]=((-3.14159265358979)+(IKfmod(((-1.57079632679490)+(3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((-0.0200000000000000)+(((npx)*(sj8)))+(((cj8)*(npy)))+(((0.250000000000000)*(sj5)))+(((0.0200000000000000)*(cj5))));
evalcond[2]=((((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[3]=((0.220000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((-0.0200000000000000)*(sj5)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[4]=((((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8))));
evalcond[5]=((0.0850000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
evalcond[6]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[7]=((1.00000000000000)+(((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
evalcond[8]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((cj3)*(cj8)*(r00)*(sj7))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x2455=(cj5)*(cj5);
IKReal x2456=(sj5)*(sj5);
IKReal x2457=((x2455)+(x2456));
IKReal x2458=((r12)*(sj3)*(sj7));
IKReal x2459=((cj3)*(r02)*(sj7));
IKReal x2460=((cj7)*(cj8)*(r10)*(sj3));
IKReal x2461=((cj3)*(cj7)*(cj8)*(r00));
IKReal x2462=((x2460)+(x2461)+(x2459)+(x2458));
IKReal x2463=((cj3)*(cj7)*(r01)*(sj8));
IKReal x2464=((cj7)*(r11)*(sj3)*(sj8));
IKReal x2465=((x2464)+(x2463));
IKReal x2466=((x2462)+(((-1.00000000000000)*(x2465))));
IKReal x2467=((cj7)*(r21)*(sj8));
IKReal x2468=((cj7)*(cj8)*(r20));
IKReal x2469=((r22)*(sj7));
IKReal x2470=((x2468)+(x2469));
IKReal x2471=((x2467)+(((-1.00000000000000)*(x2470))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x2457) != 0)?((IKReal)1/(x2457)):(IKReal)1.0e30))*(((((cj5)*(x2466)))+(((sj5)*(x2471)))))), ((((IKabs(x2457) != 0)?((IKReal)1/(x2457)):(IKReal)1.0e30))*(((((cj5)*(x2471)))+(((-1.00000000000000)*(sj5)*(x2466)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x2472=(cj5)*(cj5);
IKReal x2473=(sj5)*(sj5);
IKReal x2474=((x2473)+(x2472));
IKReal x2475=((IKabs(x2474) != 0)?((IKReal)1/(x2474)):(IKReal)1.0e30);
IKReal x2476=((cj3)*(cj8)*(r01));
IKReal x2477=((cj8)*(r11)*(sj3));
IKReal x2478=((cj3)*(r00)*(sj8));
IKReal x2479=((r10)*(sj3)*(sj8));
IKReal x2480=((x2477)+(x2476)+(x2479)+(x2478));
IKReal x2481=((-1.00000000000000)*(x2480));
IKReal x2482=((cj8)*(r21));
IKReal x2483=((r20)*(sj8));
IKReal x2484=((x2482)+(x2483));
j4array[0]=IKatan2(((x2475)*(((((-1.00000000000000)*(sj5)*(x2481)))+(((cj5)*(x2484)))))), ((x2475)*(((((sj5)*(x2484)))+(((cj5)*(x2481)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x2485=(cj5)*(cj5);
IKReal x2486=(sj5)*(sj5);
IKReal x2487=((x2486)+(x2485));
IKReal x2488=((IKabs(x2487) != 0)?((IKReal)1/(x2487)):(IKReal)1.0e30);
IKReal x2489=((cj7)*(r21)*(sj8));
IKReal x2490=((cj7)*(cj8)*(r20));
IKReal x2491=((r22)*(sj7));
IKReal x2492=((x2491)+(x2490));
IKReal x2493=((x2489)+(((-1.00000000000000)*(x2492))));
IKReal x2494=((cj8)*(r21));
IKReal x2495=((r20)*(sj8));
IKReal x2496=((x2495)+(x2494));
j4array[0]=IKatan2(((x2488)*(((((-1.00000000000000)*(sj5)*(x2493)))+(((cj5)*(x2496)))))), ((x2488)*(((((sj5)*(x2496)))+(((cj5)*(x2493)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((0.0200000000000000)+(((-0.0200000000000000)*(cj5)))+(((npx)*(sj8)))+(((cj8)*(npy)))+(((-0.250000000000000)*(sj5))));
evalcond[2]=((((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[3]=((0.220000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((-0.0200000000000000)*(sj5)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[4]=((((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8))));
evalcond[5]=((-0.0850000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
evalcond[6]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[7]=((-1.00000000000000)+(((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
evalcond[8]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((cj3)*(cj8)*(r00)*(sj7))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x2497=(cj5)*(cj5);
IKReal x2498=(sj5)*(sj5);
IKReal x2499=((x2498)+(x2497));
IKReal x2500=((r12)*(sj3)*(sj7));
IKReal x2501=((cj3)*(r02)*(sj7));
IKReal x2502=((cj7)*(cj8)*(r10)*(sj3));
IKReal x2503=((cj3)*(cj7)*(cj8)*(r00));
IKReal x2504=((x2503)+(x2502)+(x2501)+(x2500));
IKReal x2505=((cj3)*(cj7)*(r01)*(sj8));
IKReal x2506=((cj7)*(r11)*(sj3)*(sj8));
IKReal x2507=((x2506)+(x2505));
IKReal x2508=((((-1.00000000000000)*(x2507)))+(x2504));
IKReal x2509=((cj7)*(r21)*(sj8));
IKReal x2510=((cj7)*(cj8)*(r20));
IKReal x2511=((r22)*(sj7));
IKReal x2512=((x2510)+(x2511));
IKReal x2513=((x2509)+(((-1.00000000000000)*(x2512))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x2499) != 0)?((IKReal)1/(x2499)):(IKReal)1.0e30))*(((((cj5)*(x2508)))+(((sj5)*(x2513)))))), ((((IKabs(x2499) != 0)?((IKReal)1/(x2499)):(IKReal)1.0e30))*(((((-1.00000000000000)*(sj5)*(x2508)))+(((cj5)*(x2513)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x2514=((cj3)*(cj8)*(r01));
IKReal x2515=((cj8)*(r11)*(sj3));
IKReal x2516=((cj3)*(r00)*(sj8));
IKReal x2517=((r10)*(sj3)*(sj8));
IKReal x2518=((x2514)+(x2515)+(x2516)+(x2517));
IKReal x2519=((-1.00000000000000)*(x2518));
IKReal x2520=((cj8)*(r21));
IKReal x2521=((r20)*(sj8));
IKReal x2522=((x2521)+(x2520));
IKReal x2523=(cj5)*(cj5);
IKReal x2524=(sj5)*(sj5);
IKReal x2525=((x2524)+(x2523));
IKReal x2526=((-1.00000000000000)*(x2525));
IKReal x2527=((IKabs(x2526) != 0)?((IKReal)1/(x2526)):(IKReal)1.0e30);
j4array[0]=IKatan2(((x2527)*(((((cj5)*(x2522)))+(((-1.00000000000000)*(sj5)*(x2519)))))), ((x2527)*(((((cj5)*(x2519)))+(((sj5)*(x2522)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x2528=(cj5)*(cj5);
IKReal x2529=(sj5)*(sj5);
IKReal x2530=((x2529)+(x2528));
IKReal x2531=((cj8)*(r21));
IKReal x2532=((r20)*(sj8));
IKReal x2533=((x2532)+(x2531));
IKReal x2534=((cj7)*(r21)*(sj8));
IKReal x2535=((cj7)*(cj8)*(r20));
IKReal x2536=((r22)*(sj7));
IKReal x2537=((x2536)+(x2535));
IKReal x2538=((x2534)+(((-1.00000000000000)*(x2537))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x2530) != 0)?((IKReal)1/(x2530)):(IKReal)1.0e30))*(((((cj5)*(x2533)))+(((sj5)*(x2538)))))), ((((IKabs(x2530) != 0)?((IKReal)1/(x2530)):(IKReal)1.0e30))*(((((cj5)*(x2538)))+(((-1.00000000000000)*(sj5)*(x2533)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
evalcond[0]=((IKfmod(((3.14159265358979)+(j6)), 6.28318530717959))+(-3.14159265358979));
evalcond[1]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[2]=((0.0850000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[3]=((1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[4]=((0.220000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((-0.0200000000000000)*(sj5)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[5]=((0.0200000000000000)+(((-0.0200000000000000)*(cj5)))+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7)))+(((-0.250000000000000)*(sj5))));
evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x2539=((cj8)*(r10)*(sj3)*(sj7));
IKReal x2540=((cj3)*(cj8)*(r00)*(sj7));
IKReal x2541=((x2540)+(x2539));
IKReal x2542=((cj7)*(r12)*(sj3));
IKReal x2543=((cj3)*(cj7)*(r02));
IKReal x2544=((cj3)*(r01)*(sj7)*(sj8));
IKReal x2545=((r11)*(sj3)*(sj7)*(sj8));
IKReal x2546=((x2543)+(x2542)+(x2545)+(x2544));
IKReal x2547=((x2541)+(((-1.00000000000000)*(x2546))));
IKReal x2548=((cj7)*(r22));
IKReal x2549=((r21)*(sj7)*(sj8));
IKReal x2550=((x2549)+(x2548));
IKReal x2551=((cj8)*(r20)*(sj7));
IKReal x2552=((x2550)+(((-1.00000000000000)*(x2551))));
IKReal x2553=(cj5)*(cj5);
IKReal x2554=(sj5)*(sj5);
IKReal x2555=((x2553)+(x2554));
IKReal x2556=((-1.00000000000000)*(x2555));
IKReal x2557=((IKabs(x2556) != 0)?((IKReal)1/(x2556)):(IKReal)1.0e30);
j4array[0]=IKatan2(((x2557)*(((((cj5)*(x2552)))+(((-1.00000000000000)*(sj5)*(x2547)))))), ((x2557)*(((((sj5)*(x2552)))+(((cj5)*(x2547)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x2558=(cj5)*(cj5);
IKReal x2559=(sj5)*(sj5);
IKReal x2560=((x2558)+(x2559));
IKReal x2561=((r12)*(sj3)*(sj7));
IKReal x2562=((cj3)*(r02)*(sj7));
IKReal x2563=((cj7)*(cj8)*(r10)*(sj3));
IKReal x2564=((cj3)*(cj7)*(cj8)*(r00));
IKReal x2565=((x2561)+(x2563)+(x2562)+(x2564));
IKReal x2566=((cj3)*(cj7)*(r01)*(sj8));
IKReal x2567=((cj7)*(r11)*(sj3)*(sj8));
IKReal x2568=((x2567)+(x2566));
IKReal x2569=((x2565)+(((-1.00000000000000)*(x2568))));
IKReal x2570=((cj7)*(r21)*(sj8));
IKReal x2571=((cj7)*(cj8)*(r20));
IKReal x2572=((r22)*(sj7));
IKReal x2573=((x2572)+(x2571));
IKReal x2574=((x2570)+(((-1.00000000000000)*(x2573))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x2560) != 0)?((IKReal)1/(x2560)):(IKReal)1.0e30))*(((((sj5)*(x2574)))+(((cj5)*(x2569)))))), ((((IKabs(x2560) != 0)?((IKReal)1/(x2560)):(IKReal)1.0e30))*(((((cj5)*(x2574)))+(((-1.00000000000000)*(sj5)*(x2569)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x2575=(cj5)*(cj5);
IKReal x2576=(sj5)*(sj5);
IKReal x2577=((x2576)+(x2575));
IKReal x2578=((cj7)*(r22));
IKReal x2579=((r21)*(sj7)*(sj8));
IKReal x2580=((x2578)+(x2579));
IKReal x2581=((cj8)*(r20)*(sj7));
IKReal x2582=((x2580)+(((-1.00000000000000)*(x2581))));
IKReal x2583=((cj7)*(r21)*(sj8));
IKReal x2584=((cj7)*(cj8)*(r20));
IKReal x2585=((r22)*(sj7));
IKReal x2586=((x2585)+(x2584));
IKReal x2587=((x2583)+(((-1.00000000000000)*(x2586))));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x2577) != 0)?((IKReal)1/(x2577)):(IKReal)1.0e30))*(((((sj5)*(x2587)))+(((cj5)*(x2582)))))), ((((IKabs(x2577) != 0)?((IKReal)1/(x2577)):(IKReal)1.0e30))*(((((-1.00000000000000)*(sj5)*(x2582)))+(((cj5)*(x2587)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((-3.14159265358979)+(3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[2]=((-0.0850000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[3]=((-1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[4]=((0.220000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((-0.0200000000000000)*(sj5)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[5]=((-0.0200000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.250000000000000)*(sj5)))+(((0.0200000000000000)*(cj5)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  && IKabs(evalcond[7]) < 0.0000100000000000  && IKabs(evalcond[8]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x2588=(cj5)*(cj5);
IKReal x2589=(sj5)*(sj5);
IKReal x2590=((x2589)+(x2588));
IKReal x2591=((r12)*(sj3)*(sj7));
IKReal x2592=((cj3)*(r02)*(sj7));
IKReal x2593=((cj7)*(cj8)*(r10)*(sj3));
IKReal x2594=((cj3)*(cj7)*(cj8)*(r00));
IKReal x2595=((x2594)+(x2591)+(x2592)+(x2593));
IKReal x2596=((cj3)*(cj7)*(r01)*(sj8));
IKReal x2597=((cj7)*(r11)*(sj3)*(sj8));
IKReal x2598=((x2596)+(x2597));
IKReal x2599=((x2595)+(((-1.00000000000000)*(x2598))));
IKReal x2600=((cj7)*(r21)*(sj8));
IKReal x2601=((cj7)*(cj8)*(r20));
IKReal x2602=((r22)*(sj7));
IKReal x2603=((x2601)+(x2602));
IKReal x2604=((((-1.00000000000000)*(x2603)))+(x2600));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x2590) != 0)?((IKReal)1/(x2590)):(IKReal)1.0e30))*(((((cj5)*(x2599)))+(((sj5)*(x2604)))))), ((((IKabs(x2590) != 0)?((IKReal)1/(x2590)):(IKReal)1.0e30))*(((((cj5)*(x2604)))+(((-1.00000000000000)*(sj5)*(x2599)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x2605=(cj5)*(cj5);
IKReal x2606=(sj5)*(sj5);
IKReal x2607=((x2605)+(x2606));
IKReal x2608=((IKabs(x2607) != 0)?((IKReal)1/(x2607)):(IKReal)1.0e30);
IKReal x2609=((cj8)*(r10)*(sj3)*(sj7));
IKReal x2610=((cj3)*(cj8)*(r00)*(sj7));
IKReal x2611=((x2609)+(x2610));
IKReal x2612=((cj7)*(r12)*(sj3));
IKReal x2613=((cj3)*(cj7)*(r02));
IKReal x2614=((cj3)*(r01)*(sj7)*(sj8));
IKReal x2615=((r11)*(sj3)*(sj7)*(sj8));
IKReal x2616=((x2615)+(x2614)+(x2613)+(x2612));
IKReal x2617=((((-1.00000000000000)*(x2616)))+(x2611));
IKReal x2618=((cj7)*(r22));
IKReal x2619=((r21)*(sj7)*(sj8));
IKReal x2620=((x2619)+(x2618));
IKReal x2621=((cj8)*(r20)*(sj7));
IKReal x2622=((((-1.00000000000000)*(x2621)))+(x2620));
j4array[0]=IKatan2(((x2608)*(((((-1.00000000000000)*(sj5)*(x2617)))+(((cj5)*(x2622)))))), ((x2608)*(((((cj5)*(x2617)))+(((sj5)*(x2622)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x2623=(cj5)*(cj5);
IKReal x2624=(sj5)*(sj5);
IKReal x2625=((x2623)+(x2624));
IKReal x2626=((IKabs(x2625) != 0)?((IKReal)1/(x2625)):(IKReal)1.0e30);
IKReal x2627=((cj7)*(r22));
IKReal x2628=((r21)*(sj7)*(sj8));
IKReal x2629=((x2627)+(x2628));
IKReal x2630=((cj8)*(r20)*(sj7));
IKReal x2631=((((-1.00000000000000)*(x2630)))+(x2629));
IKReal x2632=((cj7)*(r21)*(sj8));
IKReal x2633=((cj7)*(cj8)*(r20));
IKReal x2634=((r22)*(sj7));
IKReal x2635=((x2634)+(x2633));
IKReal x2636=((((-1.00000000000000)*(x2635)))+(x2632));
j4array[0]=IKatan2(((x2626)*(((((cj5)*(x2631)))+(((-1.00000000000000)*(sj5)*(x2636)))))), ((x2626)*(((((sj5)*(x2631)))+(((cj5)*(x2636)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x2637=(cj5)*(cj5);
IKReal x2638=((cj6)*(x2637));
IKReal x2639=(sj5)*(sj5);
IKReal x2640=((cj6)*(x2639));
IKReal x2641=((x2638)+(x2640));
IKReal x2642=((cj7)*(r21)*(sj8));
IKReal x2643=((cj7)*(cj8)*(r20));
IKReal x2644=((r22)*(sj7));
IKReal x2645=((x2643)+(x2644));
IKReal x2646=((((-1.00000000000000)*(x2645)))+(x2642));
IKReal x2647=((cj7)*(r22));
IKReal x2648=((r21)*(sj7)*(sj8));
IKReal x2649=((x2648)+(x2647));
IKReal x2650=((cj8)*(r20)*(sj7));
IKReal x2651=((((-1.00000000000000)*(x2650)))+(x2649));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x2641) != 0)?((IKReal)1/(x2641)):(IKReal)1.0e30))*(((((cj5)*(x2651)))+(((cj6)*(sj5)*(x2646)))))), ((((IKabs(x2641) != 0)?((IKReal)1/(x2641)):(IKReal)1.0e30))*(((((cj5)*(cj6)*(x2646)))+(((-1.00000000000000)*(sj5)*(x2651)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x2652=(cj5)*(cj5);
IKReal x2653=((sj6)*(x2652));
IKReal x2654=(sj5)*(sj5);
IKReal x2655=((sj6)*(x2654));
IKReal x2656=((x2653)+(x2655));
IKReal x2657=((IKabs(x2656) != 0)?((IKReal)1/(x2656)):(IKReal)1.0e30);
IKReal x2658=((cj3)*(cj8)*(r01));
IKReal x2659=((cj8)*(r11)*(sj3));
IKReal x2660=((cj3)*(r00)*(sj8));
IKReal x2661=((r10)*(sj3)*(sj8));
IKReal x2662=((x2659)+(x2658)+(x2660)+(x2661));
IKReal x2663=((-1.00000000000000)*(x2662));
IKReal x2664=((cj8)*(r21));
IKReal x2665=((r20)*(sj8));
IKReal x2666=((x2664)+(x2665));
j4array[0]=IKatan2(((x2657)*(((((cj5)*(x2666)))+(((-1.00000000000000)*(sj5)*(x2663)))))), ((x2657)*(((((cj5)*(x2663)))+(((sj5)*(x2666)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x2667=(cj5)*(cj5);
IKReal x2668=((sj6)*(x2667));
IKReal x2669=(sj5)*(sj5);
IKReal x2670=((sj6)*(x2669));
IKReal x2671=((x2668)+(x2670));
IKReal x2672=((IKabs(x2671) != 0)?((IKReal)1/(x2671)):(IKReal)1.0e30);
IKReal x2673=((cj7)*(r21)*(sj8));
IKReal x2674=((cj7)*(cj8)*(r20));
IKReal x2675=((r22)*(sj7));
IKReal x2676=((x2675)+(x2674));
IKReal x2677=((((-1.00000000000000)*(x2676)))+(x2673));
IKReal x2678=((cj8)*(r21));
IKReal x2679=((r20)*(sj8));
IKReal x2680=((x2679)+(x2678));
j4array[0]=IKatan2(((x2672)*(((((cj5)*(x2680)))+(((-1.00000000000000)*(sj5)*(sj6)*(x2677)))))), ((x2672)*(((((sj5)*(x2680)))+(((cj5)*(sj6)*(x2677)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x2681=(cj5)*(cj5);
IKReal x2682=((cj6)*(x2681));
IKReal x2683=(sj5)*(sj5);
IKReal x2684=((cj6)*(x2683));
IKReal x2685=((x2684)+(x2682));
IKReal x2686=((cj7)*(r21)*(sj8));
IKReal x2687=((cj7)*(cj8)*(r20));
IKReal x2688=((r22)*(sj7));
IKReal x2689=((x2688)+(x2687));
IKReal x2690=((((-1.00000000000000)*(x2689)))+(x2686));
IKReal x2691=((cj7)*(r22));
IKReal x2692=((r21)*(sj7)*(sj8));
IKReal x2693=((x2692)+(x2691));
IKReal x2694=((cj8)*(r20)*(sj7));
IKReal x2695=((((-1.00000000000000)*(x2694)))+(x2693));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x2685) != 0)?((IKReal)1/(x2685)):(IKReal)1.0e30))*(((((cj5)*(x2695)))+(((cj6)*(sj5)*(x2690)))))), ((((IKabs(x2685) != 0)?((IKReal)1/(x2685)):(IKReal)1.0e30))*(((((-1.00000000000000)*(sj5)*(x2695)))+(((cj5)*(cj6)*(x2690)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
IKReal x2696=(sj8)*(sj8);
IKReal x2697=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x2697)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x2696)))+(((cj8)*(r02)*(r11)*(sj7)))+(((cj7)*(r00)*(r11)*(x2697)))+(((cj7)*(r00)*(r11)*(x2696)))+(((r02)*(r10)*(sj7)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
IKReal x2698=(sj8)*(sj8);
IKReal x2699=(cj8)*(cj8);
dummyeval[0]=((((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))+(((-1.00000000000000)*(x2699)*((r11)*(r11))))+(((-1.00000000000000)*(x2698)*((r00)*(r00))))+(((-1.00000000000000)*(x2699)*((r01)*(r01))))+(((-1.00000000000000)*(x2698)*((r10)*(r10)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
IKReal x2700=(sj8)*(sj8);
IKReal x2701=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((r01)*(r10)*(sj7)*(x2700)))+(((r01)*(r10)*(sj7)*(x2701)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x2700)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x2701)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x2702=(sj8)*(sj8);
IKReal x2703=(cj8)*(cj8);
IKReal x2704=((cj7)*(cj8)*(r02)*(r11));
IKReal x2705=((r01)*(r10)*(sj7)*(x2703));
IKReal x2706=((cj7)*(r02)*(r10)*(sj8));
IKReal x2707=((r01)*(r10)*(sj7)*(x2702));
IKReal x2708=((x2705)+(x2704)+(x2707)+(x2706));
IKReal x2709=((cj7)*(cj8)*(r01)*(r12));
IKReal x2710=((cj7)*(r00)*(r12)*(sj8));
IKReal x2711=((r00)*(r11)*(sj7)*(x2702));
IKReal x2712=((r00)*(r11)*(sj7)*(x2703));
IKReal x2713=((x2712)+(x2710)+(x2711)+(x2709));
IKReal x2714=((x2708)+(((-1.00000000000000)*(x2713))));
IKReal x2715=((IKabs(x2714) != 0)?((IKReal)1/(x2714)):(IKReal)1.0e30);
j3array[0]=IKatan2(((x2715)*(((((-1.00000000000000)*(cj6)*(((((-1.00000000000000)*(r11)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r12)))+(((cj8)*(r10)*(sj7)))))))+(((sj6)*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))))))), ((x2715)*(((((cj6)*(((((r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r00)*(sj7)))+(((cj7)*(r02)))))))+(((-1.00000000000000)*(sj6)*(((((r00)*(sj8)))+(((cj8)*(r01)))))))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x2716=(sj8)*(sj8);
IKReal x2717=(cj8)*(cj8);
IKReal x2718=((sj4)*(sj5)*(sj6));
IKReal x2719=((cj4)*(cj5)*(sj6));
IKReal x2720=((x2718)+(((-1.00000000000000)*(x2719))));
IKReal x2721=((r10)*(sj8));
IKReal x2722=((cj8)*(r11));
IKReal x2723=((x2722)+(x2721));
IKReal x2724=((-1.00000000000000)*(x2723));
IKReal x2725=(r11)*(r11);
IKReal x2726=((x2717)*(x2725));
IKReal x2727=(r00)*(r00);
IKReal x2728=((x2716)*(x2727));
IKReal x2729=((2.00000000000000)*(x2721)*(x2722));
IKReal x2730=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
IKReal x2731=(r10)*(r10);
IKReal x2732=((x2716)*(x2731));
IKReal x2733=(r01)*(r01);
IKReal x2734=((x2717)*(x2733));
IKReal x2735=((x2734)+(x2730)+(x2732)+(x2726)+(x2729)+(x2728));
IKReal x2736=((-1.00000000000000)*(x2735));
IKReal x2737=((IKabs(x2736) != 0)?((IKReal)1/(x2736)):(IKReal)1.0e30);
j3array[0]=IKatan2(((x2737)*(((((-1.00000000000000)*(cj6)*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))))+(((x2720)*(x2724)))))), ((x2737)*(((((x2720)*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))))+(((cj6)*(x2724)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x2738=(sj8)*(sj8);
IKReal x2739=(cj8)*(cj8);
IKReal x2740=((cj7)*(r01)*(r10)*(x2738));
IKReal x2741=((cj7)*(r01)*(r10)*(x2739));
IKReal x2742=((r00)*(r12)*(sj7)*(sj8));
IKReal x2743=((cj8)*(r01)*(r12)*(sj7));
IKReal x2744=((x2741)+(x2740)+(x2743)+(x2742));
IKReal x2745=((cj7)*(r00)*(r11)*(x2738));
IKReal x2746=((cj7)*(r00)*(r11)*(x2739));
IKReal x2747=((cj8)*(r02)*(r11)*(sj7));
IKReal x2748=((r02)*(r10)*(sj7)*(sj8));
IKReal x2749=((x2745)+(x2747)+(x2746)+(x2748));
j3array[0]=IKatan2(((cj6)*(((IKabs(((x2749)+(((-1.00000000000000)*(x2744))))) != 0)?((IKReal)1/(((x2749)+(((-1.00000000000000)*(x2744)))))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((cj6)*(((IKabs(((x2744)+(((-1.00000000000000)*(x2749))))) != 0)?((IKReal)1/(((x2744)+(((-1.00000000000000)*(x2749)))))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x2750=(cj5)*(cj5);
IKReal x2751=((sj6)*(x2750));
IKReal x2752=(sj5)*(sj5);
IKReal x2753=((sj6)*(x2752));
IKReal x2754=((x2753)+(x2751));
IKReal x2755=((IKabs(x2754) != 0)?((IKReal)1/(x2754)):(IKReal)1.0e30);
IKReal x2756=((cj7)*(r21)*(sj8));
IKReal x2757=((cj7)*(cj8)*(r20));
IKReal x2758=((r22)*(sj7));
IKReal x2759=((x2757)+(x2758));
IKReal x2760=((x2756)+(((-1.00000000000000)*(x2759))));
IKReal x2761=((cj8)*(r21));
IKReal x2762=((r20)*(sj8));
IKReal x2763=((x2762)+(x2761));
j4array[0]=IKatan2(((x2755)*(((((cj5)*(x2763)))+(((-1.00000000000000)*(sj5)*(sj6)*(x2760)))))), ((x2755)*(((((cj5)*(sj6)*(x2760)))+(((sj5)*(x2763)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
IKReal x2764=(sj8)*(sj8);
IKReal x2765=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((cj7)*(r00)*(r11)*(x2765)))+(((cj7)*(r00)*(r11)*(x2764)))+(((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((cj8)*(r02)*(r11)*(sj7)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x2764)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x2765)))+(((r02)*(r10)*(sj7)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
IKReal x2766=(sj8)*(sj8);
IKReal x2767=(cj8)*(cj8);
dummyeval[0]=((((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))+(((-1.00000000000000)*(x2767)*((r11)*(r11))))+(((-1.00000000000000)*(x2766)*((r00)*(r00))))+(((-1.00000000000000)*(x2766)*((r10)*(r10))))+(((-1.00000000000000)*(x2767)*((r01)*(r01)))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
{
IKReal dummyeval[1];
IKReal x2768=(sj8)*(sj8);
IKReal x2769=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((r01)*(r10)*(sj7)*(x2768)))+(((r01)*(r10)*(sj7)*(x2769)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x2769)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x2768)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000100000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x2770=(sj8)*(sj8);
IKReal x2771=(cj8)*(cj8);
IKReal x2772=((cj7)*(cj8)*(r02)*(r11));
IKReal x2773=((r01)*(r10)*(sj7)*(x2771));
IKReal x2774=((cj7)*(r02)*(r10)*(sj8));
IKReal x2775=((r01)*(r10)*(sj7)*(x2770));
IKReal x2776=((x2772)+(x2773)+(x2774)+(x2775));
IKReal x2777=((cj7)*(cj8)*(r01)*(r12));
IKReal x2778=((cj7)*(r00)*(r12)*(sj8));
IKReal x2779=((r00)*(r11)*(sj7)*(x2770));
IKReal x2780=((r00)*(r11)*(sj7)*(x2771));
IKReal x2781=((x2778)+(x2779)+(x2777)+(x2780));
IKReal x2782=((((-1.00000000000000)*(x2781)))+(x2776));
IKReal x2783=((IKabs(x2782) != 0)?((IKReal)1/(x2782)):(IKReal)1.0e30);
j3array[0]=IKatan2(((x2783)*(((((-1.00000000000000)*(cj6)*(((((-1.00000000000000)*(r11)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r12)))+(((cj8)*(r10)*(sj7)))))))+(((sj6)*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))))))), ((x2783)*(((((cj6)*(((((r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r00)*(sj7)))+(((cj7)*(r02)))))))+(((-1.00000000000000)*(sj6)*(((((r00)*(sj8)))+(((cj8)*(r01)))))))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x2784=(sj8)*(sj8);
IKReal x2785=(cj8)*(cj8);
IKReal x2786=((sj4)*(sj5)*(sj6));
IKReal x2787=((cj4)*(cj5)*(sj6));
IKReal x2788=((((-1.00000000000000)*(x2787)))+(x2786));
IKReal x2789=((r10)*(sj8));
IKReal x2790=((cj8)*(r11));
IKReal x2791=((x2790)+(x2789));
IKReal x2792=((-1.00000000000000)*(x2791));
IKReal x2793=(r11)*(r11);
IKReal x2794=((x2785)*(x2793));
IKReal x2795=(r00)*(r00);
IKReal x2796=((x2784)*(x2795));
IKReal x2797=((2.00000000000000)*(x2789)*(x2790));
IKReal x2798=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
IKReal x2799=(r10)*(r10);
IKReal x2800=((x2784)*(x2799));
IKReal x2801=(r01)*(r01);
IKReal x2802=((x2785)*(x2801));
IKReal x2803=((x2798)+(x2796)+(x2797)+(x2794)+(x2802)+(x2800));
IKReal x2804=((-1.00000000000000)*(x2803));
IKReal x2805=((IKabs(x2804) != 0)?((IKReal)1/(x2804)):(IKReal)1.0e30);
j3array[0]=IKatan2(((x2805)*(((((-1.00000000000000)*(cj6)*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))))+(((x2788)*(x2792)))))), ((x2805)*(((((cj6)*(x2792)))+(((x2788)*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x2806=(sj8)*(sj8);
IKReal x2807=(cj8)*(cj8);
IKReal x2808=((cj7)*(r01)*(r10)*(x2806));
IKReal x2809=((cj7)*(r01)*(r10)*(x2807));
IKReal x2810=((r00)*(r12)*(sj7)*(sj8));
IKReal x2811=((cj8)*(r01)*(r12)*(sj7));
IKReal x2812=((x2808)+(x2809)+(x2811)+(x2810));
IKReal x2813=((cj7)*(r00)*(r11)*(x2806));
IKReal x2814=((cj7)*(r00)*(r11)*(x2807));
IKReal x2815=((cj8)*(r02)*(r11)*(sj7));
IKReal x2816=((r02)*(r10)*(sj7)*(sj8));
IKReal x2817=((x2815)+(x2814)+(x2816)+(x2813));
j3array[0]=IKatan2(((cj6)*(((IKabs(((((-1.00000000000000)*(x2812)))+(x2817))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x2812)))+(x2817)))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((cj6)*(((IKabs(((((-1.00000000000000)*(x2817)))+(x2812))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x2817)))+(x2812)))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}

}

}
}
}

}

}
}
}

}

}
    }
}
return vsolutions.size()>0;
}

static inline bool checkconsistency8(const IKReal* Breal)
{
    IKReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    IKReal tol = 1e-5*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IKReal* matcoeffs, IKReal* rawroots, int& numroots)
{
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    IKReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IKReal IKFAST_ALIGNED16(A[8*8]);
    IKReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IKReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IKReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IKReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IKReal IKFAST_ALIGNED16(wr[16]);
    IKReal IKFAST_ALIGNED16(wi[16]);
    IKReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IKReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        if( IKabs(wi[i]) < tol*100 ) {
            IKReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IKReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IKReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "ba2ac00ac66812b08d5c61678d306dcc"; }

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
